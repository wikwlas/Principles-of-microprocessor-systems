
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000136  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000228  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000216  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <longdelay>:
#include "longdelay.h"

void longdelay(uint16_t n) {
	for (uint16_t i = 0; i < n; i++) {
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	28 17       	cp	r18, r24
  72:	39 07       	cpc	r19, r25
  74:	49 f0       	breq	.+18     	; 0x88 <longdelay+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	ef e9       	ldi	r30, 0x9F	; 159
  78:	ff e0       	ldi	r31, 0x0F	; 15
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <longdelay+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <longdelay+0x14>
  80:	00 00       	nop
  82:	2f 5f       	subi	r18, 0xFF	; 255
  84:	3f 4f       	sbci	r19, 0xFF	; 255
  86:	f4 cf       	rjmp	.-24     	; 0x70 <longdelay+0x4>
		_delay_ms(1);
	}
}
  88:	08 95       	ret

0000008a <main>:
#define SLOWER_BUTTON PD3

#define BUTTONS_PULLUP PORTD

int main(void){
	MOTOR_DIR |= 0x0f;
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	8f 60       	ori	r24, 0x0F	; 15
  8e:	84 bb       	out	0x14, r24	; 20
	BUTTONS_DIR &= ~(0x0f);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	80 7f       	andi	r24, 0xF0	; 240
  94:	81 bb       	out	0x11, r24	; 17
	BUTTONS_PULLUP = 0x0f;
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	82 bb       	out	0x12, r24	; 18
	uint8_t stan = 0;
	uint8_t on = 0;
	uint8_t dir = 0;
	uint8_t faster = 0;
	uint8_t slower = 0;
	uint16_t my_delay = 5;
  9a:	05 e0       	ldi	r16, 0x05	; 5
  9c:	10 e0       	ldi	r17, 0x00	; 0
	BUTTONS_DIR &= ~(0x0f);
	BUTTONS_PULLUP = 0x0f;
	
	uint8_t stan = 0;
	uint8_t on = 0;
	uint8_t dir = 0;
  9e:	d0 e0       	ldi	r29, 0x00	; 0
	MOTOR_DIR |= 0x0f;
	BUTTONS_DIR &= ~(0x0f);
	BUTTONS_PULLUP = 0x0f;
	
	uint8_t stan = 0;
	uint8_t on = 0;
  a0:	80 e0       	ldi	r24, 0x00	; 0
int main(void){
	MOTOR_DIR |= 0x0f;
	BUTTONS_DIR &= ~(0x0f);
	BUTTONS_PULLUP = 0x0f;
	
	uint8_t stan = 0;
  a2:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t slower = 0;
	uint16_t my_delay = 5;
	
	while(1){
		if (!(BUTTONS & (1<<ON_BUTTON))) {
			on ^= 1; // toggle, przelaczanie stanu na przeciwny
  a4:	ff 24       	eor	r15, r15
  a6:	f3 94       	inc	r15
				if (my_delay < 51) my_delay++;
				_delay_ms(10);
			}
			
		if (on) {
			MOTOR = (1<<stan);
  a8:	cc 24       	eor	r12, r12
  aa:	c3 94       	inc	r12
  ac:	d1 2c       	mov	r13, r1
	uint8_t faster = 0;
	uint8_t slower = 0;
	uint16_t my_delay = 5;
	
	while(1){
		if (!(BUTTONS & (1<<ON_BUTTON))) {
  ae:	80 99       	sbic	0x10, 0	; 16
  b0:	07 c0       	rjmp	.+14     	; 0xc0 <main+0x36>
			on ^= 1; // toggle, przelaczanie stanu na przeciwny
  b2:	8f 25       	eor	r24, r15
  b4:	ef e3       	ldi	r30, 0x3F	; 63
  b6:	fc e9       	ldi	r31, 0x9C	; 156
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x2e>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x34>
  be:	00 00       	nop
			_delay_ms(10);
		}
		if (!(BUTTONS & (1<<DIR_BUTTON))) {
  c0:	81 99       	sbic	0x10, 1	; 16
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <main+0x48>
				dir ^= 1; // toggle, przelaczanie stanu na przeciwny
  c4:	df 25       	eor	r29, r15
  c6:	ef e3       	ldi	r30, 0x3F	; 63
  c8:	fc e9       	ldi	r31, 0x9C	; 156
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x40>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x46>
  d0:	00 00       	nop
				_delay_ms(10);
			}
		if (!(BUTTONS & (1<<FASTER_BUTTON))) {
  d2:	82 99       	sbic	0x10, 2	; 16
  d4:	0b c0       	rjmp	.+22     	; 0xec <main+0x62>
				if (my_delay > 3) my_delay--;
  d6:	04 30       	cpi	r16, 0x04	; 4
  d8:	11 05       	cpc	r17, r1
  da:	10 f0       	brcs	.+4      	; 0xe0 <main+0x56>
  dc:	01 50       	subi	r16, 0x01	; 1
  de:	11 09       	sbc	r17, r1
  e0:	ef e3       	ldi	r30, 0x3F	; 63
  e2:	fc e9       	ldi	r31, 0x9C	; 156
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x5a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x60>
  ea:	00 00       	nop
				_delay_ms(10);
			}
		if (!(BUTTONS & (1<<SLOWER_BUTTON))) {
  ec:	83 99       	sbic	0x10, 3	; 16
  ee:	0b c0       	rjmp	.+22     	; 0x106 <main+0x7c>
				if (my_delay < 51) my_delay++;
  f0:	03 33       	cpi	r16, 0x33	; 51
  f2:	11 05       	cpc	r17, r1
  f4:	10 f4       	brcc	.+4      	; 0xfa <main+0x70>
  f6:	0f 5f       	subi	r16, 0xFF	; 255
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
  fa:	ef e3       	ldi	r30, 0x3F	; 63
  fc:	fc e9       	ldi	r31, 0x9C	; 156
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x74>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x7a>
 104:	00 00       	nop
				_delay_ms(10);
			}
			
		if (on) {
 106:	88 23       	and	r24, r24
 108:	91 f0       	breq	.+36     	; 0x12e <main+0xa4>
			MOTOR = (1<<stan);
 10a:	c6 01       	movw	r24, r12
 10c:	0c 2e       	mov	r0, r28
 10e:	01 c0       	rjmp	.+2      	; 0x112 <main+0x88>
 110:	88 0f       	add	r24, r24
 112:	0a 94       	dec	r0
 114:	ea f7       	brpl	.-6      	; 0x110 <main+0x86>
 116:	85 bb       	out	0x15, r24	; 21
			if (dir) {
 118:	dd 23       	and	r29, r29
 11a:	11 f0       	breq	.+4      	; 0x120 <main+0x96>
				stan++;
 11c:	cf 5f       	subi	r28, 0xFF	; 255
 11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x98>
			} else {
				stan--;
 120:	c1 50       	subi	r28, 0x01	; 1
			}
			stan %= 4;
 122:	c3 70       	andi	r28, 0x03	; 3
			longdelay(my_delay);
 124:	c8 01       	movw	r24, r16
 126:	0e 94 36 00 	call	0x6c	; 0x6c <longdelay>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	c0 cf       	rjmp	.-128    	; 0xae <main+0x24>
		} else {
			MOTOR = 0;
 12e:	15 ba       	out	0x15, r1	; 21
 130:	be cf       	rjmp	.-132    	; 0xae <main+0x24>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
