   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB6:
  15               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include "longdelay.h"
   3:main.c        **** 
   4:main.c        **** #define MOTOR PORTC
   5:main.c        **** #define MOTOR_DIR DDRC
   6:main.c        **** 
   7:main.c        **** #define BUTTONS PIND
   8:main.c        **** #define BUTTONS_DIR DDRD
   9:main.c        **** #define ON_BUTTON PD0
  10:main.c        **** #define DIR_BUTTON PD1
  11:main.c        **** #define FASTER_BUTTON PD2
  12:main.c        **** #define SLOWER_BUTTON PD3
  13:main.c        **** 
  14:main.c        **** #define BUTTONS_PULLUP PORTD
  15:main.c        **** 
  16:main.c        **** int main(void){
  16               		.loc 1 16 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  17:main.c        **** 	MOTOR_DIR |= 0x0f;
  22               		.loc 1 17 0
  23 0000 84B3      		in r24,0x14
  24 0002 8F60      		ori r24,lo8(15)
  25 0004 84BB      		out 0x14,r24
  18:main.c        **** 	BUTTONS_DIR &= ~(0x0f);
  26               		.loc 1 18 0
  27 0006 81B3      		in r24,0x11
  28 0008 807F      		andi r24,lo8(-16)
  29 000a 81BB      		out 0x11,r24
  19:main.c        **** 	BUTTONS_PULLUP = 0x0f;
  30               		.loc 1 19 0
  31 000c 8FE0      		ldi r24,lo8(15)
  32 000e 82BB      		out 0x12,r24
  33               	.LVL0:
  20:main.c        **** 	
  21:main.c        **** 	uint8_t stan = 0;
  22:main.c        **** 	uint8_t on = 0;
  23:main.c        **** 	uint8_t dir = 0;
  24:main.c        **** 	uint8_t faster = 0;
  25:main.c        **** 	uint8_t slower = 0;
  26:main.c        **** 	uint16_t my_delay = 5;
  34               		.loc 1 26 0
  35 0010 05E0      		ldi r16,lo8(5)
  36 0012 10E0      		ldi r17,0
  23:main.c        **** 	uint8_t faster = 0;
  37               		.loc 1 23 0
  38 0014 D0E0      		ldi r29,0
  22:main.c        **** 	uint8_t dir = 0;
  39               		.loc 1 22 0
  40 0016 80E0      		ldi r24,0
  21:main.c        **** 	uint8_t on = 0;
  41               		.loc 1 21 0
  42 0018 C0E0      		ldi r28,0
  27:main.c        **** 	
  28:main.c        **** 	while(1){
  29:main.c        **** 		if (!(BUTTONS & (1<<ON_BUTTON))) {
  30:main.c        **** 			on ^= 1; // toggle, przelaczanie stanu na przeciwny
  43               		.loc 1 30 0
  44 001a FF24      		clr r15
  45 001c F394      		inc r15
  31:main.c        **** 			_delay_ms(10);
  32:main.c        **** 		}
  33:main.c        **** 		if (!(BUTTONS & (1<<DIR_BUTTON))) {
  34:main.c        **** 				dir ^= 1; // toggle, przelaczanie stanu na przeciwny
  35:main.c        **** 				_delay_ms(10);
  36:main.c        **** 			}
  37:main.c        **** 		if (!(BUTTONS & (1<<FASTER_BUTTON))) {
  38:main.c        **** 				if (my_delay > 3) my_delay--;
  39:main.c        **** 				_delay_ms(10);
  40:main.c        **** 			}
  41:main.c        **** 		if (!(BUTTONS & (1<<SLOWER_BUTTON))) {
  42:main.c        **** 				if (my_delay < 51) my_delay++;
  43:main.c        **** 				_delay_ms(10);
  44:main.c        **** 			}
  45:main.c        **** 			
  46:main.c        **** 		if (on) {
  47:main.c        **** 			MOTOR = (1<<stan);
  46               		.loc 1 47 0
  47 001e CC24      		clr r12
  48 0020 C394      		inc r12
  49 0022 D12C      		mov r13,__zero_reg__
  50               	.LVL1:
  51               	.L2:
  29:main.c        **** 			on ^= 1; // toggle, przelaczanie stanu na przeciwny
  52               		.loc 1 29 0
  53 0024 8099      		sbic 0x10,0
  54 0026 00C0      		rjmp .L3
  30:main.c        **** 			_delay_ms(10);
  55               		.loc 1 30 0
  56 0028 8F25      		eor r24,r15
  57               	.LVL2:
  58               	.LBB10:
  59               	.LBB11:
  60               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  61               		.loc 2 187 0
  62 002a EFE3      		ldi r30,lo8(-25537)
  63 002c FCE9      		ldi r31,hi8(-25537)
  64 002e 3197      	1:	sbiw r30,1
  65 0030 01F4      		brne 1b
  66 0032 00C0      		rjmp .
  67 0034 0000      		nop
  68               	.LVL3:
  69               	.L3:
  70               	.LBE11:
  71               	.LBE10:
  33:main.c        **** 				dir ^= 1; // toggle, przelaczanie stanu na przeciwny
  72               		.loc 1 33 0
  73 0036 8199      		sbic 0x10,1
  74 0038 00C0      		rjmp .L4
  34:main.c        **** 				_delay_ms(10);
  75               		.loc 1 34 0
  76 003a DF25      		eor r29,r15
  77               	.LVL4:
  78               	.LBB12:
  79               	.LBB13:
  80               		.loc 2 187 0
  81 003c EFE3      		ldi r30,lo8(-25537)
  82 003e FCE9      		ldi r31,hi8(-25537)
  83 0040 3197      	1:	sbiw r30,1
  84 0042 01F4      		brne 1b
  85 0044 00C0      		rjmp .
  86 0046 0000      		nop
  87               	.LVL5:
  88               	.L4:
  89               	.LBE13:
  90               	.LBE12:
  37:main.c        **** 				if (my_delay > 3) my_delay--;
  91               		.loc 1 37 0
  92 0048 8299      		sbic 0x10,2
  93 004a 00C0      		rjmp .L5
  38:main.c        **** 				_delay_ms(10);
  94               		.loc 1 38 0
  95 004c 0430      		cpi r16,4
  96 004e 1105      		cpc r17,__zero_reg__
  97 0050 00F0      		brlo .L6
  38:main.c        **** 				_delay_ms(10);
  98               		.loc 1 38 0 is_stmt 0 discriminator 1
  99 0052 0150      		subi r16,1
 100 0054 1109      		sbc r17,__zero_reg__
 101               	.LVL6:
 102               	.L6:
 103               	.LBB14:
 104               	.LBB15:
 105               		.loc 2 187 0 is_stmt 1
 106 0056 EFE3      		ldi r30,lo8(-25537)
 107 0058 FCE9      		ldi r31,hi8(-25537)
 108 005a 3197      	1:	sbiw r30,1
 109 005c 01F4      		brne 1b
 110 005e 00C0      		rjmp .
 111 0060 0000      		nop
 112               	.LVL7:
 113               	.L5:
 114               	.LBE15:
 115               	.LBE14:
  41:main.c        **** 				if (my_delay < 51) my_delay++;
 116               		.loc 1 41 0
 117 0062 8399      		sbic 0x10,3
 118 0064 00C0      		rjmp .L7
  42:main.c        **** 				_delay_ms(10);
 119               		.loc 1 42 0
 120 0066 0333      		cpi r16,51
 121 0068 1105      		cpc r17,__zero_reg__
 122 006a 00F4      		brsh .L8
  42:main.c        **** 				_delay_ms(10);
 123               		.loc 1 42 0 is_stmt 0 discriminator 1
 124 006c 0F5F      		subi r16,-1
 125 006e 1F4F      		sbci r17,-1
 126               	.LVL8:
 127               	.L8:
 128               	.LBB16:
 129               	.LBB17:
 130               		.loc 2 187 0 is_stmt 1
 131 0070 EFE3      		ldi r30,lo8(-25537)
 132 0072 FCE9      		ldi r31,hi8(-25537)
 133 0074 3197      	1:	sbiw r30,1
 134 0076 01F4      		brne 1b
 135 0078 00C0      		rjmp .
 136 007a 0000      		nop
 137               	.LVL9:
 138               	.L7:
 139               	.LBE17:
 140               	.LBE16:
  46:main.c        **** 			MOTOR = (1<<stan);
 141               		.loc 1 46 0
 142 007c 8823      		tst r24
 143 007e 01F0      		breq .L9
 144               		.loc 1 47 0
 145 0080 C601      		movw r24,r12
 146               	.LVL10:
 147 0082 0C2E      		mov r0,r28
 148 0084 00C0      		rjmp 2f
 149               		1:
 150 0086 880F      		lsl r24
 151               		2:
 152 0088 0A94      		dec r0
 153 008a 02F4      		brpl 1b
 154 008c 85BB      		out 0x15,r24
  48:main.c        **** 			if (dir) {
 155               		.loc 1 48 0
 156 008e DD23      		tst r29
 157 0090 01F0      		breq .L10
  49:main.c        **** 				stan++;
 158               		.loc 1 49 0
 159 0092 CF5F      		subi r28,lo8(-(1))
 160               	.LVL11:
 161 0094 00C0      		rjmp .L11
 162               	.L10:
  50:main.c        **** 			} else {
  51:main.c        **** 				stan--;
 163               		.loc 1 51 0
 164 0096 C150      		subi r28,lo8(-(-1))
 165               	.LVL12:
 166               	.L11:
  52:main.c        **** 			}
  53:main.c        **** 			stan %= 4;
 167               		.loc 1 53 0
 168 0098 C370      		andi r28,lo8(3)
 169               	.LVL13:
  54:main.c        **** 			longdelay(my_delay);
 170               		.loc 1 54 0
 171 009a C801      		movw r24,r16
 172 009c 0E94 0000 		call longdelay
 173               	.LVL14:
 174 00a0 81E0      		ldi r24,lo8(1)
 175 00a2 00C0      		rjmp .L2
 176               	.LVL15:
 177               	.L9:
  55:main.c        **** 		} else {
  56:main.c        **** 			MOTOR = 0;
 178               		.loc 1 56 0
 179 00a4 15BA      		out 0x15,__zero_reg__
 180 00a6 00C0      		rjmp .L2
 181               		.cfi_endproc
 182               	.LFE6:
 184               		.text
 185               	.Letext0:
 186               		.file 3 "/usr/lib/avr/include/stdint.h"
 187               		.file 4 "longdelay.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cctBg3gx.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctBg3gx.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctBg3gx.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctBg3gx.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctBg3gx.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctBg3gx.s:13     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
longdelay
