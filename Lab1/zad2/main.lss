
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b4  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bd  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f7  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000167  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006a  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <longdelay>:
#include "longdelay.h"

void longdelay(uint16_t n) {
	for (uint16_t i = 0; i < n; i++) {
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	28 17       	cp	r18, r24
  72:	39 07       	cpc	r19, r25
  74:	49 f0       	breq	.+18     	; 0x88 <longdelay+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	ef e9       	ldi	r30, 0x9F	; 159
  78:	ff e0       	ldi	r31, 0x0F	; 15
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <longdelay+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <longdelay+0x14>
  80:	00 00       	nop
  82:	2f 5f       	subi	r18, 0xFF	; 255
  84:	3f 4f       	sbci	r19, 0xFF	; 255
  86:	f4 cf       	rjmp	.-24     	; 0x70 <longdelay+0x4>
		_delay_ms(1);
	}
}
  88:	08 95       	ret

0000008a <main>:
#define LEDDIR DDRC
#define LEDPORT PORTC


int main(void){
	LEDDIR = (1<<LED)|(1<<BLINK_LED);
  8a:	80 ec       	ldi	r24, 0xC0	; 192
  8c:	84 bb       	out	0x14, r24	; 20
	LEDPORT = (1<<LED)|(1<<BLINK_LED);
  8e:	85 bb       	out	0x15, r24	; 21
	
	BUTTONDIR &=~(1<<BUTTON);
  90:	88 98       	cbi	0x11, 0	; 17
	BUTTONPULLUP |= (1<<BUTTON);
  92:	90 9a       	sbi	0x12, 0	; 18
			LEDPORT|=(1<<LED); //zgas diode led
		}

	
	
	LEDPORT ^= (1<<BLINK_LED);
  94:	c0 e4       	ldi	r28, 0x40	; 64
	LEDPORT = (1<<LED)|(1<<BLINK_LED);
	
	BUTTONDIR &=~(1<<BUTTON);
	BUTTONPULLUP |= (1<<BUTTON);
	while(1){
		if (!(BUTTONPIN & (1<<BUTTON))) {
  96:	80 99       	sbic	0x10, 0	; 16
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x14>
			LEDPORT&=~(1<<LED);  //zapal diode led
  9a:	af 98       	cbi	0x15, 7	; 21
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <main+0x16>
		} else {
			LEDPORT|=(1<<LED); //zgas diode led
  9e:	af 9a       	sbi	0x15, 7	; 21
		}

	
	
	LEDPORT ^= (1<<BLINK_LED);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	8c 27       	eor	r24, r28
  a4:	85 bb       	out	0x15, r24	; 21
	longdelay(500);
  a6:	84 ef       	ldi	r24, 0xF4	; 244
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <longdelay>
}
  ae:	f3 cf       	rjmp	.-26     	; 0x96 <main+0xc>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
