   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcd_write_instr
  12               	lcd_write_instr:
  13               	.LFB10:
  14               		.file 1 "lcd.c"
   1:lcd.c         **** #include <avr/io.h>
   2:lcd.c         **** #include <util/delay.h>
   3:lcd.c         **** #include "lcd.h"
   4:lcd.c         **** 
   5:lcd.c         **** //rzeczy do printfa
   6:lcd.c         **** static int lcd_print(char c, FILE *stream);
   7:lcd.c         **** 
   8:lcd.c         **** static FILE mystdout= FDEV_SETUP_STREAM(lcd_print, NULL, _FDEV_SETUP_WRITE);
   9:lcd.c         **** 
  10:lcd.c         **** static int lcd_print(char c, FILE *stream)
  11:lcd.c         **** {
  12:lcd.c         **** 	lcd_write_data(c);
  13:lcd.c         **** 	return 0;
  14:lcd.c         **** }
  15:lcd.c         **** 
  16:lcd.c         **** void lcdinit(void)
  17:lcd.c         **** {
  18:lcd.c         **** 	LCD_PORT_DIR=0xff; //ustawiamy linie portu wyswietlacza na wyjsciowy
  19:lcd.c         **** 	LCD_PORT=0x00; //ustawiamy stan niski na liniach portu wyswietlacza
  20:lcd.c         **** 	_delay_ms(50); //czekamy 50 ms 
  21:lcd.c         **** 	
  22:lcd.c         **** 	stdout=&mystdout;//przypisanie strumienia WEJSCIOWEGO  do zmiennej
  23:lcd.c         **** 	
  24:lcd.c         **** 	LCD_PORT &=~(1<<LCD_RS);//wybieramy rejestr instrukcji IR wpisanie zera na rejestr RS
  25:lcd.c         **** 	
  26:lcd.c         **** 	for(uint8_t i=0; i<3; i++)
  27:lcd.c         **** 	{
  28:lcd.c         **** 		LCD_PORT|= 1<<LCD_E;
  29:lcd.c         **** 		LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
  30:lcd.c         **** 		_delay_us(1);
  31:lcd.c         **** 		LCD_PORT &= ~(1<<LCD_E);
  32:lcd.c         **** 		_delay_ms(5);
  33:lcd.c         **** 		
  34:lcd.c         **** 	}
  35:lcd.c         **** 	
  36:lcd.c         **** 	LCD_PORT|= 1<<LCD_E;
  37:lcd.c         **** 	LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
  38:lcd.c         **** 		_delay_us(1);
  39:lcd.c         **** 		LCD_PORT &= ~(1<<LCD_E);
  40:lcd.c         **** 		_delay_us(100);
  41:lcd.c         **** 	
  42:lcd.c         **** 	lcd_write_instr(0x28); //ustawienie dwojki 
  43:lcd.c         **** 	
  44:lcd.c         **** 	lcd_write_instr(0x0c); //włacz lcd i wylacz wyswietlanie kursora
  45:lcd.c         **** 	
  46:lcd.c         **** 	lcd_write_instr(0x06);//włacz pisanie od lewej do prawej i inkrementacja adresu pamieci
  47:lcd.c         **** 	lcd_clear(); //zerowanie wyswietlacza	
  48:lcd.c         **** 	
  49:lcd.c         **** }
  50:lcd.c         **** 	
  51:lcd.c         **** void lcd_write_instr(uint8_t data)
  52:lcd.c         **** {
  15               		.loc 1 52 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  53:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_RS); //wybieramy rejestr
  22               		.loc 1 53 0
  23 0000 DA98      		cbi 0x1b,2
  54:lcd.c         **** 	LCD_PORT |= 1<<LCD_E;
  24               		.loc 1 54 0
  25 0002 DB9A      		sbi 0x1b,3
  55:lcd.c         **** 	LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
  26               		.loc 1 55 0
  27 0004 9BB3      		in r25,0x1b
  28 0006 9F70      		andi r25,lo8(15)
  29 0008 282F      		mov r18,r24
  30 000a 207F      		andi r18,lo8(-16)
  31 000c 922B      		or r25,r18
  32 000e 9BBB      		out 0x1b,r25
  33               	.LVL1:
  34               	.LBB31:
  35               	.LBB32:
  36               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/lib/avr/include/util/delay.h **** 
 189:/usr/lib/avr/include/util/delay.h **** #else
 190:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/lib/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/lib/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/lib/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/lib/avr/include/util/delay.h **** 	{
 196:/usr/lib/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/lib/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/lib/avr/include/util/delay.h **** 		{
 200:/usr/lib/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/lib/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/lib/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/lib/avr/include/util/delay.h **** 		}
 204:/usr/lib/avr/include/util/delay.h **** 		return;
 205:/usr/lib/avr/include/util/delay.h **** 	}
 206:/usr/lib/avr/include/util/delay.h **** 	else
 207:/usr/lib/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/lib/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/lib/avr/include/util/delay.h **** #endif
 210:/usr/lib/avr/include/util/delay.h **** }
 211:/usr/lib/avr/include/util/delay.h **** 
 212:/usr/lib/avr/include/util/delay.h **** /**
 213:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/lib/avr/include/util/delay.h **** 
 215:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/lib/avr/include/util/delay.h **** 
 217:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/lib/avr/include/util/delay.h **** 
 220:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/lib/avr/include/util/delay.h **** 
 222:/usr/lib/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/lib/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/lib/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/lib/avr/include/util/delay.h **** 
 226:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/lib/avr/include/util/delay.h **** 
 231:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/lib/avr/include/util/delay.h **** 
 236:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/lib/avr/include/util/delay.h ****    respectively.
 240:/usr/lib/avr/include/util/delay.h **** 
 241:/usr/lib/avr/include/util/delay.h ****    \note
 242:/usr/lib/avr/include/util/delay.h **** 
 243:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/lib/avr/include/util/delay.h **** 
 253:/usr/lib/avr/include/util/delay.h ****  */
 254:/usr/lib/avr/include/util/delay.h **** void
 255:/usr/lib/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/lib/avr/include/util/delay.h **** {
 257:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/lib/avr/include/util/delay.h **** 
 265:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/lib/avr/include/util/delay.h **** 
 268:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/lib/avr/include/util/delay.h **** 
 271:/usr/lib/avr/include/util/delay.h **** 	#else
 272:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 273:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/lib/avr/include/util/delay.h **** 	#endif
 275:/usr/lib/avr/include/util/delay.h **** 
 276:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  37               		.loc 2 276 0
  38 0010 35E0      		ldi r19,lo8(5)
  39 0012 3A95      	1:	dec r19
  40 0014 01F4      		brne 1b
  41 0016 0000      		nop
  42               	.LVL2:
  43               	.LBE32:
  44               	.LBE31:
  56:lcd.c         **** 	_delay_us(1);
  57:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
  45               		.loc 1 57 0
  46 0018 DB98      		cbi 0x1b,3
  47               	.LVL3:
  48               	.LBB33:
  49               	.LBB34:
  50               		.loc 2 276 0
  51 001a EFE8      		ldi r30,lo8(399)
  52 001c F1E0      		ldi r31,hi8(399)
  53 001e 3197      	1:	sbiw r30,1
  54 0020 01F4      		brne 1b
  55 0022 00C0      		rjmp .
  56 0024 0000      		nop
  57               	.LVL4:
  58               	.LBE34:
  59               	.LBE33:
  58:lcd.c         **** 	_delay_us(100);
  59:lcd.c         **** 	LCD_PORT |= 1<<LCD_E;
  60               		.loc 1 59 0
  61 0026 DB9A      		sbi 0x1b,3
  60:lcd.c         **** 	LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
  62               		.loc 1 60 0
  63 0028 2BB3      		in r18,0x1b
  64 002a 2F70      		andi r18,lo8(15)
  65 002c F0E1      		ldi r31,lo8(16)
  66 002e 8F9F      		mul r24,r31
  67 0030 C001      		movw r24,r0
  68 0032 1124      		clr __zero_reg__
  69               	.LVL5:
  70 0034 822B      		or r24,r18
  71 0036 8BBB      		out 0x1b,r24
  72               	.LVL6:
  73               	.LBB35:
  74               	.LBB36:
  75               		.loc 2 276 0
  76 0038 35E0      		ldi r19,lo8(5)
  77 003a 3A95      	1:	dec r19
  78 003c 01F4      		brne 1b
  79 003e 0000      		nop
  80               	.LVL7:
  81               	.LBE36:
  82               	.LBE35:
  61:lcd.c         **** 	_delay_us(1);
  62:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
  83               		.loc 1 62 0
  84 0040 DB98      		cbi 0x1b,3
  85               	.LVL8:
  86               	.LBB37:
  87               	.LBB38:
  88               		.loc 2 276 0
  89 0042 8FE8      		ldi r24,lo8(399)
  90 0044 91E0      		ldi r25,hi8(399)
  91 0046 0197      	1:	sbiw r24,1
  92 0048 01F4      		brne 1b
  93 004a 00C0      		rjmp .
  94 004c 0000      		nop
  95               	.LVL9:
  96 004e 0895      		ret
  97               	.LBE38:
  98               	.LBE37:
  99               		.cfi_endproc
 100               	.LFE10:
 102               	.global	lcd_clear
 104               	lcd_clear:
 105               	.LFB11:
  63:lcd.c         **** 	_delay_us(100);	
  64:lcd.c         **** }
  65:lcd.c         **** 	
  66:lcd.c         **** 
  67:lcd.c         **** 	void lcd_clear(void)
  68:lcd.c         **** 	{
 106               		.loc 1 68 0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
  69:lcd.c         **** 		lcd_write_instr(0x01);
 112               		.loc 1 69 0
 113 0050 81E0      		ldi r24,lo8(1)
 114 0052 0E94 0000 		call lcd_write_instr
 115               	.LVL10:
 116               	.LBB39:
 117               	.LBB40:
 187:/usr/lib/avr/include/util/delay.h **** 
 118               		.loc 2 187 0
 119 0056 8FE1      		ldi r24,lo8(19999)
 120 0058 9EE4      		ldi r25,hi8(19999)
 121 005a 0197      	1:	sbiw r24,1
 122 005c 01F4      		brne 1b
 123 005e 00C0      		rjmp .
 124 0060 0000      		nop
 125               	.LVL11:
 126 0062 0895      		ret
 127               	.LBE40:
 128               	.LBE39:
 129               		.cfi_endproc
 130               	.LFE11:
 132               	.global	lcdinit
 134               	lcdinit:
 135               	.LFB9:
  17:lcd.c         **** 	LCD_PORT_DIR=0xff; //ustawiamy linie portu wyswietlacza na wyjsciowy
 136               		.loc 1 17 0
 137               		.cfi_startproc
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
  18:lcd.c         **** 	LCD_PORT=0x00; //ustawiamy stan niski na liniach portu wyswietlacza
 142               		.loc 1 18 0
 143 0064 8FEF      		ldi r24,lo8(-1)
 144 0066 8ABB      		out 0x1a,r24
  19:lcd.c         **** 	_delay_ms(50); //czekamy 50 ms 
 145               		.loc 1 19 0
 146 0068 1BBA      		out 0x1b,__zero_reg__
 147               	.LVL12:
 148               	.LBB41:
 149               	.LBB42:
 187:/usr/lib/avr/include/util/delay.h **** 
 150               		.loc 2 187 0
 151 006a 2FEF      		ldi r18,lo8(159999)
 152 006c 80E7      		ldi r24,hi8(159999)
 153 006e 92E0      		ldi r25,hlo8(159999)
 154 0070 2150      	1:	subi r18,1
 155 0072 8040      		sbci r24,0
 156 0074 9040      		sbci r25,0
 157 0076 01F4      		brne 1b
 158 0078 00C0      		rjmp .
 159 007a 0000      		nop
 160               	.LVL13:
 161               	.LBE42:
 162               	.LBE41:
  22:lcd.c         **** 	
 163               		.loc 1 22 0
 164 007c 80E0      		ldi r24,lo8(mystdout)
 165 007e 90E0      		ldi r25,hi8(mystdout)
 166 0080 9093 0000 		sts __iob+2+1,r25
 167 0084 8093 0000 		sts __iob+2,r24
  24:lcd.c         **** 	
 168               		.loc 1 24 0
 169 0088 DA98      		cbi 0x1b,2
 170               	.LVL14:
 171 008a 93E0      		ldi r25,lo8(3)
 172               	.LVL15:
 173               	.L4:
 174               	.LBB43:
  28:lcd.c         **** 		LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 175               		.loc 1 28 0 discriminator 3
 176 008c DB9A      		sbi 0x1b,3
  29:lcd.c         **** 		_delay_us(1);
 177               		.loc 1 29 0 discriminator 3
 178 008e 8BB3      		in r24,0x1b
 179 0090 8F70      		andi r24,lo8(15)
 180 0092 8063      		ori r24,lo8(48)
 181 0094 8BBB      		out 0x1b,r24
 182               	.LVL16:
 183               	.LBB44:
 184               	.LBB45:
 185               		.loc 2 276 0 discriminator 3
 186 0096 E5E0      		ldi r30,lo8(5)
 187 0098 EA95      	1:	dec r30
 188 009a 01F4      		brne 1b
 189 009c 0000      		nop
 190               	.LVL17:
 191               	.LBE45:
 192               	.LBE44:
  31:lcd.c         **** 		_delay_ms(5);
 193               		.loc 1 31 0 discriminator 3
 194 009e DB98      		cbi 0x1b,3
 195               	.LVL18:
 196               	.LBB46:
 197               	.LBB47:
 187:/usr/lib/avr/include/util/delay.h **** 
 198               		.loc 2 187 0 discriminator 3
 199 00a0 EFE1      		ldi r30,lo8(19999)
 200 00a2 FEE4      		ldi r31,hi8(19999)
 201 00a4 3197      	1:	sbiw r30,1
 202 00a6 01F4      		brne 1b
 203 00a8 00C0      		rjmp .
 204 00aa 0000      		nop
 205               	.LVL19:
 206 00ac 9150      		subi r25,lo8(-(-1))
 207               	.LVL20:
 208               	.LBE47:
 209               	.LBE46:
  26:lcd.c         **** 	{
 210               		.loc 1 26 0 discriminator 3
 211 00ae 01F4      		brne .L4
 212               	.LBE43:
  36:lcd.c         **** 	LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 213               		.loc 1 36 0
 214 00b0 DB9A      		sbi 0x1b,3
  37:lcd.c         **** 		_delay_us(1);
 215               		.loc 1 37 0
 216 00b2 8BB3      		in r24,0x1b
 217 00b4 8F70      		andi r24,lo8(15)
 218 00b6 8062      		ori r24,lo8(32)
 219 00b8 8BBB      		out 0x1b,r24
 220               	.LVL21:
 221               	.LBB48:
 222               	.LBB49:
 223               		.loc 2 276 0
 224 00ba F5E0      		ldi r31,lo8(5)
 225 00bc FA95      	1:	dec r31
 226 00be 01F4      		brne 1b
 227 00c0 0000      		nop
 228               	.LVL22:
 229               	.LBE49:
 230               	.LBE48:
  39:lcd.c         **** 		_delay_us(100);
 231               		.loc 1 39 0
 232 00c2 DB98      		cbi 0x1b,3
 233               	.LVL23:
 234               	.LBB50:
 235               	.LBB51:
 236               		.loc 2 276 0
 237 00c4 8FE8      		ldi r24,lo8(399)
 238 00c6 91E0      		ldi r25,hi8(399)
 239 00c8 0197      	1:	sbiw r24,1
 240 00ca 01F4      		brne 1b
 241 00cc 00C0      		rjmp .
 242 00ce 0000      		nop
 243               	.LVL24:
 244               	.LBE51:
 245               	.LBE50:
  42:lcd.c         **** 	
 246               		.loc 1 42 0
 247 00d0 88E2      		ldi r24,lo8(40)
 248 00d2 0E94 0000 		call lcd_write_instr
 249               	.LVL25:
  44:lcd.c         **** 	
 250               		.loc 1 44 0
 251 00d6 8CE0      		ldi r24,lo8(12)
 252 00d8 0E94 0000 		call lcd_write_instr
 253               	.LVL26:
  46:lcd.c         **** 	lcd_clear(); //zerowanie wyswietlacza	
 254               		.loc 1 46 0
 255 00dc 86E0      		ldi r24,lo8(6)
 256 00de 0E94 0000 		call lcd_write_instr
 257               	.LVL27:
  47:lcd.c         **** 	
 258               		.loc 1 47 0
 259 00e2 0C94 0000 		jmp lcd_clear
 260               	.LVL28:
 261               		.cfi_endproc
 262               	.LFE9:
 264               	.global	lcd_write_data
 266               	lcd_write_data:
 267               	.LFB12:
  70:lcd.c         **** 		_delay_ms(5);
  71:lcd.c         **** 	}
  72:lcd.c         **** 	
  73:lcd.c         **** 
  74:lcd.c         **** void lcd_write_data(uint8_t data)
  75:lcd.c         **** {
 268               		.loc 1 75 0
 269               		.cfi_startproc
 270               	.LVL29:
 271               	/* prologue: function */
 272               	/* frame size = 0 */
 273               	/* stack size = 0 */
 274               	.L__stack_usage = 0
  76:lcd.c         **** 	LCD_PORT |= (1<<LCD_RS); //wybieramy rejestr
 275               		.loc 1 76 0
 276 00e6 DA9A      		sbi 0x1b,2
  77:lcd.c         **** 	LCD_PORT |= 1<<LCD_E;
 277               		.loc 1 77 0
 278 00e8 DB9A      		sbi 0x1b,3
  78:lcd.c         **** 	LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
 279               		.loc 1 78 0
 280 00ea 9BB3      		in r25,0x1b
 281 00ec 9F70      		andi r25,lo8(15)
 282 00ee 282F      		mov r18,r24
 283 00f0 207F      		andi r18,lo8(-16)
 284 00f2 922B      		or r25,r18
 285 00f4 9BBB      		out 0x1b,r25
 286               	.LVL30:
 287               	.LBB52:
 288               	.LBB53:
 289               		.loc 2 276 0
 290 00f6 35E0      		ldi r19,lo8(5)
 291 00f8 3A95      	1:	dec r19
 292 00fa 01F4      		brne 1b
 293 00fc 0000      		nop
 294               	.LVL31:
 295               	.LBE53:
 296               	.LBE52:
  79:lcd.c         **** 	_delay_us(1);
  80:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
 297               		.loc 1 80 0
 298 00fe DB98      		cbi 0x1b,3
 299               	.LVL32:
 300               	.LBB54:
 301               	.LBB55:
 302               		.loc 2 276 0
 303 0100 EFE8      		ldi r30,lo8(399)
 304 0102 F1E0      		ldi r31,hi8(399)
 305 0104 3197      	1:	sbiw r30,1
 306 0106 01F4      		brne 1b
 307 0108 00C0      		rjmp .
 308 010a 0000      		nop
 309               	.LVL33:
 310               	.LBE55:
 311               	.LBE54:
  81:lcd.c         **** 	_delay_us(100);
  82:lcd.c         **** 	LCD_PORT |= 1<<LCD_E;
 312               		.loc 1 82 0
 313 010c DB9A      		sbi 0x1b,3
  83:lcd.c         **** 	LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
 314               		.loc 1 83 0
 315 010e 2BB3      		in r18,0x1b
 316 0110 2F70      		andi r18,lo8(15)
 317 0112 F0E1      		ldi r31,lo8(16)
 318 0114 8F9F      		mul r24,r31
 319 0116 C001      		movw r24,r0
 320 0118 1124      		clr __zero_reg__
 321               	.LVL34:
 322 011a 822B      		or r24,r18
 323 011c 8BBB      		out 0x1b,r24
 324               	.LVL35:
 325               	.LBB56:
 326               	.LBB57:
 327               		.loc 2 276 0
 328 011e 35E0      		ldi r19,lo8(5)
 329 0120 3A95      	1:	dec r19
 330 0122 01F4      		brne 1b
 331 0124 0000      		nop
 332               	.LVL36:
 333               	.LBE57:
 334               	.LBE56:
  84:lcd.c         **** 	_delay_us(1);
  85:lcd.c         **** 	LCD_PORT &= ~(1<<LCD_E);
 335               		.loc 1 85 0
 336 0126 DB98      		cbi 0x1b,3
 337               	.LVL37:
 338               	.LBB58:
 339               	.LBB59:
 340               		.loc 2 276 0
 341 0128 8FE8      		ldi r24,lo8(399)
 342 012a 91E0      		ldi r25,hi8(399)
 343 012c 0197      	1:	sbiw r24,1
 344 012e 01F4      		brne 1b
 345 0130 00C0      		rjmp .
 346 0132 0000      		nop
 347               	.LVL38:
 348 0134 0895      		ret
 349               	.LBE59:
 350               	.LBE58:
 351               		.cfi_endproc
 352               	.LFE12:
 355               	lcd_print:
 356               	.LFB8:
  11:lcd.c         **** 	lcd_write_data(c);
 357               		.loc 1 11 0
 358               		.cfi_startproc
 359               	.LVL39:
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 0 */
 363               	.L__stack_usage = 0
  12:lcd.c         **** 	return 0;
 364               		.loc 1 12 0
 365 0136 0E94 0000 		call lcd_write_data
 366               	.LVL40:
  14:lcd.c         **** 
 367               		.loc 1 14 0
 368 013a 80E0      		ldi r24,0
 369 013c 90E0      		ldi r25,0
 370 013e 0895      		ret
 371               		.cfi_endproc
 372               	.LFE8:
 374               	.global	lcd_set_xy
 376               	lcd_set_xy:
 377               	.LFB13:
  86:lcd.c         **** 	_delay_us(100);	
  87:lcd.c         **** }
  88:lcd.c         **** 
  89:lcd.c         **** void lcd_set_xy(uint8_t x, uint8_t y )
  90:lcd.c         **** {
 378               		.loc 1 90 0
 379               		.cfi_startproc
 380               	.LVL41:
 381               	/* prologue: function */
 382               	/* frame size = 0 */
 383               	/* stack size = 0 */
 384               	.L__stack_usage = 0
  91:lcd.c         **** 	lcd_write_instr(0x80 | (0x40 * y +x)); //instrukcja do ustawienia adresu pamieci wyswietlacza
 385               		.loc 1 91 0
 386 0140 90E4      		ldi r25,lo8(64)
 387 0142 699F      		mul r22,r25
 388 0144 800D      		add r24,r0
 389 0146 1124      		clr __zero_reg__
 390               	.LVL42:
 391 0148 8068      		ori r24,lo8(-128)
 392 014a 0C94 0000 		jmp lcd_write_instr
 393               	.LVL43:
 394               		.cfi_endproc
 395               	.LFE13:
 397               	.global	lcd_write_text_xy
 399               	lcd_write_text_xy:
 400               	.LFB14:
  92:lcd.c         **** 	//linia 1 jest od adresu 0x40
  93:lcd.c         **** 	//to mamy adres 0x40 * y +x
  94:lcd.c         **** }
  95:lcd.c         **** 
  96:lcd.c         **** void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
  97:lcd.c         **** {
 401               		.loc 1 97 0
 402               		.cfi_startproc
 403               	.LVL44:
 404 014e 0F93      		push r16
 405               	.LCFI0:
 406               		.cfi_def_cfa_offset 3
 407               		.cfi_offset 16, -2
 408 0150 1F93      		push r17
 409               	.LCFI1:
 410               		.cfi_def_cfa_offset 4
 411               		.cfi_offset 17, -3
 412 0152 CF93      		push r28
 413               	.LCFI2:
 414               		.cfi_def_cfa_offset 5
 415               		.cfi_offset 28, -4
 416 0154 DF93      		push r29
 417               	.LCFI3:
 418               		.cfi_def_cfa_offset 6
 419               		.cfi_offset 29, -5
 420               	/* prologue: function */
 421               	/* frame size = 0 */
 422               	/* stack size = 4 */
 423               	.L__stack_usage = 4
 424 0156 8A01      		movw r16,r20
  98:lcd.c         **** 	lcd_set_xy(x,y);
 425               		.loc 1 98 0
 426 0158 0E94 0000 		call lcd_set_xy
 427               	.LVL45:
 428 015c E801      		movw r28,r16
 429               	.LVL46:
 430               	.L11:
  99:lcd.c         **** 	while (*text!=0) //sprawdz czy znak rozny od zera jesli tak to 
 431               		.loc 1 99 0
 432 015e 8991      		ld r24,Y+
 433               	.LVL47:
 434 0160 8823      		tst r24
 435 0162 01F0      		breq .L13
 100:lcd.c         **** 	{
 101:lcd.c         **** 		lcd_write_data((uint8_t)*text); //znak wysłany na wyswietlacz
 436               		.loc 1 101 0
 437 0164 0E94 0000 		call lcd_write_data
 438               	.LVL48:
 439 0168 00C0      		rjmp .L11
 440               	.LVL49:
 441               	.L13:
 442               	/* epilogue start */
 102:lcd.c         **** 		text++; //na nastepny znak
 103:lcd.c         **** 	}
 104:lcd.c         **** }
 443               		.loc 1 104 0
 444 016a DF91      		pop r29
 445 016c CF91      		pop r28
 446               	.LVL50:
 447 016e 1F91      		pop r17
 448 0170 0F91      		pop r16
 449 0172 0895      		ret
 450               		.cfi_endproc
 451               	.LFE14:
 453               	.global	lcd_write_text_P
 455               	lcd_write_text_P:
 456               	.LFB15:
 105:lcd.c         **** 
 106:lcd.c         **** void lcd_write_text_P(const char *text)
 107:lcd.c         **** {
 457               		.loc 1 107 0
 458               		.cfi_startproc
 459               	.LVL51:
 460 0174 CF93      		push r28
 461               	.LCFI4:
 462               		.cfi_def_cfa_offset 3
 463               		.cfi_offset 28, -2
 464 0176 DF93      		push r29
 465               	.LCFI5:
 466               		.cfi_def_cfa_offset 4
 467               		.cfi_offset 29, -3
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 2 */
 471               	.L__stack_usage = 2
 472 0178 FC01      		movw r30,r24
 473               	.LVL52:
 474               	.L15:
 475               	.LBB60:
 108:lcd.c         **** 	register uint8_t ch; //sugestia wyjorztstywania wewnetrznego rejestru do przechowywania 
 109:lcd.c         **** 	while ((ch= pgm_read_byte(text++))) //odczyt 
 476               		.loc 1 109 0
 477               	/* #APP */
 478               	 ;  109 "lcd.c" 1
 479 017a 8491      		lpm r24, Z
 480               		
 481               	 ;  0 "" 2
 482               	.LVL53:
 483               	/* #NOAPP */
 484 017c EF01      		movw r28,r30
 485 017e 2196      		adiw r28,1
 486               	.LVL54:
 487               	.LBE60:
 488 0180 8823      		tst r24
 489 0182 01F0      		breq .L17
 110:lcd.c         **** 	{
 111:lcd.c         **** 		lcd_write_data(ch);
 490               		.loc 1 111 0
 491 0184 0E94 0000 		call lcd_write_data
 492               	.LVL55:
 493 0188 FE01      		movw r30,r28
 494 018a 00C0      		rjmp .L15
 495               	.LVL56:
 496               	.L17:
 497               	/* epilogue start */
 112:lcd.c         **** 	}
 113:lcd.c         **** }
 498               		.loc 1 113 0
 499 018c DF91      		pop r29
 500 018e CF91      		pop r28
 501               	.LVL57:
 502 0190 0895      		ret
 503               		.cfi_endproc
 504               	.LFE15:
 506               		.data
 509               	mystdout:
 510 0000 0000 00   		.zero	3
 511 0003 02        		.byte	2
 512 0004 0000 0000 		.zero	4
 513 0008 0000      		.word	gs(lcd_print)
 514 000a 0000      		.word	0
 515 000c 0000      		.word	0
 516               		.text
 517               	.Letext0:
 518               		.file 3 "/usr/lib/avr/include/stdint.h"
 519               		.file 4 "/usr/lib/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/cczYrtTy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cczYrtTy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cczYrtTy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cczYrtTy.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cczYrtTy.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cczYrtTy.s:12     .text:0000000000000000 lcd_write_instr
     /tmp/cczYrtTy.s:104    .text:0000000000000050 lcd_clear
     /tmp/cczYrtTy.s:134    .text:0000000000000064 lcdinit
     /tmp/cczYrtTy.s:509    .data:0000000000000000 mystdout
     /tmp/cczYrtTy.s:266    .text:00000000000000e6 lcd_write_data
     /tmp/cczYrtTy.s:355    .text:0000000000000136 lcd_print
     /tmp/cczYrtTy.s:376    .text:0000000000000140 lcd_set_xy
     /tmp/cczYrtTy.s:399    .text:000000000000014e lcd_write_text_xy
     /tmp/cczYrtTy.s:455    .text:0000000000000174 lcd_write_text_P

UNDEFINED SYMBOLS
__iob
__do_copy_data
