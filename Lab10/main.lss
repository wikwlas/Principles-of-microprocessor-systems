
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  00004ee2  00004f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000035c  008001da  008001da  000050f0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005104  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00005140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006785  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001397  00000000  00000000  0000b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000295b  00000000  00000000  0000cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001084  00000000  00000000  0000f6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b18  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007aa9  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00018ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
       4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
       8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
       c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      10:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__vector_4>
      14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      1c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_7>
      20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      34:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_13>
      38:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_14>
      3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      48:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      54:	6c 1e       	adc	r6, r28
      56:	6f 1e       	adc	r6, r31
      58:	8b 1f       	adc	r24, r27
      5a:	d0 1e       	adc	r13, r16
      5c:	8b 1f       	adc	r24, r27
      5e:	8b 1f       	adc	r24, r27
      60:	8b 1f       	adc	r24, r27
      62:	8b 1f       	adc	r24, r27
      64:	8b 1f       	adc	r24, r27
      66:	8b 1f       	adc	r24, r27
      68:	4c 1f       	adc	r20, r28
      6a:	51 1f       	adc	r21, r17
      6c:	56 1f       	adc	r21, r22
      6e:	61 1f       	adc	r22, r17
      70:	77 1f       	adc	r23, r23

00000072 <__trampolines_end>:
      72:	6e 61       	ori	r22, 0x1E	; 30
      74:	6e 00       	.word	0x006e	; ????

00000076 <__c.2332>:
      76:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      86:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      96:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      a6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      b6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      c6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      d6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      e6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      f6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     106:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     116:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     126:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     136:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     146:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     156:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     166:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000174 <__ctors_end>:
     174:	11 24       	eor	r1, r1
     176:	1f be       	out	0x3f, r1	; 63
     178:	cf e5       	ldi	r28, 0x5F	; 95
     17a:	d8 e0       	ldi	r29, 0x08	; 8
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	a0 e6       	ldi	r26, 0x60	; 96
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e2 ee       	ldi	r30, 0xE2	; 226
     188:	fe e4       	ldi	r31, 0x4E	; 78
     18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
     18c:	05 90       	lpm	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	aa 3d       	cpi	r26, 0xDA	; 218
     192:	b1 07       	cpc	r27, r17
     194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
     196:	25 e0       	ldi	r18, 0x05	; 5
     198:	aa ed       	ldi	r26, 0xDA	; 218
     19a:	b1 e0       	ldi	r27, 0x01	; 1
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
     19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
     1a0:	a6 33       	cpi	r26, 0x36	; 54
     1a2:	b2 07       	cpc	r27, r18
     1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
     1a6:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <main>
     1aa:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <_exit>

000001ae <__bad_interrupt>:
     1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <stop>:
	if (bytes!=slen) stop("Cannot write complete data");
	f_sync(&fil);
}

void stop(char *s)
{
     1b2:	ec 01       	movw	r28, r24
	lcd_clear();
     1b4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_clear>
	lcd_set_xy(0,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
	printf("STOP!");
     1c0:	89 e0       	ldi	r24, 0x09	; 9
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	9f 93       	push	r25
     1c6:	8f 93       	push	r24
     1c8:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
	lcd_set_xy(0,1);
     1cc:	61 e0       	ldi	r22, 0x01	; 1
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
	printf("%s",s);
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	8f e0       	ldi	r24, 0x0F	; 15
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	9f 93       	push	r25
     1de:	8f 93       	push	r24
     1e0:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <stop+0x3e>

000001f2 <__vector_7>:

char prefix[]="data";
char suffix[]=".txt";

ISR(TIMER1_COMPA_vect)
{
     1f2:	1f 92       	push	r1
     1f4:	0f 92       	push	r0
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	0f 92       	push	r0
     1fa:	11 24       	eor	r1, r1
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	2f 93       	push	r18
     202:	3f 93       	push	r19
     204:	4f 93       	push	r20
     206:	5f 93       	push	r21
     208:	6f 93       	push	r22
     20a:	7f 93       	push	r23
     20c:	8f 93       	push	r24
     20e:	9f 93       	push	r25
     210:	af 93       	push	r26
     212:	bf 93       	push	r27
     214:	ef 93       	push	r30
     216:	ff 93       	push	r31
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	00 d0       	rcall	.+0      	; 0x21e <__vector_7+0x2c>
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
	int16_t temperature;
	static uint32_t num=0;
	uint16_t bytes;
	uint16_t slen;
	
	DS18B20_start();
     222:	0e 94 c7 02 	call	0x58e	; 0x58e <DS18B20_start>
	while(!OW_check);
     226:	b3 9b       	sbis	0x16, 3	; 22
     228:	fe cf       	rjmp	.-4      	; 0x226 <__vector_7+0x34>
	temperature = DS18B20_read();
     22a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DS18B20_read>
	temp = ((double) temperature)*0.0625;
     22e:	bc 01       	movw	r22, r24
     230:	99 0f       	add	r25, r25
     232:	88 0b       	sbc	r24, r24
     234:	99 0b       	sbc	r25, r25
     236:	0e 94 36 24 	call	0x486c	; 0x486c <__floatsisf>
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e8       	ldi	r20, 0x80	; 128
     240:	5d e3       	ldi	r21, 0x3D	; 61
     242:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__mulsf3>
     246:	60 93 16 04 	sts	0x0416, r22	; 0x800416 <temp>
     24a:	70 93 17 04 	sts	0x0417, r23	; 0x800417 <temp+0x1>
     24e:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <temp+0x2>
     252:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <temp+0x3>
	
	lcd_set_xy(0,0);
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
	printf("T=%5.1f \337C", temp);
     25e:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <temp>
     262:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <temp+0x1>
     266:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <temp+0x2>
     26a:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <temp+0x3>
     26e:	bf 93       	push	r27
     270:	af 93       	push	r26
     272:	9f 93       	push	r25
     274:	8f 93       	push	r24
     276:	82 e1       	ldi	r24, 0x12	; 18
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	9f 93       	push	r25
     27c:	8f 93       	push	r24
     27e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
	
	num++;
     282:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     286:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <__data_end+0x1>
     28a:	a0 91 dc 01 	lds	r26, 0x01DC	; 0x8001dc <__data_end+0x2>
     28e:	b0 91 dd 01 	lds	r27, 0x01DD	; 0x8001dd <__data_end+0x3>
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
     29c:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <__data_end+0x1>
     2a0:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <__data_end+0x2>
     2a4:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <__data_end+0x3>
	sprintf(buf, "%ld \t %5.1f \r\n", num, temp);
     2a8:	40 91 16 04 	lds	r20, 0x0416	; 0x800416 <temp>
     2ac:	50 91 17 04 	lds	r21, 0x0417	; 0x800417 <temp+0x1>
     2b0:	60 91 18 04 	lds	r22, 0x0418	; 0x800418 <temp+0x2>
     2b4:	70 91 19 04 	lds	r23, 0x0419	; 0x800419 <temp+0x3>
     2b8:	7f 93       	push	r23
     2ba:	6f 93       	push	r22
     2bc:	5f 93       	push	r21
     2be:	4f 93       	push	r20
     2c0:	bf 93       	push	r27
     2c2:	af 93       	push	r26
     2c4:	9f 93       	push	r25
     2c6:	8f 93       	push	r24
     2c8:	8d e1       	ldi	r24, 0x1D	; 29
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	0a e1       	ldi	r16, 0x1A	; 26
     2d2:	14 e0       	ldi	r17, 0x04	; 4
     2d4:	1f 93       	push	r17
     2d6:	0f 93       	push	r16
     2d8:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sprintf>
	slen= strlen(buf);
     2dc:	f8 01       	movw	r30, r16
     2de:	01 90       	ld	r0, Z+
     2e0:	00 20       	and	r0, r0
     2e2:	e9 f7       	brne	.-6      	; 0x2de <__vector_7+0xec>
     2e4:	31 97       	sbiw	r30, 0x01	; 1
     2e6:	8f 01       	movw	r16, r30
     2e8:	0a 51       	subi	r16, 0x1A	; 26
     2ea:	14 40       	sbci	r17, 0x04	; 4
	fresult = f_write(&fil, buf, slen, &bytes);
     2ec:	9e 01       	movw	r18, r28
     2ee:	2f 5f       	subi	r18, 0xFF	; 255
     2f0:	3f 4f       	sbci	r19, 0xFF	; 255
     2f2:	a8 01       	movw	r20, r16
     2f4:	6a e1       	ldi	r22, 0x1A	; 26
     2f6:	74 e0       	ldi	r23, 0x04	; 4
     2f8:	8b e6       	ldi	r24, 0x6B	; 107
     2fa:	94 e0       	ldi	r25, 0x04	; 4
     2fc:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <f_write>
     300:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <fresult>
	if(fresult!=FR_OK) stop("Error writing file");
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	88 23       	and	r24, r24
     310:	19 f0       	breq	.+6      	; 0x318 <__vector_7+0x126>
     312:	8c e2       	ldi	r24, 0x2C	; 44
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	07 c0       	rjmp	.+14     	; 0x326 <__vector_7+0x134>
	if (bytes!=slen) stop("Cannot write complete data");
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	08 17       	cp	r16, r24
     31e:	19 07       	cpc	r17, r25
     320:	21 f0       	breq	.+8      	; 0x32a <__vector_7+0x138>
     322:	8f e3       	ldi	r24, 0x3F	; 63
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop>
	f_sync(&fil);
     32a:	8b e6       	ldi	r24, 0x6B	; 107
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	0e 94 a3 14 	call	0x2946	; 0x2946 <f_sync>
}
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	ff 91       	pop	r31
     33c:	ef 91       	pop	r30
     33e:	bf 91       	pop	r27
     340:	af 91       	pop	r26
     342:	9f 91       	pop	r25
     344:	8f 91       	pop	r24
     346:	7f 91       	pop	r23
     348:	6f 91       	pop	r22
     34a:	5f 91       	pop	r21
     34c:	4f 91       	pop	r20
     34e:	3f 91       	pop	r19
     350:	2f 91       	pop	r18
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	0f 90       	pop	r0
     358:	0f be       	out	0x3f, r0	; 63
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <lcd_write_instr>:
	
}
	
void lcd_write_instr(uint8_t data)
{
	LCD_PORT &= ~(1<<LCD_RS); //wybieramy rejestr
     360:	da 98       	cbi	0x1b, 2	; 27
	LCD_PORT |= 1<<LCD_E;
     362:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
     364:	9b b3       	in	r25, 0x1b	; 27
     366:	9f 70       	andi	r25, 0x0F	; 15
     368:	28 2f       	mov	r18, r24
     36a:	20 7f       	andi	r18, 0xF0	; 240
     36c:	92 2b       	or	r25, r18
     36e:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     370:	35 e0       	ldi	r19, 0x05	; 5
     372:	3a 95       	dec	r19
     374:	f1 f7       	brne	.-4      	; 0x372 <lcd_write_instr+0x12>
     376:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
     378:	db 98       	cbi	0x1b, 3	; 27
     37a:	ef e8       	ldi	r30, 0x8F	; 143
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <lcd_write_instr+0x1e>
     382:	00 c0       	rjmp	.+0      	; 0x384 <lcd_write_instr+0x24>
     384:	00 00       	nop
	_delay_us(100);
	LCD_PORT |= 1<<LCD_E;
     386:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
     388:	2b b3       	in	r18, 0x1b	; 27
     38a:	2f 70       	andi	r18, 0x0F	; 15
     38c:	f0 e1       	ldi	r31, 0x10	; 16
     38e:	8f 9f       	mul	r24, r31
     390:	c0 01       	movw	r24, r0
     392:	11 24       	eor	r1, r1
     394:	82 2b       	or	r24, r18
     396:	8b bb       	out	0x1b, r24	; 27
     398:	35 e0       	ldi	r19, 0x05	; 5
     39a:	3a 95       	dec	r19
     39c:	f1 f7       	brne	.-4      	; 0x39a <lcd_write_instr+0x3a>
     39e:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
     3a0:	db 98       	cbi	0x1b, 3	; 27
     3a2:	8f e8       	ldi	r24, 0x8F	; 143
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_write_instr+0x46>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <lcd_write_instr+0x4c>
     3ac:	00 00       	nop
     3ae:	08 95       	ret

000003b0 <lcd_clear>:
}
	

	void lcd_clear(void)
	{
		lcd_write_instr(0x01);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_instr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b6:	8f e1       	ldi	r24, 0x1F	; 31
     3b8:	9e e4       	ldi	r25, 0x4E	; 78
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_clear+0xa>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <lcd_clear+0x10>
     3c0:	00 00       	nop
     3c2:	08 95       	ret

000003c4 <lcdinit>:
	return 0;
}

void lcdinit(void)
{
	LCD_PORT_DIR=0xff; //ustawiamy linie portu wyswietlacza na wyjsciowy
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	8a bb       	out	0x1a, r24	; 26
	LCD_PORT=0x00; //ustawiamy stan niski na liniach portu wyswietlacza
     3c8:	1b ba       	out	0x1b, r1	; 27
     3ca:	2f ef       	ldi	r18, 0xFF	; 255
     3cc:	80 e7       	ldi	r24, 0x70	; 112
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <lcdinit+0xc>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <lcdinit+0x16>
     3da:	00 00       	nop
	_delay_ms(50); //czekamy 50 ms 
	
	stdout=&mystdout;//przypisanie strumienia WEJSCIOWEGO  do zmiennej
     3dc:	8a e6       	ldi	r24, 0x6A	; 106
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <__iob+0x3>
     3e4:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <__iob+0x2>
	
	LCD_PORT &=~(1<<LCD_RS);//wybieramy rejestr instrukcji IR wpisanie zera na rejestr RS
     3e8:	da 98       	cbi	0x1b, 2	; 27
     3ea:	93 e0       	ldi	r25, 0x03	; 3
	
	for(uint8_t i=0; i<3; i++)
	{
		LCD_PORT|= 1<<LCD_E;
     3ec:	db 9a       	sbi	0x1b, 3	; 27
		LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
     3ee:	8b b3       	in	r24, 0x1b	; 27
     3f0:	8f 70       	andi	r24, 0x0F	; 15
     3f2:	80 63       	ori	r24, 0x30	; 48
     3f4:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f6:	e5 e0       	ldi	r30, 0x05	; 5
     3f8:	ea 95       	dec	r30
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <lcdinit+0x34>
     3fc:	00 00       	nop
		_delay_us(1);
		LCD_PORT &= ~(1<<LCD_E);
     3fe:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	ef e1       	ldi	r30, 0x1F	; 31
     402:	fe e4       	ldi	r31, 0x4E	; 78
     404:	31 97       	sbiw	r30, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
     40c:	91 50       	subi	r25, 0x01	; 1
	
	stdout=&mystdout;//przypisanie strumienia WEJSCIOWEGO  do zmiennej
	
	LCD_PORT &=~(1<<LCD_RS);//wybieramy rejestr instrukcji IR wpisanie zera na rejestr RS
	
	for(uint8_t i=0; i<3; i++)
     40e:	71 f7       	brne	.-36     	; 0x3ec <lcdinit+0x28>
		LCD_PORT &= ~(1<<LCD_E);
		_delay_ms(5);
		
	}
	
	LCD_PORT|= 1<<LCD_E;
     410:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
     412:	8b b3       	in	r24, 0x1b	; 27
     414:	8f 70       	andi	r24, 0x0F	; 15
     416:	80 62       	ori	r24, 0x20	; 32
     418:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     41a:	f5 e0       	ldi	r31, 0x05	; 5
     41c:	fa 95       	dec	r31
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     420:	00 00       	nop
		_delay_us(1);
		LCD_PORT &= ~(1<<LCD_E);
     422:	db 98       	cbi	0x1b, 3	; 27
     424:	8f e8       	ldi	r24, 0x8F	; 143
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	00 00       	nop
		_delay_us(100);
	
	lcd_write_instr(0x28); //ustawienie dwojki 
     430:	88 e2       	ldi	r24, 0x28	; 40
     432:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_instr>
	
	lcd_write_instr(0x0c); //włacz lcd i wylacz wyswietlanie kursora
     436:	8c e0       	ldi	r24, 0x0C	; 12
     438:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_instr>
	
	lcd_write_instr(0x06);//włacz pisanie od lewej do prawej i inkrementacja adresu pamieci
     43c:	86 e0       	ldi	r24, 0x06	; 6
     43e:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_instr>
	lcd_clear(); //zerowanie wyswietlacza	
     442:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <lcd_clear>

00000446 <lcd_write_data>:
	}
	

void lcd_write_data(uint8_t data)
{
	LCD_PORT |= (1<<LCD_RS); //wybieramy rejestr
     446:	da 9a       	sbi	0x1b, 2	; 27
	LCD_PORT |= 1<<LCD_E;
     448:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
     44a:	9b b3       	in	r25, 0x1b	; 27
     44c:	9f 70       	andi	r25, 0x0F	; 15
     44e:	28 2f       	mov	r18, r24
     450:	20 7f       	andi	r18, 0xF0	; 240
     452:	92 2b       	or	r25, r18
     454:	9b bb       	out	0x1b, r25	; 27
     456:	35 e0       	ldi	r19, 0x05	; 5
     458:	3a 95       	dec	r19
     45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_write_data+0x12>
     45c:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
     45e:	db 98       	cbi	0x1b, 3	; 27
     460:	ef e8       	ldi	r30, 0x8F	; 143
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <lcd_write_data+0x1e>
     468:	00 c0       	rjmp	.+0      	; 0x46a <lcd_write_data+0x24>
     46a:	00 00       	nop
	_delay_us(100);
	LCD_PORT |= 1<<LCD_E;
     46c:	db 9a       	sbi	0x1b, 3	; 27
	LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
     46e:	2b b3       	in	r18, 0x1b	; 27
     470:	2f 70       	andi	r18, 0x0F	; 15
     472:	f0 e1       	ldi	r31, 0x10	; 16
     474:	8f 9f       	mul	r24, r31
     476:	c0 01       	movw	r24, r0
     478:	11 24       	eor	r1, r1
     47a:	82 2b       	or	r24, r18
     47c:	8b bb       	out	0x1b, r24	; 27
     47e:	35 e0       	ldi	r19, 0x05	; 5
     480:	3a 95       	dec	r19
     482:	f1 f7       	brne	.-4      	; 0x480 <lcd_write_data+0x3a>
     484:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1<<LCD_E);
     486:	db 98       	cbi	0x1b, 3	; 27
     488:	8f e8       	ldi	r24, 0x8F	; 143
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <lcd_write_data+0x46>
     490:	00 c0       	rjmp	.+0      	; 0x492 <lcd_write_data+0x4c>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <lcd_print>:

static FILE mystdout= FDEV_SETUP_STREAM(lcd_print, NULL, _FDEV_SETUP_WRITE);

static int lcd_print(char c, FILE *stream)
{
	lcd_write_data(c);
     496:	0e 94 23 02 	call	0x446	; 0x446 <lcd_write_data>
	return 0;
}
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	08 95       	ret

000004a0 <lcd_set_xy>:
	_delay_us(100);	
}

void lcd_set_xy(uint8_t x, uint8_t y )
{
	lcd_write_instr(0x80 | (0x40 * y +x)); //instrukcja do ustawienia adresu pamieci wyswietlacza
     4a0:	90 e4       	ldi	r25, 0x40	; 64
     4a2:	69 9f       	mul	r22, r25
     4a4:	80 0d       	add	r24, r0
     4a6:	11 24       	eor	r1, r1
     4a8:	80 68       	ori	r24, 0x80	; 128
     4aa:	0c 94 b0 01 	jmp	0x360	; 0x360 <lcd_write_instr>

000004ae <lcd_write_text_xy>:
	//linia 1 jest od adresu 0x40
	//to mamy adres 0x40 * y +x
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	8a 01       	movw	r16, r20
	lcd_set_xy(x,y);
     4b8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
     4bc:	e8 01       	movw	r28, r16
	while (*text!=0) //sprawdz czy znak rozny od zera jesli tak to 
     4be:	89 91       	ld	r24, Y+
     4c0:	88 23       	and	r24, r24
     4c2:	19 f0       	breq	.+6      	; 0x4ca <lcd_write_text_xy+0x1c>
	{
		lcd_write_data((uint8_t)*text); //znak wysłany na wyswietlacz
     4c4:	0e 94 23 02 	call	0x446	; 0x446 <lcd_write_data>
     4c8:	fa cf       	rjmp	.-12     	; 0x4be <lcd_write_text_xy+0x10>
		text++; //na nastepny znak
	}
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	08 95       	ret

000004d4 <lcd_write_text_P>:

void lcd_write_text_P(const char *text)
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	fc 01       	movw	r30, r24
	register uint8_t ch; //sugestia wyjorztstywania wewnetrznego rejestru do przechowywania 
	while ((ch= pgm_read_byte(text++))) //odczyt 
     4da:	84 91       	lpm	r24, Z
     4dc:	ef 01       	movw	r28, r30
     4de:	21 96       	adiw	r28, 0x01	; 1
     4e0:	88 23       	and	r24, r24
     4e2:	21 f0       	breq	.+8      	; 0x4ec <lcd_write_text_P+0x18>
	{
		lcd_write_data(ch);
     4e4:	0e 94 23 02 	call	0x446	; 0x446 <lcd_write_data>
     4e8:	fe 01       	movw	r30, r28
     4ea:	f7 cf       	rjmp	.-18     	; 0x4da <lcd_write_text_P+0x6>
	}
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <OW_reset>:
#include "iwire.h"

uint8_t OW_reset(void)
{
	uint8_t presence;
	OW_low;
     4f2:	bb 9a       	sbi	0x17, 3	; 23
     4f4:	8f e7       	ldi	r24, 0x7F	; 127
     4f6:	97 e0       	ldi	r25, 0x07	; 7
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <OW_reset+0x6>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <OW_reset+0xc>
     4fe:	00 00       	nop
	_delay_us(480);
	OW_high;
     500:	bb 98       	cbi	0x17, 3	; 23
     502:	e7 e1       	ldi	r30, 0x17	; 23
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	31 97       	sbiw	r30, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <OW_reset+0x14>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <OW_reset+0x1a>
     50c:	00 00       	nop
	_delay_us(70);
	presence = OW_check;
     50e:	86 b3       	in	r24, 0x16	; 22
     510:	e7 e6       	ldi	r30, 0x67	; 103
     512:	f6 e0       	ldi	r31, 0x06	; 6
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	f1 f7       	brne	.-4      	; 0x514 <OW_reset+0x22>
     518:	00 c0       	rjmp	.+0      	; 0x51a <OW_reset+0x28>
     51a:	00 00       	nop
	_delay_us(410);
	return presence;
}
     51c:	88 70       	andi	r24, 0x08	; 8
     51e:	08 95       	ret

00000520 <OW_send>:

void OW_send(uint8_t byte)
{
     520:	98 e0       	ldi	r25, 0x08	; 8
	
	for (i=0; i<8; i++)
	{
		if(byte & 0x01)
		{
			OW_low;
     522:	bb 9a       	sbi	0x17, 3	; 23
{
	uint8_t i;
	
	for (i=0; i<8; i++)
	{
		if(byte & 0x01)
     524:	80 ff       	sbrs	r24, 0
     526:	0a c0       	rjmp	.+20     	; 0x53c <OW_send+0x1c>
     528:	20 e2       	ldi	r18, 0x20	; 32
     52a:	2a 95       	dec	r18
     52c:	f1 f7       	brne	.-4      	; 0x52a <OW_send+0xa>
		{
			OW_low;
			_delay_us(6);
			OW_high;
     52e:	bb 98       	cbi	0x17, 3	; 23
     530:	ef ef       	ldi	r30, 0xFF	; 255
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <OW_send+0x14>
     538:	00 c0       	rjmp	.+0      	; 0x53a <OW_send+0x1a>
     53a:	0a c0       	rjmp	.+20     	; 0x550 <OW_send+0x30>
     53c:	ef ee       	ldi	r30, 0xEF	; 239
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <OW_send+0x20>
     544:	00 c0       	rjmp	.+0      	; 0x546 <OW_send+0x26>
     546:	00 00       	nop
		}
		else
		{
			OW_low;
			_delay_us(60);
			OW_high;
     548:	bb 98       	cbi	0x17, 3	; 23
     54a:	f5 e3       	ldi	r31, 0x35	; 53
     54c:	fa 95       	dec	r31
     54e:	f1 f7       	brne	.-4      	; 0x54c <OW_send+0x2c>
     550:	00 00       	nop
			_delay_us(10);
		}
		byte>>=1;
     552:	86 95       	lsr	r24
     554:	91 50       	subi	r25, 0x01	; 1

void OW_send(uint8_t byte)
{
	uint8_t i;
	
	for (i=0; i<8; i++)
     556:	29 f7       	brne	.-54     	; 0x522 <OW_send+0x2>
			OW_high;
			_delay_us(10);
		}
		byte>>=1;
	}
}
     558:	08 95       	ret

0000055a <OW_recv>:
uint8_t OW_recv(void)
{
     55a:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t byte=0;
     55c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t i;
	
	for (i=0; i<8; i++)
	{
		byte>>=1;
     55e:	86 95       	lsr	r24
		OW_low;
     560:	bb 9a       	sbi	0x17, 3	; 23
     562:	20 e2       	ldi	r18, 0x20	; 32
     564:	2a 95       	dec	r18
     566:	f1 f7       	brne	.-4      	; 0x564 <OW_recv+0xa>
		_delay_us(6);
		OW_high;
     568:	bb 98       	cbi	0x17, 3	; 23
     56a:	e0 e3       	ldi	r30, 0x30	; 48
     56c:	ea 95       	dec	r30
     56e:	f1 f7       	brne	.-4      	; 0x56c <OW_recv+0x12>
		_delay_us(9);
		if(OW_check) byte|=0x80;
     570:	b3 99       	sbic	0x16, 3	; 22
     572:	80 68       	ori	r24, 0x80	; 128
     574:	eb ed       	ldi	r30, 0xDB	; 219
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <OW_recv+0x1e>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <OW_recv+0x24>
     57e:	00 00       	nop
     580:	91 50       	subi	r25, 0x01	; 1
uint8_t OW_recv(void)
{
	uint8_t byte=0;
	uint8_t i;
	
	for (i=0; i<8; i++)
     582:	69 f7       	brne	.-38     	; 0x55e <OW_recv+0x4>
		if(OW_check) byte|=0x80;
		_delay_us(55);
		
	}
	return byte;	
}
     584:	08 95       	ret

00000586 <DS18B20_init>:
#include "ds18b20.h"

uint8_t DS18B20_init(void)
{
	OW_reset();
     586:	0e 94 79 02 	call	0x4f2	; 0x4f2 <OW_reset>
	return OW_reset();
     58a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <OW_reset>

0000058e <DS18B20_start>:
}


uint8_t DS18B20_start(void)
{
     58e:	cf 93       	push	r28
	if(OW_reset()) return 1;
     590:	0e 94 79 02 	call	0x4f2	; 0x4f2 <OW_reset>
     594:	c8 2f       	mov	r28, r24
     596:	81 11       	cpse	r24, r1
     598:	07 c0       	rjmp	.+14     	; 0x5a8 <DS18B20_start+0x1a>
	OW_send(0xCC);
     59a:	8c ec       	ldi	r24, 0xCC	; 204
     59c:	0e 94 90 02 	call	0x520	; 0x520 <OW_send>
	OW_send(0x44);
     5a0:	84 e4       	ldi	r24, 0x44	; 68
     5a2:	0e 94 90 02 	call	0x520	; 0x520 <OW_send>
	return 0;
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <DS18B20_start+0x1c>
}


uint8_t DS18B20_start(void)
{
	if(OW_reset()) return 1;
     5a8:	c1 e0       	ldi	r28, 0x01	; 1
	OW_send(0xCC);
	OW_send(0x44);
	return 0;
	
}
     5aa:	8c 2f       	mov	r24, r28
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <DS18B20_read>:

int16_t DS18B20_read(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
	int16_t temperature;
	OW_reset();
     5b4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <OW_reset>
	OW_send(0xCC);
     5b8:	8c ec       	ldi	r24, 0xCC	; 204
     5ba:	0e 94 90 02 	call	0x520	; 0x520 <OW_send>
	OW_send(0xBE);
     5be:	8e eb       	ldi	r24, 0xBE	; 190
     5c0:	0e 94 90 02 	call	0x520	; 0x520 <OW_send>
	temperature = OW_recv();
     5c4:	0e 94 ad 02 	call	0x55a	; 0x55a <OW_recv>
     5c8:	c8 2f       	mov	r28, r24
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
	temperature|=((int16_t)OW_recv())<<8;
     5cc:	0e 94 ad 02 	call	0x55a	; 0x55a <OW_recv>
	return temperature;
	
}
     5d0:	9e 01       	movw	r18, r28
     5d2:	38 2b       	or	r19, r24
     5d4:	c9 01       	movw	r24, r18
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <rs232_print>:
static FILE ser= FDEV_SETUP_STREAM(rs232_print, NULL, _FDEV_SETUP_WRITE);

FILE *serout = &ser;

static int rs232_print (char c, FILE *stream )
{
     5dc:	cf 93       	push	r28
     5de:	c8 2f       	mov	r28, r24
	while (transmission);
     5e0:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <transmission>
     5e4:	81 11       	cpse	r24, r1
     5e6:	fc cf       	rjmp	.-8      	; 0x5e0 <rs232_print+0x4>
		if(c== '\n')
     5e8:	ca 30       	cpi	r28, 0x0A	; 10
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <rs232_print+0x16>
			rs232_print('\r',stream);
     5ec:	8d e0       	ldi	r24, 0x0D	; 13
     5ee:	0e 94 ee 02 	call	0x5dc	; 0x5dc <rs232_print>
		while(!(UCSRA&(1<<UDRE)));
     5f2:	5d 9b       	sbis	0x0b, 5	; 11
     5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <rs232_print+0x16>
		UDR = c;
     5f6:	cc b9       	out	0x0c, r28	; 12
	return 0;
}
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <__vector_13>:

ISR(USART_RXC_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
	uint8_t znak;
	znak= UDR;
     612:	8c b1       	in	r24, 0x0c	; 12
	if (indeks > (MAX_BUF-2))
     614:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <indeks>
     618:	9f 34       	cpi	r25, 0x4F	; 79
     61a:	10 f0       	brcs	.+4      	; 0x620 <__vector_13+0x20>
		indeks=0;
     61c:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <indeks>
	if(decode==0){
     620:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <decode>
     624:	91 11       	cpse	r25, r1
     626:	1f c0       	rjmp	.+62     	; 0x666 <__vector_13+0x66>
		if((znak=='\r') || (znak=='\n')){
     628:	8d 30       	cpi	r24, 0x0D	; 13
     62a:	11 f0       	breq	.+4      	; 0x630 <__vector_13+0x30>
     62c:	8a 30       	cpi	r24, 0x0A	; 10
     62e:	81 f4       	brne	.+32     	; 0x650 <__vector_13+0x50>
			if(indeks >0){
     630:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <indeks>
     634:	88 23       	and	r24, r24
     636:	b9 f0       	breq	.+46     	; 0x666 <__vector_13+0x66>
				bufor[indeks]=0;
     638:	e0 91 2f 05 	lds	r30, 0x052F	; 0x80052f <indeks>
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	e3 52       	subi	r30, 0x23	; 35
     640:	fb 4f       	sbci	r31, 0xFB	; 251
     642:	10 82       	st	Z, r1
				indeks=0;
     644:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <indeks>
				decode=1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <decode>
     64e:	0b c0       	rjmp	.+22     	; 0x666 <__vector_13+0x66>
			}
		}
		else{
			bufor[indeks]=znak;
     650:	e0 91 2f 05 	lds	r30, 0x052F	; 0x80052f <indeks>
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	e3 52       	subi	r30, 0x23	; 35
     658:	fb 4f       	sbci	r31, 0xFB	; 251
     65a:	80 83       	st	Z, r24
			indeks++;
     65c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <indeks>
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <indeks>
		}
	}
}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	9f 91       	pop	r25
     66c:	8f 91       	pop	r24
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_14>:

ISR(USART_UDRE_vect)
{
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	0f 92       	push	r0
     680:	11 24       	eor	r1, r1
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
	if(*psend)
     68a:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <psend>
     68e:	f0 91 2e 05 	lds	r31, 0x052E	; 0x80052e <psend+0x1>
     692:	80 81       	ld	r24, Z
     694:	88 23       	and	r24, r24
     696:	49 f0       	breq	.+18     	; 0x6aa <__vector_14+0x32>
	{
		UDR=*(psend++);
     698:	cf 01       	movw	r24, r30
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <psend+0x1>
     6a0:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <psend>
     6a4:	80 81       	ld	r24, Z
     6a6:	8c b9       	out	0x0c, r24	; 12
     6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <__vector_14+0x38>
	}else
	{
		UCSRB &= ~(1<<UDRIE); //wylaczenie przerwania (empty)
     6aa:	55 98       	cbi	0x0a, 5	; 10
		transmission=0;
     6ac:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <transmission>
	}
}
     6b0:	ff 91       	pop	r31
     6b2:	ef 91       	pop	r30
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <USART_init>:

void USART_init(void)
{
	UBRRH= (uint8_t)(MY_UBRR>>8);
     6c2:	10 bc       	out	0x20, r1	; 32
	UBRRL= (uint8_t)(MY_UBRR & 0xff);
     6c4:	19 b8       	out	0x09, r1	; 9
	UCSRB = (1<<RXCIE) | (1<<RXEN) | (1<<TXEN);
     6c6:	88 e9       	ldi	r24, 0x98	; 152
     6c8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     6ca:	86 e8       	ldi	r24, 0x86	; 134
     6cc:	80 bd       	out	0x20, r24	; 32
     6ce:	08 95       	ret

000006d0 <USART_send>:
}

void USART_send(char *tekst)
{
	while (transmission);
     6d0:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <transmission>
     6d4:	21 11       	cpse	r18, r1
     6d6:	fc cf       	rjmp	.-8      	; 0x6d0 <USART_send>
	transmission=1;
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	20 93 de 01 	sts	0x01DE, r18	; 0x8001de <transmission>
	psend=(uint8_t *)tekst;
     6de:	90 93 2e 05 	sts	0x052E, r25	; 0x80052e <psend+0x1>
     6e2:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <psend>
	UCSRB |= (1<<UDRIE);
     6e6:	55 9a       	sbi	0x0a, 5	; 10
     6e8:	08 95       	ret

000006ea <ack>:
}

void ack(uint8_t status){
	if(status ==0)
     6ea:	81 11       	cpse	r24, r1
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <ack+0xa>
		USART_send("\r\nOK\r\n");
     6ee:	8b ea       	ldi	r24, 0xAB	; 171
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <ack+0xe>
	else
		USART_send("\r\nERROR\r\n");
     6f4:	82 eb       	ldi	r24, 0xB2	; 178
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <USART_send>

000006fc <send_double>:
}

void send_double (double d)
{
	sprintf((char*)buf_out, "%g\r\n", d);
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	7f 93       	push	r23
     702:	6f 93       	push	r22
     704:	8c eb       	ldi	r24, 0xBC	; 188
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	9f 93       	push	r25
     70a:	8f 93       	push	r24
     70c:	8d e8       	ldi	r24, 0x8D	; 141
     70e:	94 e0       	ldi	r25, 0x04	; 4
     710:	9f 93       	push	r25
     712:	8f 93       	push	r24
     714:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sprintf>
	USART_send((char*)buf_out);
     718:	8d b7       	in	r24, 0x3d	; 61
     71a:	9e b7       	in	r25, 0x3e	; 62
     71c:	08 96       	adiw	r24, 0x08	; 8
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	9e bf       	out	0x3e, r25	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	8d bf       	out	0x3d, r24	; 61
     728:	8d e8       	ldi	r24, 0x8D	; 141
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <USART_send>

00000730 <reset_buffer>:
}

void reset_buffer(void)
{
	memset((void *) bufor, 0, MAX_BUF);
     730:	80 e5       	ldi	r24, 0x50	; 80
     732:	ed ed       	ldi	r30, 0xDD	; 221
     734:	f4 e0       	ldi	r31, 0x04	; 4
     736:	df 01       	movw	r26, r30
     738:	1d 92       	st	X+, r1
     73a:	8a 95       	dec	r24
     73c:	e9 f7       	brne	.-6      	; 0x738 <reset_buffer+0x8>
	indeks=0;
     73e:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <indeks>
	decode=0;
     742:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <decode>
     746:	08 95       	ret

00000748 <ld_dword>:
	rv = rv << 8 | ptr[0];
	return rv;
}

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
     748:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
     74a:	62 81       	ldd	r22, Z+2	; 0x02
     74c:	73 81       	ldd	r23, Z+3	; 0x03
     74e:	cb 01       	movw	r24, r22
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	ba 2f       	mov	r27, r26
     756:	a9 2f       	mov	r26, r25
     758:	98 2f       	mov	r25, r24
     75a:	88 27       	eor	r24, r24
	rv = rv << 8 | ptr[0];
     75c:	21 81       	ldd	r18, Z+1	; 0x01
     75e:	82 2b       	or	r24, r18
     760:	ba 2f       	mov	r27, r26
     762:	a9 2f       	mov	r26, r25
     764:	98 2f       	mov	r25, r24
     766:	88 27       	eor	r24, r24
	return rv;
     768:	20 81       	ld	r18, Z
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	62 2b       	or	r22, r18
}
     770:	08 95       	ret

00000772 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	fc 01       	movw	r30, r24
	clst -= 2;		/* Cluster number is origin from 2 */
     778:	9a 01       	movw	r18, r20
     77a:	ab 01       	movw	r20, r22
     77c:	22 50       	subi	r18, 0x02	; 2
     77e:	31 09       	sbc	r19, r1
     780:	41 09       	sbc	r20, r1
     782:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     784:	83 89       	ldd	r24, Z+19	; 0x13
     786:	94 89       	ldd	r25, Z+20	; 0x14
     788:	a5 89       	ldd	r26, Z+21	; 0x15
     78a:	b6 89       	ldd	r27, Z+22	; 0x16
     78c:	02 97       	sbiw	r24, 0x02	; 2
     78e:	a1 09       	sbc	r26, r1
     790:	b1 09       	sbc	r27, r1
     792:	28 17       	cp	r18, r24
     794:	39 07       	cpc	r19, r25
     796:	4a 07       	cpc	r20, r26
     798:	5b 07       	cpc	r21, r27
     79a:	68 f4       	brcc	.+26     	; 0x7b6 <clst2sect+0x44>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
     79c:	a1 85       	ldd	r26, Z+9	; 0x09
     79e:	b2 85       	ldd	r27, Z+10	; 0x0a
     7a0:	0e 94 57 25 	call	0x4aae	; 0x4aae <__muluhisi3>
     7a4:	07 a1       	ldd	r16, Z+39	; 0x27
     7a6:	10 a5       	ldd	r17, Z+40	; 0x28
     7a8:	21 a5       	ldd	r18, Z+41	; 0x29
     7aa:	32 a5       	ldd	r19, Z+42	; 0x2a
     7ac:	60 0f       	add	r22, r16
     7ae:	71 1f       	adc	r23, r17
     7b0:	82 1f       	adc	r24, r18
     7b2:	93 1f       	adc	r25, r19
     7b4:	03 c0       	rjmp	.+6      	; 0x7bc <clst2sect+0x4a>
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	cb 01       	movw	r24, r22
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
}
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	dc 01       	movw	r26, r24
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
     7c8:	ed 91       	ld	r30, X+
     7ca:	fc 91       	ld	r31, X
     7cc:	11 97       	sbiw	r26, 0x01	; 1
	if (!tp) return vol;	/* Invalid path name? */
     7ce:	30 97       	sbiw	r30, 0x00	; 0
     7d0:	d1 f0       	breq	.+52     	; 0x806 <get_ldnumber+0x44>
     7d2:	9f 01       	movw	r18, r30
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
     7d4:	2f 5f       	subi	r18, 0xFF	; 255
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	e9 01       	movw	r28, r18
     7da:	21 97       	sbiw	r28, 0x01	; 1
     7dc:	88 81       	ld	r24, Y
     7de:	81 32       	cpi	r24, 0x21	; 33
     7e0:	78 f0       	brcs	.+30     	; 0x800 <get_ldnumber+0x3e>
     7e2:	8a 33       	cpi	r24, 0x3A	; 58
     7e4:	b9 f7       	brne	.-18     	; 0x7d4 <get_ldnumber+0x12>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
     7e6:	90 81       	ld	r25, Z
     7e8:	80 ed       	ldi	r24, 0xD0	; 208
     7ea:	89 0f       	add	r24, r25
     7ec:	8a 30       	cpi	r24, 0x0A	; 10
     7ee:	58 f4       	brcc	.+22     	; 0x806 <get_ldnumber+0x44>
     7f0:	32 96       	adiw	r30, 0x02	; 2
     7f2:	2e 17       	cp	r18, r30
     7f4:	3f 07       	cpc	r19, r31
     7f6:	39 f4       	brne	.+14     	; 0x806 <get_ldnumber+0x44>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
     7f8:	90 33       	cpi	r25, 0x30	; 48
     7fa:	29 f4       	brne	.+10     	; 0x806 <get_ldnumber+0x44>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
     7fc:	2d 93       	st	X+, r18
     7fe:	3c 93       	st	X, r19
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	02 c0       	rjmp	.+4      	; 0x80a <get_ldnumber+0x48>
	const char *sp;
	char c;
#endif

	tt = tp = *path;
	if (!tp) return vol;	/* Invalid path name? */
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	9f ef       	ldi	r25, 0xFF	; 255
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
     81a:	8b 01       	movw	r16, r22
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
     81c:	89 2b       	or	r24, r25
     81e:	f1 f0       	breq	.+60     	; 0x85c <validate+0x4c>
     820:	e8 81       	ld	r30, Y
     822:	f9 81       	ldd	r31, Y+1	; 0x01
     824:	30 97       	sbiw	r30, 0x00	; 0
     826:	d1 f0       	breq	.+52     	; 0x85c <validate+0x4c>
     828:	80 81       	ld	r24, Z
     82a:	88 23       	and	r24, r24
     82c:	b9 f0       	breq	.+46     	; 0x85c <validate+0x4c>
     82e:	2a 81       	ldd	r18, Y+2	; 0x02
     830:	3b 81       	ldd	r19, Y+3	; 0x03
     832:	85 81       	ldd	r24, Z+5	; 0x05
     834:	96 81       	ldd	r25, Z+6	; 0x06
     836:	28 17       	cp	r18, r24
     838:	39 07       	cpc	r19, r25
     83a:	81 f4       	brne	.+32     	; 0x85c <validate+0x4c>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <disk_status>
     842:	80 fd       	sbrc	r24, 0
     844:	0b c0       	rjmp	.+22     	; 0x85c <validate+0x4c>
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     846:	28 81       	ld	r18, Y
     848:	39 81       	ldd	r19, Y+1	; 0x01
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     84c:	f8 01       	movw	r30, r16
     84e:	31 83       	std	Z+1, r19	; 0x01
     850:	20 83       	st	Z, r18
	return res;
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
     85c:	89 e0       	ldi	r24, 0x09	; 9
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     85e:	20 e0       	ldi	r18, 0x00	; 0
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	f4 cf       	rjmp	.-24     	; 0x84c <validate+0x3c>

00000864 <mem_cpy.part.0>:
/*-----------------------------------------------------------------------*/
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
     864:	fb 01       	movw	r30, r22
     866:	48 0f       	add	r20, r24
     868:	59 1f       	adc	r21, r25
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
		do {
			*d++ = *s++;
     86a:	21 91       	ld	r18, Z+
     86c:	dc 01       	movw	r26, r24
     86e:	2d 93       	st	X+, r18
     870:	cd 01       	movw	r24, r26
		} while (--cnt);
     872:	a4 17       	cp	r26, r20
     874:	b5 07       	cpc	r27, r21
     876:	c9 f7       	brne	.-14     	; 0x86a <mem_cpy.part.0+0x6>
	}
}
     878:	08 95       	ret

0000087a <ld_clust.isra.3>:

/*-----------------------------------------------------------------------*/
/* FAT: Directory handling - Load/Store start cluster number             */
/*-----------------------------------------------------------------------*/

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
     87a:	fb 01       	movw	r30, r22
	const BYTE* dir		/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
     87c:	42 8d       	ldd	r20, Z+26	; 0x1a
     87e:	53 8d       	ldd	r21, Z+27	; 0x1b
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
     884:	83 30       	cpi	r24, 0x03	; 3
     886:	59 f4       	brne	.+22     	; 0x89e <ld_clust.isra.3+0x24>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
     888:	84 89       	ldd	r24, Z+20	; 0x14
     88a:	95 89       	ldd	r25, Z+21	; 0x15
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	dc 01       	movw	r26, r24
     892:	99 27       	eor	r25, r25
     894:	88 27       	eor	r24, r24
     896:	48 2b       	or	r20, r24
     898:	59 2b       	or	r21, r25
     89a:	6a 2b       	or	r22, r26
     89c:	7b 2b       	or	r23, r27
	}

	return cl;
}
     89e:	cb 01       	movw	r24, r22
     8a0:	ba 01       	movw	r22, r20
     8a2:	08 95       	ret

000008a4 <st_clust.isra.4>:


#if !FF_FS_READONLY
static void st_clust (
     8a4:	fb 01       	movw	r30, r22
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     8a6:	22 8f       	std	Z+26, r18	; 0x1a
	*ptr++ = (BYTE)val;
     8a8:	33 8f       	std	Z+27, r19	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
     8aa:	dc 01       	movw	r26, r24
     8ac:	8c 91       	ld	r24, X
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	29 f4       	brne	.+10     	; 0x8bc <st_clust.isra.4+0x18>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
     8b2:	ca 01       	movw	r24, r20
     8b4:	aa 27       	eor	r26, r26
     8b6:	bb 27       	eor	r27, r27
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     8b8:	84 8b       	std	Z+20, r24	; 0x14
	*ptr++ = (BYTE)val;
     8ba:	95 8b       	std	Z+21, r25	; 0x15
     8bc:	08 95       	ret

000008be <get_fileinfo.part.5>:
#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/

static void get_fileinfo (
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	fc 01       	movw	r30, r24
     8c8:	eb 01       	movw	r28, r22
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
     8d2:	8e e2       	ldi	r24, 0x2E	; 46
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
     8d4:	ba 01       	movw	r22, r20
     8d6:	6f 5f       	subi	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	a2 8d       	ldd	r26, Z+26	; 0x1a
     8dc:	b3 8d       	ldd	r27, Z+27	; 0x1b
     8de:	a4 0f       	add	r26, r20
     8e0:	b5 1f       	adc	r27, r21
     8e2:	9c 91       	ld	r25, X
		if (c == ' ') continue;		/* Skip padding spaces */
     8e4:	90 32       	cpi	r25, 0x20	; 32
     8e6:	a1 f0       	breq	.+40     	; 0x910 <get_fileinfo.part.5+0x52>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
     8e8:	95 30       	cpi	r25, 0x05	; 5
     8ea:	09 f4       	brne	.+2      	; 0x8ee <get_fileinfo.part.5+0x30>
     8ec:	95 ee       	ldi	r25, 0xE5	; 229
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
     8ee:	69 30       	cpi	r22, 0x09	; 9
     8f0:	71 05       	cpc	r23, r1
     8f2:	39 f4       	brne	.+14     	; 0x902 <get_fileinfo.part.5+0x44>
     8f4:	de 01       	movw	r26, r28
     8f6:	a2 0f       	add	r26, r18
     8f8:	b3 1f       	adc	r27, r19
     8fa:	19 96       	adiw	r26, 0x09	; 9
     8fc:	8c 93       	st	X, r24
     8fe:	2f 5f       	subi	r18, 0xFF	; 255
     900:	3f 4f       	sbci	r19, 0xFF	; 255
		fno->fname[di++] = c;
     902:	de 01       	movw	r26, r28
     904:	a2 0f       	add	r26, r18
     906:	b3 1f       	adc	r27, r19
     908:	19 96       	adiw	r26, 0x09	; 9
     90a:	9c 93       	st	X, r25
     90c:	2f 5f       	subi	r18, 0xFF	; 255
     90e:	3f 4f       	sbci	r19, 0xFF	; 255
     910:	ab 01       	movw	r20, r22
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
     912:	6b 30       	cpi	r22, 0x0B	; 11
     914:	71 05       	cpc	r23, r1
     916:	f1 f6       	brne	.-68     	; 0x8d4 <get_fileinfo.part.5+0x16>
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;
     918:	de 01       	movw	r26, r28
     91a:	a2 0f       	add	r26, r18
     91c:	b3 1f       	adc	r27, r19
     91e:	19 96       	adiw	r26, 0x09	; 9
     920:	1c 92       	st	X, r1
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
     922:	a2 8d       	ldd	r26, Z+26	; 0x1a
     924:	b3 8d       	ldd	r27, Z+27	; 0x1b
     926:	1b 96       	adiw	r26, 0x0b	; 11
     928:	8c 91       	ld	r24, X
     92a:	88 87       	std	Y+8, r24	; 0x08
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
     92c:	02 8d       	ldd	r16, Z+26	; 0x1a
     92e:	13 8d       	ldd	r17, Z+27	; 0x1b
     930:	c8 01       	movw	r24, r16
     932:	4c 96       	adiw	r24, 0x1c	; 28
     934:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
     938:	68 83       	st	Y, r22
     93a:	79 83       	std	Y+1, r23	; 0x01
     93c:	8a 83       	std	Y+2, r24	; 0x02
     93e:	9b 83       	std	Y+3, r25	; 0x03
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     940:	f8 01       	movw	r30, r16
     942:	86 89       	ldd	r24, Z+22	; 0x16
     944:	97 89       	ldd	r25, Z+23	; 0x17
	fno->fname[di] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
     946:	9f 83       	std	Y+7, r25	; 0x07
     948:	8e 83       	std	Y+6, r24	; 0x06
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     94a:	80 8d       	ldd	r24, Z+24	; 0x18
     94c:	91 8d       	ldd	r25, Z+25	; 0x19
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
     94e:	9d 83       	std	Y+5, r25	; 0x05
     950:	8c 83       	std	Y+4, r24	; 0x04
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
     95c:	8f 92       	push	r8
     95e:	9f 92       	push	r9
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty? */
     970:	fc 01       	movw	r30, r24
     972:	23 81       	ldd	r18, Z+3	; 0x03
     974:	22 23       	and	r18, r18
     976:	c1 f1       	breq	.+112    	; 0x9e8 <sync_window+0x8c>
     978:	ec 01       	movw	r28, r24
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
     97a:	7c 01       	movw	r14, r24
     97c:	ff e2       	ldi	r31, 0x2F	; 47
     97e:	ef 0e       	add	r14, r31
     980:	f1 1c       	adc	r15, r1
     982:	2b a5       	ldd	r18, Y+43	; 0x2b
     984:	3c a5       	ldd	r19, Y+44	; 0x2c
     986:	4d a5       	ldd	r20, Y+45	; 0x2d
     988:	5e a5       	ldd	r21, Y+46	; 0x2e
     98a:	01 e0       	ldi	r16, 0x01	; 1
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	b7 01       	movw	r22, r14
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <disk_write>
     996:	81 11       	cpse	r24, r1
     998:	29 c0       	rjmp	.+82     	; 0x9ec <sync_window+0x90>
			fs->wflag = 0;	/* Clear window dirty flag */
     99a:	1b 82       	std	Y+3, r1	; 0x03
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
     99c:	0b a5       	ldd	r16, Y+43	; 0x2b
     99e:	1c a5       	ldd	r17, Y+44	; 0x2c
     9a0:	2d a5       	ldd	r18, Y+45	; 0x2d
     9a2:	3e a5       	ldd	r19, Y+46	; 0x2e
     9a4:	8f 89       	ldd	r24, Y+23	; 0x17
     9a6:	98 8d       	ldd	r25, Y+24	; 0x18
     9a8:	a9 8d       	ldd	r26, Y+25	; 0x19
     9aa:	ba 8d       	ldd	r27, Y+26	; 0x1a
     9ac:	8f 8c       	ldd	r8, Y+31	; 0x1f
     9ae:	98 a0       	ldd	r9, Y+32	; 0x20
     9b0:	a9 a0       	ldd	r10, Y+33	; 0x21
     9b2:	ba a0       	ldd	r11, Y+34	; 0x22
     9b4:	b9 01       	movw	r22, r18
     9b6:	a8 01       	movw	r20, r16
     9b8:	48 19       	sub	r20, r8
     9ba:	59 09       	sbc	r21, r9
     9bc:	6a 09       	sbc	r22, r10
     9be:	7b 09       	sbc	r23, r11
     9c0:	48 17       	cp	r20, r24
     9c2:	59 07       	cpc	r21, r25
     9c4:	6a 07       	cpc	r22, r26
     9c6:	7b 07       	cpc	r23, r27
     9c8:	78 f4       	brcc	.+30     	; 0x9e8 <sync_window+0x8c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
     9ca:	6a 81       	ldd	r22, Y+2	; 0x02
     9cc:	62 30       	cpi	r22, 0x02	; 2
     9ce:	61 f4       	brne	.+24     	; 0x9e8 <sync_window+0x8c>
     9d0:	a9 01       	movw	r20, r18
     9d2:	98 01       	movw	r18, r16
     9d4:	28 0f       	add	r18, r24
     9d6:	39 1f       	adc	r19, r25
     9d8:	4a 1f       	adc	r20, r26
     9da:	5b 1f       	adc	r21, r27
     9dc:	01 e0       	ldi	r16, 0x01	; 1
     9de:	10 e0       	ldi	r17, 0x00	; 0
     9e0:	b7 01       	movw	r22, r14
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <disk_write>
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
	FRESULT res = FR_OK;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <sync_window+0x92>
			fs->wflag = 0;	/* Clear window dirty flag */
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
			}
		} else {
			res = FR_DISK_ERR;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return res;
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	9f 90       	pop	r9
     a00:	8f 90       	pop	r8
     a02:	08 95       	ret

00000a04 <move_window.part.7>:
#endif


static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
     a04:	8f 92       	push	r8
     a06:	9f 92       	push	r9
     a08:	af 92       	push	r10
     a0a:	bf 92       	push	r11
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
     a18:	4a 01       	movw	r8, r20
     a1a:	5b 01       	movw	r10, r22
	FRESULT res = FR_OK;


	if (sect != fs->winsect) {	/* Window offset changed? */
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
     a1c:	0e 94 ae 04 	call	0x95c	; 0x95c <sync_window>
     a20:	f8 2e       	mov	r15, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     a22:	81 11       	cpse	r24, r1
     a24:	16 c0       	rjmp	.+44     	; 0xa52 <move_window.part.7+0x4e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
     a26:	01 e0       	ldi	r16, 0x01	; 1
     a28:	10 e0       	ldi	r17, 0x00	; 0
     a2a:	a5 01       	movw	r20, r10
     a2c:	94 01       	movw	r18, r8
     a2e:	be 01       	movw	r22, r28
     a30:	61 5d       	subi	r22, 0xD1	; 209
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <disk_read>
     a3a:	88 23       	and	r24, r24
     a3c:	31 f0       	breq	.+12     	; 0xa4a <move_window.part.7+0x46>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
				res = FR_DISK_ERR;
     a3e:	ff 24       	eor	r15, r15
     a40:	f3 94       	inc	r15
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
     a42:	88 24       	eor	r8, r8
     a44:	8a 94       	dec	r8
     a46:	98 2c       	mov	r9, r8
     a48:	54 01       	movw	r10, r8
				res = FR_DISK_ERR;
			}
			fs->winsect = sect;
     a4a:	8b a6       	std	Y+43, r8	; 0x2b
     a4c:	9c a6       	std	Y+44, r9	; 0x2c
     a4e:	ad a6       	std	Y+45, r10	; 0x2d
     a50:	be a6       	std	Y+46, r11	; 0x2e
		}
	}
	return res;
}
     a52:	8f 2d       	mov	r24, r15
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	bf 90       	pop	r11
     a60:	af 90       	pop	r10
     a62:	9f 90       	pop	r9
     a64:	8f 90       	pop	r8
     a66:	08 95       	ret

00000a68 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
	FRESULT res = FR_OK;


	if (sect != fs->winsect) {	/* Window offset changed? */
     a6c:	fc 01       	movw	r30, r24
     a6e:	03 a5       	ldd	r16, Z+43	; 0x2b
     a70:	14 a5       	ldd	r17, Z+44	; 0x2c
     a72:	25 a5       	ldd	r18, Z+45	; 0x2d
     a74:	36 a5       	ldd	r19, Z+46	; 0x2e
     a76:	04 17       	cp	r16, r20
     a78:	15 07       	cpc	r17, r21
     a7a:	26 07       	cpc	r18, r22
     a7c:	37 07       	cpc	r19, r23
     a7e:	21 f0       	breq	.+8      	; 0xa88 <move_window+0x20>
			}
			fs->winsect = sect;
		}
	}
	return res;
}
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	0c 94 02 05 	jmp	0xa04	; 0xa04 <move_window.part.7>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <check_fs.part.8>:
/* Load a sector and check if it is an FAT VBR                           */
/*-----------------------------------------------------------------------*/

/* Check what the sector is */

static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	fc 01       	movw	r30, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     a96:	dc 01       	movw	r26, r24
     a98:	a3 5d       	subi	r26, 0xD3	; 211
     a9a:	bd 4f       	sbci	r27, 0xFD	; 253
     a9c:	4d 91       	ld	r20, X+
     a9e:	5c 91       	ld	r21, X
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
     aa0:	87 a5       	ldd	r24, Z+47	; 0x2f
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
     aa2:	8b 3e       	cpi	r24, 0xEB	; 235
     aa4:	21 f0       	breq	.+8      	; 0xaae <check_fs.part.8+0x1e>
     aa6:	88 5e       	subi	r24, 0xE8	; 232
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	08 f0       	brcs	.+2      	; 0xaae <check_fs.part.8+0x1e>
     aac:	40 c0       	rjmp	.+128    	; 0xb2e <check_fs.part.8+0x9e>
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
     aae:	45 35       	cpi	r20, 0x55	; 85
     ab0:	6a ea       	ldi	r22, 0xAA	; 170
     ab2:	56 07       	cpc	r21, r22
     ab4:	a9 f4       	brne	.+42     	; 0xae0 <check_fs.part.8+0x50>
     ab6:	df 01       	movw	r26, r30
     ab8:	af 57       	subi	r26, 0x7F	; 127
     aba:	bf 4f       	sbci	r27, 0xFF	; 255
     abc:	c1 ec       	ldi	r28, 0xC1	; 193
     abe:	d1 e0       	ldi	r29, 0x01	; 1
     ac0:	9f 01       	movw	r18, r30
     ac2:	27 57       	subi	r18, 0x77	; 119
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
     ac6:	8d 91       	ld	r24, X+
     ac8:	69 91       	ld	r22, Y+
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	86 1b       	sub	r24, r22
     ace:	91 09       	sbc	r25, r1
	} while (--cnt && r == 0);
     ad0:	a2 17       	cp	r26, r18
     ad2:	b3 07       	cpc	r27, r19
     ad4:	19 f0       	breq	.+6      	; 0xadc <check_fs.part.8+0x4c>
     ad6:	89 2b       	or	r24, r25
     ad8:	b1 f3       	breq	.-20     	; 0xac6 <check_fs.part.8+0x36>
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <check_fs.part.8+0x50>
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
     adc:	89 2b       	or	r24, r25
     ade:	69 f1       	breq	.+90     	; 0xb3a <check_fs.part.8+0xaa>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     ae0:	22 ad       	ldd	r18, Z+58	; 0x3a
     ae2:	33 ad       	ldd	r19, Z+59	; 0x3b
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
		/* FAT volumes formatted with early MS-DOS lack boot signature and FAT string, so that we need to identify the FAT VBR without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
     ae4:	c9 01       	movw	r24, r18
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	82 23       	and	r24, r18
     aea:	93 23       	and	r25, r19
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	f9 f4       	brne	.+62     	; 0xb2e <check_fs.part.8+0x9e>
     af0:	21 15       	cp	r18, r1
     af2:	32 40       	sbci	r19, 0x02	; 2
     af4:	e1 f4       	brne	.+56     	; 0xb2e <check_fs.part.8+0x9e>
			b = fs->win[BPB_SecPerClus];
     af6:	24 ad       	ldd	r18, Z+60	; 0x3c
			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
     af8:	22 23       	and	r18, r18
     afa:	c9 f0       	breq	.+50     	; 0xb2e <check_fs.part.8+0x9e>
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	b9 01       	movw	r22, r18
     b00:	61 50       	subi	r22, 0x01	; 1
     b02:	71 09       	sbc	r23, r1
     b04:	26 23       	and	r18, r22
     b06:	37 23       	and	r19, r23
     b08:	23 2b       	or	r18, r19
     b0a:	89 f4       	brne	.+34     	; 0xb2e <check_fs.part.8+0x9e>
			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
     b0c:	27 ad       	ldd	r18, Z+63	; 0x3f
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	22 30       	cpi	r18, 0x02	; 2
     b12:	68 f4       	brcc	.+26     	; 0xb2e <check_fs.part.8+0x9e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     b14:	df 01       	movw	r26, r30
     b16:	a0 5c       	subi	r26, 0xC0	; 192
     b18:	bf 4f       	sbci	r27, 0xFF	; 255
		w = ld_word(fs->win + BPB_BytsPerSec);
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
			b = fs->win[BPB_SecPerClus];
			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0				/* Properness of root entry count */
     b1a:	2d 91       	ld	r18, X+
     b1c:	3c 91       	ld	r19, X
     b1e:	23 2b       	or	r18, r19
     b20:	31 f0       	breq	.+12     	; 0xb2e <check_fs.part.8+0x9e>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     b22:	eb 5b       	subi	r30, 0xBB	; 187
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
			b = fs->win[BPB_SecPerClus];
			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
			&& ld_word(fs->win + BPB_RootEntCnt) != 0				/* Properness of root entry count */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {				/* Properness of FAT size */
     b26:	20 81       	ld	r18, Z
     b28:	31 81       	ldd	r19, Z+1	; 0x01
     b2a:	23 2b       	or	r18, r19
     b2c:	59 f4       	brne	.+22     	; 0xb44 <check_fs.part.8+0xb4>
				return 0;	/* Sector can be presumed an FAT VBR */
			}
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
     b2e:	45 35       	cpi	r20, 0x55	; 85
     b30:	5a 4a       	sbci	r21, 0xAA	; 170
     b32:	31 f0       	breq	.+12     	; 0xb40 <check_fs.part.8+0xb0>
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	05 c0       	rjmp	.+10     	; 0xb44 <check_fs.part.8+0xb4>
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an FAT32 VBR */
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <check_fs.part.8+0xb4>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {				/* Properness of FAT size */
				return 0;	/* Sector can be presumed an FAT VBR */
			}
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	90 e0       	ldi	r25, 0x00	; 0
}
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <get_fat.isra.10>:

/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
     b5e:	42 30       	cpi	r20, 0x02	; 2
     b60:	51 05       	cpc	r21, r1
     b62:	61 05       	cpc	r22, r1
     b64:	71 05       	cpc	r23, r1
     b66:	08 f4       	brcc	.+2      	; 0xb6a <get_fat.isra.10+0x20>
     b68:	a1 c0       	rjmp	.+322    	; 0xcac <get_fat.isra.10+0x162>
     b6a:	fc 01       	movw	r30, r24
     b6c:	03 89       	ldd	r16, Z+19	; 0x13
     b6e:	14 89       	ldd	r17, Z+20	; 0x14
     b70:	25 89       	ldd	r18, Z+21	; 0x15
     b72:	36 89       	ldd	r19, Z+22	; 0x16
     b74:	40 17       	cp	r20, r16
     b76:	51 07       	cpc	r21, r17
     b78:	62 07       	cpc	r22, r18
     b7a:	73 07       	cpc	r23, r19
     b7c:	08 f0       	brcs	.+2      	; 0xb80 <get_fat.isra.10+0x36>
     b7e:	96 c0       	rjmp	.+300    	; 0xcac <get_fat.isra.10+0x162>
     b80:	6a 01       	movw	r12, r20
     b82:	7b 01       	movw	r14, r22
     b84:	8c 01       	movw	r16, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
     b86:	80 81       	ld	r24, Z
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	09 f4       	brne	.+2      	; 0xb8e <get_fat.isra.10+0x44>
     b8c:	4d c0       	rjmp	.+154    	; 0xc28 <get_fat.isra.10+0xde>
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	09 f4       	brne	.+2      	; 0xb94 <get_fat.isra.10+0x4a>
     b92:	69 c0       	rjmp	.+210    	; 0xc66 <get_fat.isra.10+0x11c>
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	09 f0       	breq	.+2      	; 0xb9a <get_fat.isra.10+0x50>
     b98:	89 c0       	rjmp	.+274    	; 0xcac <get_fat.isra.10+0x162>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     b9a:	ea 01       	movw	r28, r20
     b9c:	d6 95       	lsr	r29
     b9e:	c7 95       	ror	r28
     ba0:	cc 0d       	add	r28, r12
     ba2:	dd 1d       	adc	r29, r13
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     ba4:	ce 01       	movw	r24, r28
     ba6:	89 2f       	mov	r24, r25
     ba8:	99 27       	eor	r25, r25
     baa:	86 95       	lsr	r24
     bac:	47 8d       	ldd	r20, Z+31	; 0x1f
     bae:	50 a1       	ldd	r21, Z+32	; 0x20
     bb0:	61 a1       	ldd	r22, Z+33	; 0x21
     bb2:	72 a1       	ldd	r23, Z+34	; 0x22
     bb4:	48 0f       	add	r20, r24
     bb6:	59 1f       	adc	r21, r25
     bb8:	61 1d       	adc	r22, r1
     bba:	71 1d       	adc	r23, r1
     bbc:	cf 01       	movw	r24, r30
     bbe:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
     bc2:	88 23       	and	r24, r24
     bc4:	21 f0       	breq	.+8      	; 0xbce <get_fat.isra.10+0x84>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
     bc6:	6f ef       	ldi	r22, 0xFF	; 255
     bc8:	7f ef       	ldi	r23, 0xFF	; 255
     bca:	cb 01       	movw	r24, r22
     bcc:	73 c0       	rjmp	.+230    	; 0xcb4 <get_fat.isra.10+0x16a>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     bce:	5e 01       	movw	r10, r28
     bd0:	ff ef       	ldi	r31, 0xFF	; 255
     bd2:	af 1a       	sub	r10, r31
     bd4:	bf 0a       	sbc	r11, r31
     bd6:	d1 70       	andi	r29, 0x01	; 1
     bd8:	c0 0f       	add	r28, r16
     bda:	d1 1f       	adc	r29, r17
     bdc:	cf a5       	ldd	r28, Y+47	; 0x2f
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     bde:	c5 01       	movw	r24, r10
     be0:	89 2f       	mov	r24, r25
     be2:	99 27       	eor	r25, r25
     be4:	86 95       	lsr	r24
     be6:	f8 01       	movw	r30, r16
     be8:	47 8d       	ldd	r20, Z+31	; 0x1f
     bea:	50 a1       	ldd	r21, Z+32	; 0x20
     bec:	61 a1       	ldd	r22, Z+33	; 0x21
     bee:	72 a1       	ldd	r23, Z+34	; 0x22
     bf0:	48 0f       	add	r20, r24
     bf2:	59 1f       	adc	r21, r25
     bf4:	61 1d       	adc	r22, r1
     bf6:	71 1d       	adc	r23, r1
     bf8:	c8 01       	movw	r24, r16
     bfa:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
     bfe:	81 11       	cpse	r24, r1
     c00:	e2 cf       	rjmp	.-60     	; 0xbc6 <get_fat.isra.10+0x7c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
     c02:	f1 e0       	ldi	r31, 0x01	; 1
     c04:	bf 22       	and	r11, r31
     c06:	f8 01       	movw	r30, r16
     c08:	ea 0d       	add	r30, r10
     c0a:	fb 1d       	adc	r31, r11
     c0c:	87 a5       	ldd	r24, Z+47	; 0x2f
     c0e:	6c 2f       	mov	r22, r28
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	78 2b       	or	r23, r24
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
     c14:	c0 fe       	sbrs	r12, 0
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <get_fat.isra.10+0xda>
     c18:	54 e0       	ldi	r21, 0x04	; 4
     c1a:	76 95       	lsr	r23
     c1c:	67 95       	ror	r22
     c1e:	5a 95       	dec	r21
     c20:	e1 f7       	brne	.-8      	; 0xc1a <get_fat.isra.10+0xd0>
     c22:	1e c0       	rjmp	.+60     	; 0xc60 <get_fat.isra.10+0x116>
     c24:	7f 70       	andi	r23, 0x0F	; 15
     c26:	1c c0       	rjmp	.+56     	; 0xc60 <get_fat.isra.10+0x116>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
     c28:	77 27       	eor	r23, r23
     c2a:	6f 2d       	mov	r22, r15
     c2c:	5e 2d       	mov	r21, r14
     c2e:	4d 2d       	mov	r20, r13
     c30:	87 8d       	ldd	r24, Z+31	; 0x1f
     c32:	90 a1       	ldd	r25, Z+32	; 0x20
     c34:	a1 a1       	ldd	r26, Z+33	; 0x21
     c36:	b2 a1       	ldd	r27, Z+34	; 0x22
     c38:	48 0f       	add	r20, r24
     c3a:	59 1f       	adc	r21, r25
     c3c:	6a 1f       	adc	r22, r26
     c3e:	7b 1f       	adc	r23, r27
     c40:	cf 01       	movw	r24, r30
     c42:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
     c46:	81 11       	cpse	r24, r1
     c48:	be cf       	rjmp	.-132    	; 0xbc6 <get_fat.isra.10+0x7c>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     c4a:	cc 0c       	add	r12, r12
     c4c:	dd 1c       	adc	r13, r13
     c4e:	e8 94       	clt
     c50:	c0 f8       	bld	r12, 0
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	df 22       	and	r13, r31
     c56:	f8 01       	movw	r30, r16
     c58:	ec 0d       	add	r30, r12
     c5a:	fd 1d       	adc	r31, r13
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     c5c:	67 a5       	ldd	r22, Z+47	; 0x2f
     c5e:	70 a9       	ldd	r23, Z+48	; 0x30
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	27 c0       	rjmp	.+78     	; 0xcb4 <get_fat.isra.10+0x16a>
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
     c66:	87 8d       	ldd	r24, Z+31	; 0x1f
     c68:	90 a1       	ldd	r25, Z+32	; 0x20
     c6a:	a1 a1       	ldd	r26, Z+33	; 0x21
     c6c:	b2 a1       	ldd	r27, Z+34	; 0x22
     c6e:	27 e0       	ldi	r18, 0x07	; 7
     c70:	76 95       	lsr	r23
     c72:	67 95       	ror	r22
     c74:	57 95       	ror	r21
     c76:	47 95       	ror	r20
     c78:	2a 95       	dec	r18
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <get_fat.isra.10+0x126>
     c7c:	48 0f       	add	r20, r24
     c7e:	59 1f       	adc	r21, r25
     c80:	6a 1f       	adc	r22, r26
     c82:	7b 1f       	adc	r23, r27
     c84:	cf 01       	movw	r24, r30
     c86:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
     c8a:	81 11       	cpse	r24, r1
     c8c:	9c cf       	rjmp	.-200    	; 0xbc6 <get_fat.isra.10+0x7c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
     c8e:	01 5d       	subi	r16, 0xD1	; 209
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	cc 0c       	add	r12, r12
     c94:	dd 1c       	adc	r13, r13
     c96:	cc 0c       	add	r12, r12
     c98:	dd 1c       	adc	r13, r13
     c9a:	c6 01       	movw	r24, r12
     c9c:	8c 7f       	andi	r24, 0xFC	; 252
     c9e:	91 70       	andi	r25, 0x01	; 1
     ca0:	80 0f       	add	r24, r16
     ca2:	91 1f       	adc	r25, r17
     ca4:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
     ca8:	9f 70       	andi	r25, 0x0F	; 15
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <get_fat.isra.10+0x16a>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return val;
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	df 90       	pop	r13
     cc2:	cf 90       	pop	r12
     cc4:	bf 90       	pop	r11
     cc6:	af 90       	pop	r10
     cc8:	08 95       	ret

00000cca <dir_sdi.constprop.15>:

/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	8c 01       	movw	r16, r24
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
     cdc:	fc 01       	movw	r30, r24
     cde:	c0 81       	ld	r28, Z
     ce0:	d1 81       	ldd	r29, Z+1	; 0x01


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
     ce2:	16 86       	std	Z+14, r1	; 0x0e
     ce4:	17 86       	std	Z+15, r1	; 0x0f
     ce6:	10 8a       	std	Z+16, r1	; 0x10
     ce8:	11 8a       	std	Z+17, r1	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
     cea:	c6 80       	ldd	r12, Z+6	; 0x06
     cec:	d7 80       	ldd	r13, Z+7	; 0x07
     cee:	e0 84       	ldd	r14, Z+8	; 0x08
     cf0:	f1 84       	ldd	r15, Z+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
     cf2:	c1 14       	cp	r12, r1
     cf4:	d1 04       	cpc	r13, r1
     cf6:	e1 04       	cpc	r14, r1
     cf8:	f1 04       	cpc	r15, r1
     cfa:	e9 f4       	brne	.+58     	; 0xd36 <dir_sdi.constprop.15+0x6c>
     cfc:	88 81       	ld	r24, Y
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	40 f0       	brcs	.+16     	; 0xd12 <dir_sdi.constprop.15+0x48>
		clst = (DWORD)fs->dirbase;
     d02:	8b a1       	ldd	r24, Y+35	; 0x23
     d04:	9c a1       	ldd	r25, Y+36	; 0x24
     d06:	ad a1       	ldd	r26, Y+37	; 0x25
     d08:	be a1       	ldd	r27, Y+38	; 0x26
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	81 f4       	brne	.+32     	; 0xd32 <dir_sdi.constprop.15+0x68>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
     d12:	8f 81       	ldd	r24, Y+7	; 0x07
     d14:	98 85       	ldd	r25, Y+8	; 0x08
     d16:	89 2b       	or	r24, r25
     d18:	11 f4       	brne	.+4      	; 0xd1e <dir_sdi.constprop.15+0x54>
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	4c c0       	rjmp	.+152    	; 0xdb6 <dir_sdi.constprop.15+0xec>
		dp->sect = fs->dirbase;
     d1e:	8b a1       	ldd	r24, Y+35	; 0x23
     d20:	9c a1       	ldd	r25, Y+36	; 0x24
     d22:	ad a1       	ldd	r26, Y+37	; 0x25
     d24:	be a1       	ldd	r27, Y+38	; 0x26
     d26:	f8 01       	movw	r30, r16
     d28:	86 8b       	std	Z+22, r24	; 0x16
     d2a:	97 8b       	std	Z+23, r25	; 0x17
     d2c:	a0 8f       	std	Z+24, r26	; 0x18
     d2e:	b1 8f       	std	Z+25, r27	; 0x19
     d30:	2e c0       	rjmp	.+92     	; 0xd8e <dir_sdi.constprop.15+0xc4>
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
		clst = (DWORD)fs->dirbase;
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     d32:	6c 01       	movw	r12, r24
     d34:	7d 01       	movw	r14, r26
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	9a 85       	ldd	r25, Y+10	; 0x0a
		while (ofs >= csz) {				/* Follow cluster chain */
     d3a:	89 2b       	or	r24, r25
     d3c:	f1 f4       	brne	.+60     	; 0xd7a <dir_sdi.constprop.15+0xb0>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	f8 01       	movw	r30, r16
     d44:	80 81       	ld	r24, Z
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
     d4c:	6b 01       	movw	r12, r22
     d4e:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     d50:	6f 3f       	cpi	r22, 0xFF	; 255
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	8f 4f       	sbci	r24, 0xFF	; 255
     d56:	9f 4f       	sbci	r25, 0xFF	; 255
     d58:	69 f1       	breq	.+90     	; 0xdb4 <dir_sdi.constprop.15+0xea>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	c8 16       	cp	r12, r24
     d5e:	d1 04       	cpc	r13, r1
     d60:	e1 04       	cpc	r14, r1
     d62:	f1 04       	cpc	r15, r1
     d64:	d0 f2       	brcs	.-76     	; 0xd1a <dir_sdi.constprop.15+0x50>
     d66:	8b 89       	ldd	r24, Y+19	; 0x13
     d68:	9c 89       	ldd	r25, Y+20	; 0x14
     d6a:	ad 89       	ldd	r26, Y+21	; 0x15
     d6c:	be 89       	ldd	r27, Y+22	; 0x16
     d6e:	c8 16       	cp	r12, r24
     d70:	d9 06       	cpc	r13, r25
     d72:	ea 06       	cpc	r14, r26
     d74:	fb 06       	cpc	r15, r27
     d76:	18 f3       	brcs	.-58     	; 0xd3e <dir_sdi.constprop.15+0x74>
     d78:	d0 cf       	rjmp	.-96     	; 0xd1a <dir_sdi.constprop.15+0x50>
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
     d7a:	b7 01       	movw	r22, r14
     d7c:	a6 01       	movw	r20, r12
     d7e:	ce 01       	movw	r24, r28
     d80:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
     d84:	f8 01       	movw	r30, r16
     d86:	66 8b       	std	Z+22, r22	; 0x16
     d88:	77 8b       	std	Z+23, r23	; 0x17
     d8a:	80 8f       	std	Z+24, r24	; 0x18
     d8c:	91 8f       	std	Z+25, r25	; 0x19
	}
	dp->clust = clst;					/* Current cluster# */
     d8e:	f8 01       	movw	r30, r16
     d90:	c2 8a       	std	Z+18, r12	; 0x12
     d92:	d3 8a       	std	Z+19, r13	; 0x13
     d94:	e4 8a       	std	Z+20, r14	; 0x14
     d96:	f5 8a       	std	Z+21, r15	; 0x15
	if (dp->sect == 0) return FR_INT_ERR;
     d98:	86 89       	ldd	r24, Z+22	; 0x16
     d9a:	97 89       	ldd	r25, Z+23	; 0x17
     d9c:	a0 8d       	ldd	r26, Z+24	; 0x18
     d9e:	b1 8d       	ldd	r27, Z+25	; 0x19
     da0:	89 2b       	or	r24, r25
     da2:	8a 2b       	or	r24, r26
     da4:	8b 2b       	or	r24, r27
     da6:	09 f4       	brne	.+2      	; 0xdaa <dir_sdi.constprop.15+0xe0>
     da8:	b8 cf       	rjmp	.-144    	; 0xd1a <dir_sdi.constprop.15+0x50>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
     daa:	af 96       	adiw	r28, 0x2f	; 47
     dac:	d3 8f       	std	Z+27, r29	; 0x1b
     dae:	c2 8f       	std	Z+26, r28	; 0x1a

	return FR_OK;
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <dir_sdi.constprop.15+0xec>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     db4:	81 e0       	ldi	r24, 0x01	; 1
	if (dp->sect == 0) return FR_INT_ERR;
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

00000dc8 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	ec 01       	movw	r28, r24
     de2:	6a 01       	movw	r12, r20
     de4:	7b 01       	movw	r14, r22
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
     de6:	0e 94 ae 04 	call	0x95c	; 0x95c <sync_window>
     dea:	81 11       	cpse	r24, r1
     dec:	38 c0       	rjmp	.+112    	; 0xe5e <dir_clear+0x96>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
     dee:	b7 01       	movw	r22, r14
     df0:	a6 01       	movw	r20, r12
     df2:	ce 01       	movw	r24, r28
     df4:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
     df8:	4b 01       	movw	r8, r22
     dfa:	5c 01       	movw	r10, r24
	fs->winsect = sect;				/* Set window to top of the cluster */
     dfc:	6b a7       	std	Y+43, r22	; 0x2b
     dfe:	7c a7       	std	Y+44, r23	; 0x2c
     e00:	8d a7       	std	Y+45, r24	; 0x2d
     e02:	9e a7       	std	Y+46, r25	; 0x2e
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
     e04:	6e 01       	movw	r12, r28
     e06:	8f e2       	ldi	r24, 0x2F	; 47
     e08:	c8 0e       	add	r12, r24
     e0a:	d1 1c       	adc	r13, r1
     e0c:	f6 01       	movw	r30, r12
     e0e:	ce 01       	movw	r24, r28
     e10:	81 5d       	subi	r24, 0xD1	; 209
     e12:	9d 4f       	sbci	r25, 0xFD	; 253
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
     e14:	11 92       	st	Z+, r1
	} while (--cnt);
     e16:	e8 17       	cp	r30, r24
     e18:	f9 07       	cpc	r31, r25
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <dir_clear+0x4c>
     e1c:	e1 2c       	mov	r14, r1
     e1e:	f1 2c       	mov	r15, r1
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     e20:	89 85       	ldd	r24, Y+9	; 0x09
     e22:	9a 85       	ldd	r25, Y+10	; 0x0a
     e24:	e8 16       	cp	r14, r24
     e26:	f9 06       	cpc	r15, r25
     e28:	40 f0       	brcs	.+16     	; 0xe3a <dir_clear+0x72>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	29 85       	ldd	r18, Y+9	; 0x09
     e2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e30:	2e 15       	cp	r18, r14
     e32:	3f 05       	cpc	r19, r15
     e34:	a9 f4       	brne	.+42     	; 0xe60 <dir_clear+0x98>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	13 c0       	rjmp	.+38     	; 0xe60 <dir_clear+0x98>
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
     e3a:	01 e0       	ldi	r16, 0x01	; 1
     e3c:	10 e0       	ldi	r17, 0x00	; 0
     e3e:	a5 01       	movw	r20, r10
     e40:	94 01       	movw	r18, r8
     e42:	2e 0d       	add	r18, r14
     e44:	3f 1d       	adc	r19, r15
     e46:	41 1d       	adc	r20, r1
     e48:	51 1d       	adc	r21, r1
     e4a:	b6 01       	movw	r22, r12
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <disk_write>
     e52:	81 11       	cpse	r24, r1
     e54:	ea cf       	rjmp	.-44     	; 0xe2a <dir_clear+0x62>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	e8 1a       	sub	r14, r24
     e5a:	f8 0a       	sbc	r15, r24
     e5c:	e1 cf       	rjmp	.-62     	; 0xe20 <dir_clear+0x58>
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
     e5e:	81 e0       	ldi	r24, 0x01	; 1
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	08 95       	ret

00000e7a <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	a0 97       	sbiw	r28, 0x20	; 32
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	5b 01       	movw	r10, r22
     eac:	f4 2e       	mov	r15, r20
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
     eae:	db 01       	movw	r26, r22
     eb0:	1d 92       	st	X+, r1
     eb2:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     eb4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <get_ldnumber>
     eb8:	6c 01       	movw	r12, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     eba:	97 fd       	sbrc	r25, 7
     ebc:	4e c2       	rjmp	.+1180   	; 0x135a <mount_volume+0x4e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
     ebe:	fc 01       	movw	r30, r24
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	ee 51       	subi	r30, 0x1E	; 30
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	00 81       	ld	r16, Z
     eca:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
     ecc:	01 15       	cp	r16, r1
     ece:	11 05       	cpc	r17, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <mount_volume+0x5a>
     ed2:	45 c2       	rjmp	.+1162   	; 0x135e <mount_volume+0x4e4>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
     ed4:	f5 01       	movw	r30, r10
     ed6:	11 83       	std	Z+1, r17	; 0x01
     ed8:	00 83       	st	Z, r16

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
     eda:	ff 2d       	mov	r31, r15
     edc:	fe 7f       	andi	r31, 0xFE	; 254
     ede:	ff 2e       	mov	r15, r31
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
     ee0:	d8 01       	movw	r26, r16
     ee2:	8c 91       	ld	r24, X
     ee4:	88 23       	and	r24, r24
     ee6:	69 f0       	breq	.+26     	; 0xf02 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	8c 91       	ld	r24, X
     eec:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     ef0:	80 fd       	sbrc	r24, 0
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
     ef4:	ff 20       	and	r15, r15
     ef6:	09 f4       	brne	.+2      	; 0xefa <mount_volume+0x80>
     ef8:	34 c2       	rjmp	.+1128   	; 0x1362 <mount_volume+0x4e8>
     efa:	82 ff       	sbrs	r24, 2
     efc:	32 c2       	rjmp	.+1124   	; 0x1362 <mount_volume+0x4e8>
				return FR_WRITE_PROTECTED;
     efe:	8a e0       	ldi	r24, 0x0A	; 10
     f00:	3c c2       	rjmp	.+1144   	; 0x137a <mount_volume+0x500>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
     f02:	f8 01       	movw	r30, r16
     f04:	10 82       	st	Z, r1
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
     f06:	c1 82       	std	Z+1, r12	; 0x01
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
     f08:	8c 2d       	mov	r24, r12
     f0a:	0e 94 b7 1c 	call	0x396e	; 0x396e <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
     f0e:	80 fd       	sbrc	r24, 0
     f10:	2a c2       	rjmp	.+1108   	; 0x1366 <mount_volume+0x4ec>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
     f12:	ff 20       	and	r15, r15
     f14:	11 f0       	breq	.+4      	; 0xf1a <mount_volume+0xa0>
     f16:	82 fd       	sbrc	r24, 2
     f18:	f2 cf       	rjmp	.-28     	; 0xefe <mount_volume+0x84>
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
     f1a:	d8 01       	movw	r26, r16
     f1c:	13 96       	adiw	r26, 0x03	; 3
     f1e:	1c 92       	st	X, r1
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	dc 01       	movw	r26, r24
     f26:	f8 01       	movw	r30, r16
     f28:	83 a7       	std	Z+43, r24	; 0x2b
     f2a:	94 a7       	std	Z+44, r25	; 0x2c
     f2c:	a5 a7       	std	Z+45, r26	; 0x2d
     f2e:	b6 a7       	std	Z+46, r27	; 0x2e
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	ba 01       	movw	r22, r20
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 02 05 	call	0xa04	; 0xa04 <move_window.part.7>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     f3c:	81 11       	cpse	r24, r1
     f3e:	4e c0       	rjmp	.+156    	; 0xfdc <mount_volume+0x162>
     f40:	c8 01       	movw	r24, r16
     f42:	0e 94 48 05 	call	0xa90	; 0xa90 <check_fs.part.8>
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f0       	breq	.+2      	; 0xf4e <mount_volume+0xd4>
     f4c:	49 c0       	rjmp	.+146    	; 0xfe0 <mount_volume+0x166>
     f4e:	68 01       	movw	r12, r16
     f50:	fb e0       	ldi	r31, 0x0B	; 11
     f52:	cf 1a       	sub	r12, r31
     f54:	fe ef       	ldi	r31, 0xFE	; 254
     f56:	df 0a       	sbc	r13, r31
     f58:	9e 01       	movw	r18, r28
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	79 01       	movw	r14, r18
     f60:	48 01       	movw	r8, r16
     f62:	3b ec       	ldi	r19, 0xCB	; 203
     f64:	83 1a       	sub	r8, r19
     f66:	3d ef       	ldi	r19, 0xFD	; 253
     f68:	93 0a       	sbc	r9, r19
     f6a:	57 01       	movw	r10, r14
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
     f6c:	c6 01       	movw	r24, r12
     f6e:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
     f72:	d5 01       	movw	r26, r10
     f74:	6d 93       	st	X+, r22
     f76:	7d 93       	st	X+, r23
     f78:	8d 93       	st	X+, r24
     f7a:	9d 93       	st	X+, r25
     f7c:	5d 01       	movw	r10, r26
     f7e:	b0 e1       	ldi	r27, 0x10	; 16
     f80:	cb 0e       	add	r12, r27
     f82:	d1 1c       	adc	r13, r1
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
     f84:	c8 14       	cp	r12, r8
     f86:	d9 04       	cpc	r13, r9
     f88:	89 f7       	brne	.-30     	; 0xf6c <mount_volume+0xf2>
     f8a:	6e 01       	movw	r12, r28
     f8c:	e1 e1       	ldi	r30, 0x11	; 17
     f8e:	ce 0e       	add	r12, r30
     f90:	d1 1c       	adc	r13, r1
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
     f92:	88 24       	eor	r8, r8
     f94:	8a 94       	dec	r8
     f96:	98 2c       	mov	r9, r8
     f98:	54 01       	movw	r10, r8
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
     f9a:	d7 01       	movw	r26, r14
     f9c:	4d 91       	ld	r20, X+
     f9e:	5d 91       	ld	r21, X+
     fa0:	6d 91       	ld	r22, X+
     fa2:	7d 91       	ld	r23, X+
     fa4:	7d 01       	movw	r14, r26
     fa6:	41 15       	cp	r20, r1
     fa8:	51 05       	cpc	r21, r1
     faa:	61 05       	cpc	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <mount_volume+0x138>
     fb0:	de c1       	rjmp	.+956    	; 0x136e <mount_volume+0x4f4>
{
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
     fb2:	f8 01       	movw	r30, r16
     fb4:	13 82       	std	Z+3, r1	; 0x03
     fb6:	83 a6       	std	Z+43, r8	; 0x2b
     fb8:	94 a6       	std	Z+44, r9	; 0x2c
     fba:	a5 a6       	std	Z+45, r10	; 0x2d
     fbc:	b6 a6       	std	Z+46, r11	; 0x2e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
     fc4:	81 11       	cpse	r24, r1
     fc6:	d6 c1       	rjmp	.+940    	; 0x1374 <mount_volume+0x4fa>
     fc8:	c8 01       	movw	r24, r16
     fca:	0e 94 48 05 	call	0xa90	; 0xa90 <check_fs.part.8>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
	} while (part == 0 && fmt >= 2 && ++i < 4);
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	91 05       	cpc	r25, r1
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <mount_volume+0x166>
     fd4:	ce 14       	cp	r12, r14
     fd6:	df 04       	cpc	r13, r15
     fd8:	01 f7       	brne	.-64     	; 0xf9a <mount_volume+0x120>
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <mount_volume+0x166>
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
     fdc:	84 e0       	ldi	r24, 0x04	; 4
     fde:	90 e0       	ldi	r25, 0x00	; 0
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	91 05       	cpc	r25, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <mount_volume+0x16e>
     fe6:	c1 c1       	rjmp	.+898    	; 0x136a <mount_volume+0x4f0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
     fe8:	02 97       	sbiw	r24, 0x02	; 2
     fea:	10 f0       	brcs	.+4      	; 0xff0 <mount_volume+0x176>
     fec:	8d e0       	ldi	r24, 0x0D	; 13
     fee:	c5 c1       	rjmp	.+906    	; 0x137a <mount_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     ff0:	f8 01       	movw	r30, r16
     ff2:	82 ad       	ldd	r24, Z+58	; 0x3a
     ff4:	93 ad       	ldd	r25, Z+59	; 0x3b
     ff6:	81 15       	cp	r24, r1
     ff8:	92 40       	sbci	r25, 0x02	; 2
     ffa:	c1 f7       	brne	.-16     	; 0xfec <mount_volume+0x172>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     ffc:	f8 01       	movw	r30, r16
     ffe:	eb 5b       	subi	r30, 0xBB	; 187
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	40 80       	ld	r4, Z
    1004:	51 80       	ldd	r5, Z+1	; 0x01
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    1006:	41 14       	cp	r4, r1
    1008:	51 04       	cpc	r5, r1
    100a:	19 f0       	breq	.+6      	; 0x1012 <mount_volume+0x198>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    100c:	61 2c       	mov	r6, r1
    100e:	71 2c       	mov	r7, r1
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <mount_volume+0x1a6>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    1012:	c8 01       	movw	r24, r16
    1014:	8d 5a       	subi	r24, 0xAD	; 173
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    101c:	2b 01       	movw	r4, r22
    101e:	3c 01       	movw	r6, r24

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
	bsect = fs->winsect;					/* Volume location */
    1020:	d8 01       	movw	r26, r16
    1022:	9b 96       	adiw	r26, 0x2b	; 43
    1024:	2d 91       	ld	r18, X+
    1026:	3d 91       	ld	r19, X+
    1028:	4d 91       	ld	r20, X+
    102a:	5c 91       	ld	r21, X
    102c:	9e 97       	sbiw	r26, 0x2e	; 46
    102e:	29 8b       	std	Y+17, r18	; 0x11
    1030:	3a 8b       	std	Y+18, r19	; 0x12
    1032:	4b 8b       	std	Y+19, r20	; 0x13
    1034:	5c 8b       	std	Y+20, r21	; 0x14
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;
    1036:	f8 01       	movw	r30, r16
    1038:	47 8a       	std	Z+23, r4	; 0x17
    103a:	50 8e       	std	Z+24, r5	; 0x18
    103c:	61 8e       	std	Z+25, r6	; 0x19
    103e:	72 8e       	std	Z+26, r7	; 0x1a

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    1040:	a7 ac       	ldd	r10, Z+63	; 0x3f
    1042:	a2 82       	std	Z+2, r10	; 0x02
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	8a 0d       	add	r24, r10
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	80 f6       	brcc	.-96     	; 0xfec <mount_volume+0x172>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    104c:	b4 ac       	ldd	r11, Z+60	; 0x3c
    104e:	8b 2d       	mov	r24, r11
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	92 87       	std	Z+10, r25	; 0x0a
    1054:	81 87       	std	Z+9, r24	; 0x09
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	49 f2       	breq	.-110    	; 0xfec <mount_volume+0x172>
    105a:	9c 01       	movw	r18, r24
    105c:	21 50       	subi	r18, 0x01	; 1
    105e:	31 09       	sbc	r19, r1
    1060:	82 23       	and	r24, r18
    1062:	93 23       	and	r25, r19
    1064:	89 2b       	or	r24, r25
    1066:	11 f6       	brne	.-124    	; 0xfec <mount_volume+0x172>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1068:	e0 5c       	subi	r30, 0xC0	; 192
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 80       	ld	r8, Z
    106e:	91 80       	ldd	r9, Z+1	; 0x01
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1070:	18 96       	adiw	r26, 0x08	; 8
    1072:	9c 92       	st	X, r9
    1074:	8e 92       	st	-X, r8
    1076:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    1078:	c4 01       	movw	r24, r8
    107a:	8f 70       	andi	r24, 0x0F	; 15
    107c:	99 27       	eor	r25, r25
    107e:	89 2b       	or	r24, r25
    1080:	09 f0       	breq	.+2      	; 0x1084 <mount_volume+0x20a>
    1082:	b4 cf       	rjmp	.-152    	; 0xfec <mount_volume+0x172>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1084:	32 96       	adiw	r30, 0x02	; 2
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    108a:	6c 01       	movw	r12, r24
    108c:	e1 2c       	mov	r14, r1
    108e:	f1 2c       	mov	r15, r1
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    1090:	89 2b       	or	r24, r25
    1092:	39 f4       	brne	.+14     	; 0x10a2 <mount_volume+0x228>
    1094:	c8 01       	movw	r24, r16
    1096:	81 5b       	subi	r24, 0xB1	; 177
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    109e:	6b 01       	movw	r12, r22
    10a0:	7c 01       	movw	r14, r24
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    10a2:	d8 01       	movw	r26, r16
    10a4:	dd 96       	adiw	r26, 0x3d	; 61
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	de 97       	sbiw	r26, 0x3e	; 62

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    10ac:	30 97       	sbiw	r30, 0x00	; 0
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <mount_volume+0x238>
    10b0:	9d cf       	rjmp	.-198    	; 0xfec <mount_volume+0x172>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    10b2:	aa 2d       	mov	r26, r10
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	a3 01       	movw	r20, r6
    10b8:	92 01       	movw	r18, r4
    10ba:	0e 94 57 25 	call	0x4aae	; 0x4aae <__muluhisi3>
    10be:	69 8f       	std	Y+25, r22	; 0x19
    10c0:	7a 8f       	std	Y+26, r23	; 0x1a
    10c2:	8b 8f       	std	Y+27, r24	; 0x1b
    10c4:	9c 8f       	std	Y+28, r25	; 0x1c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    10c6:	9f 01       	movw	r18, r30
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	2d 8f       	std	Y+29, r18	; 0x1d
    10ce:	3e 8f       	std	Y+30, r19	; 0x1e
    10d0:	4f 8f       	std	Y+31, r20	; 0x1f
    10d2:	58 a3       	std	Y+32, r21	; 0x20
    10d4:	c4 01       	movw	r24, r8
    10d6:	f4 e0       	ldi	r31, 0x04	; 4
    10d8:	96 95       	lsr	r25
    10da:	87 95       	ror	r24
    10dc:	fa 95       	dec	r31
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <mount_volume+0x25e>
    10e0:	28 0f       	add	r18, r24
    10e2:	39 1f       	adc	r19, r25
    10e4:	41 1d       	adc	r20, r1
    10e6:	51 1d       	adc	r21, r1
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	29 8d       	ldd	r18, Y+25	; 0x19
    10ee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    10f0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    10f2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    10f4:	28 0f       	add	r18, r24
    10f6:	39 1f       	adc	r19, r25
    10f8:	4a 1f       	adc	r20, r26
    10fa:	5b 1f       	adc	r21, r27
    10fc:	2d 8b       	std	Y+21, r18	; 0x15
    10fe:	3e 8b       	std	Y+22, r19	; 0x16
    1100:	4f 8b       	std	Y+23, r20	; 0x17
    1102:	58 8f       	std	Y+24, r21	; 0x18
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    1104:	c2 16       	cp	r12, r18
    1106:	d3 06       	cpc	r13, r19
    1108:	e4 06       	cpc	r14, r20
    110a:	f5 06       	cpc	r15, r21
    110c:	08 f4       	brcc	.+2      	; 0x1110 <mount_volume+0x296>
    110e:	6e cf       	rjmp	.-292    	; 0xfec <mount_volume+0x172>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    1110:	c7 01       	movw	r24, r14
    1112:	b6 01       	movw	r22, r12
    1114:	62 1b       	sub	r22, r18
    1116:	73 0b       	sbc	r23, r19
    1118:	84 0b       	sbc	r24, r20
    111a:	95 0b       	sbc	r25, r21
    111c:	2b 2d       	mov	r18, r11
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1128:	da 01       	movw	r26, r20
    112a:	c9 01       	movw	r24, r18
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	a1 09       	sbc	r26, r1
    1130:	b1 09       	sbc	r27, r1
    1132:	85 3f       	cpi	r24, 0xF5	; 245
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	af 4f       	sbci	r26, 0xFF	; 255
    1138:	bf 40       	sbci	r27, 0x0F	; 15
    113a:	08 f0       	brcs	.+2      	; 0x113e <mount_volume+0x2c4>
    113c:	57 cf       	rjmp	.-338    	; 0xfec <mount_volume+0x172>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    113e:	26 3f       	cpi	r18, 0xF6	; 246
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	38 07       	cpc	r19, r24
    1144:	41 05       	cpc	r20, r1
    1146:	51 05       	cpc	r21, r1
    1148:	50 f4       	brcc	.+20     	; 0x115e <mount_volume+0x2e4>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    114a:	26 3f       	cpi	r18, 0xF6	; 246
    114c:	9f e0       	ldi	r25, 0x0F	; 15
    114e:	39 07       	cpc	r19, r25
    1150:	41 05       	cpc	r20, r1
    1152:	51 05       	cpc	r21, r1
    1154:	40 f4       	brcc	.+16     	; 0x1166 <mount_volume+0x2ec>
    1156:	aa 24       	eor	r10, r10
    1158:	a3 94       	inc	r10
    115a:	b1 2c       	mov	r11, r1
    115c:	07 c0       	rjmp	.+14     	; 0x116c <mount_volume+0x2f2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    115e:	73 e0       	ldi	r23, 0x03	; 3
    1160:	a7 2e       	mov	r10, r23
    1162:	b1 2c       	mov	r11, r1
    1164:	03 c0       	rjmp	.+6      	; 0x116c <mount_volume+0x2f2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1166:	62 e0       	ldi	r22, 0x02	; 2
    1168:	a6 2e       	mov	r10, r22
    116a:	b1 2c       	mov	r11, r1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
		if (fmt == 0) return FR_NO_FILESYSTEM;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    116c:	69 01       	movw	r12, r18
    116e:	7a 01       	movw	r14, r20
    1170:	a2 e0       	ldi	r26, 0x02	; 2
    1172:	ca 0e       	add	r12, r26
    1174:	d1 1c       	adc	r13, r1
    1176:	e1 1c       	adc	r14, r1
    1178:	f1 1c       	adc	r15, r1
    117a:	f8 01       	movw	r30, r16
    117c:	c3 8a       	std	Z+19, r12	; 0x13
    117e:	d4 8a       	std	Z+20, r13	; 0x14
    1180:	e5 8a       	std	Z+21, r14	; 0x15
    1182:	f6 8a       	std	Z+22, r15	; 0x16
		fs->volbase = bsect;							/* Volume start sector */
    1184:	29 89       	ldd	r18, Y+17	; 0x11
    1186:	3a 89       	ldd	r19, Y+18	; 0x12
    1188:	4b 89       	ldd	r20, Y+19	; 0x13
    118a:	5c 89       	ldd	r21, Y+20	; 0x14
    118c:	23 8f       	std	Z+27, r18	; 0x1b
    118e:	34 8f       	std	Z+28, r19	; 0x1c
    1190:	45 8f       	std	Z+29, r20	; 0x1d
    1192:	56 8f       	std	Z+30, r21	; 0x1e
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    1194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1196:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1198:	af 8d       	ldd	r26, Y+31	; 0x1f
    119a:	b8 a1       	ldd	r27, Y+32	; 0x20
    119c:	28 0f       	add	r18, r24
    119e:	39 1f       	adc	r19, r25
    11a0:	4a 1f       	adc	r20, r26
    11a2:	5b 1f       	adc	r21, r27
    11a4:	2d 8f       	std	Y+29, r18	; 0x1d
    11a6:	3e 8f       	std	Y+30, r19	; 0x1e
    11a8:	4f 8f       	std	Y+31, r20	; 0x1f
    11aa:	58 a3       	std	Y+32, r21	; 0x20
    11ac:	27 8f       	std	Z+31, r18	; 0x1f
    11ae:	30 a3       	std	Z+32, r19	; 0x20
    11b0:	41 a3       	std	Z+33, r20	; 0x21
    11b2:	52 a3       	std	Z+34, r21	; 0x22
		fs->database = bsect + sysect;					/* Data start sector */
    11b4:	49 89       	ldd	r20, Y+17	; 0x11
    11b6:	5a 89       	ldd	r21, Y+18	; 0x12
    11b8:	6b 89       	ldd	r22, Y+19	; 0x13
    11ba:	7c 89       	ldd	r23, Y+20	; 0x14
    11bc:	8d 89       	ldd	r24, Y+21	; 0x15
    11be:	9e 89       	ldd	r25, Y+22	; 0x16
    11c0:	af 89       	ldd	r26, Y+23	; 0x17
    11c2:	b8 8d       	ldd	r27, Y+24	; 0x18
    11c4:	48 0f       	add	r20, r24
    11c6:	59 1f       	adc	r21, r25
    11c8:	6a 1f       	adc	r22, r26
    11ca:	7b 1f       	adc	r23, r27
    11cc:	47 a3       	std	Z+39, r20	; 0x27
    11ce:	50 a7       	std	Z+40, r21	; 0x28
    11d0:	61 a7       	std	Z+41, r22	; 0x29
    11d2:	72 a7       	std	Z+42, r23	; 0x2a
		if (fmt == FS_FAT32) {
    11d4:	b3 e0       	ldi	r27, 0x03	; 3
    11d6:	ab 16       	cp	r10, r27
    11d8:	b1 04       	cpc	r11, r1
    11da:	e1 f4       	brne	.+56     	; 0x1214 <mount_volume+0x39a>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    11dc:	e7 5a       	subi	r30, 0xA7	; 167
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
		fs->volbase = bsect;							/* Volume start sector */
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
		fs->database = bsect + sysect;					/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	89 2b       	or	r24, r25
    11e6:	09 f0       	breq	.+2      	; 0x11ea <mount_volume+0x370>
    11e8:	01 cf       	rjmp	.-510    	; 0xfec <mount_volume+0x172>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    11ea:	89 28       	or	r8, r9
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <mount_volume+0x376>
    11ee:	fe ce       	rjmp	.-516    	; 0xfec <mount_volume+0x172>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    11f0:	c8 01       	movw	r24, r16
    11f2:	85 5a       	subi	r24, 0xA5	; 165
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    11fa:	f8 01       	movw	r30, r16
    11fc:	63 a3       	std	Z+35, r22	; 0x23
    11fe:	74 a3       	std	Z+36, r23	; 0x24
    1200:	85 a3       	std	Z+37, r24	; 0x25
    1202:	96 a3       	std	Z+38, r25	; 0x26
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    1204:	42 e0       	ldi	r20, 0x02	; 2
    1206:	cc 0c       	add	r12, r12
    1208:	dd 1c       	adc	r13, r13
    120a:	ee 1c       	adc	r14, r14
    120c:	ff 1c       	adc	r15, r15
    120e:	4a 95       	dec	r20
    1210:	d1 f7       	brne	.-12     	; 0x1206 <mount_volume+0x38c>
    1212:	32 c0       	rjmp	.+100    	; 0x1278 <mount_volume+0x3fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1214:	89 28       	or	r8, r9
    1216:	09 f4       	brne	.+2      	; 0x121a <mount_volume+0x3a0>
    1218:	e9 ce       	rjmp	.-558    	; 0xfec <mount_volume+0x172>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    121a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    121e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1220:	b8 a1       	ldd	r27, Y+32	; 0x20
    1222:	29 8d       	ldd	r18, Y+25	; 0x19
    1224:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1226:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1228:	5c 8d       	ldd	r21, Y+28	; 0x1c
    122a:	82 0f       	add	r24, r18
    122c:	93 1f       	adc	r25, r19
    122e:	a4 1f       	adc	r26, r20
    1230:	b5 1f       	adc	r27, r21
    1232:	f8 01       	movw	r30, r16
    1234:	83 a3       	std	Z+35, r24	; 0x23
    1236:	94 a3       	std	Z+36, r25	; 0x24
    1238:	a5 a3       	std	Z+37, r26	; 0x25
    123a:	b6 a3       	std	Z+38, r27	; 0x26
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    123c:	f2 e0       	ldi	r31, 0x02	; 2
    123e:	af 16       	cp	r10, r31
    1240:	b1 04       	cpc	r11, r1
    1242:	29 f4       	brne	.+10     	; 0x124e <mount_volume+0x3d4>
    1244:	cc 0c       	add	r12, r12
    1246:	dd 1c       	adc	r13, r13
    1248:	ee 1c       	adc	r14, r14
    124a:	ff 1c       	adc	r15, r15
    124c:	15 c0       	rjmp	.+42     	; 0x1278 <mount_volume+0x3fe>
    124e:	a3 e0       	ldi	r26, 0x03	; 3
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	a7 01       	movw	r20, r14
    1254:	96 01       	movw	r18, r12
    1256:	0e 94 57 25 	call	0x4aae	; 0x4aae <__muluhisi3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	b6 95       	lsr	r27
    1260:	a7 95       	ror	r26
    1262:	97 95       	ror	r25
    1264:	87 95       	ror	r24
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	c2 22       	and	r12, r18
    126a:	dd 24       	eor	r13, r13
    126c:	ee 24       	eor	r14, r14
    126e:	ff 24       	eor	r15, r15
    1270:	c8 0e       	add	r12, r24
    1272:	d9 1e       	adc	r13, r25
    1274:	ea 1e       	adc	r14, r26
    1276:	fb 1e       	adc	r15, r27
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	c3 0e       	add	r12, r19
    127c:	31 e0       	ldi	r19, 0x01	; 1
    127e:	d3 1e       	adc	r13, r19
    1280:	e1 1c       	adc	r14, r1
    1282:	f1 1c       	adc	r15, r1
    1284:	89 e0       	ldi	r24, 0x09	; 9
    1286:	f6 94       	lsr	r15
    1288:	e7 94       	ror	r14
    128a:	d7 94       	ror	r13
    128c:	c7 94       	ror	r12
    128e:	8a 95       	dec	r24
    1290:	d1 f7       	brne	.-12     	; 0x1286 <mount_volume+0x40c>
    1292:	4c 14       	cp	r4, r12
    1294:	5d 04       	cpc	r5, r13
    1296:	6e 04       	cpc	r6, r14
    1298:	7f 04       	cpc	r7, r15
    129a:	08 f4       	brcc	.+2      	; 0x129e <mount_volume+0x424>
    129c:	a7 ce       	rjmp	.-690    	; 0xfec <mount_volume+0x172>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	dc 01       	movw	r26, r24
    12a4:	f8 01       	movw	r30, r16
    12a6:	87 87       	std	Z+15, r24	; 0x0f
    12a8:	90 8b       	std	Z+16, r25	; 0x10
    12aa:	a1 8b       	std	Z+17, r26	; 0x11
    12ac:	b2 8b       	std	Z+18, r27	; 0x12
    12ae:	83 87       	std	Z+11, r24	; 0x0b
    12b0:	94 87       	std	Z+12, r25	; 0x0c
    12b2:	a5 87       	std	Z+13, r26	; 0x0d
    12b4:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
    12b6:	80 e8       	ldi	r24, 0x80	; 128
    12b8:	84 83       	std	Z+4, r24	; 0x04
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    12ba:	f3 e0       	ldi	r31, 0x03	; 3
    12bc:	af 16       	cp	r10, r31
    12be:	b1 04       	cpc	r11, r1
    12c0:	f1 f5       	brne	.+124    	; 0x133e <mount_volume+0x4c4>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    12c2:	f8 01       	movw	r30, r16
    12c4:	e1 5a       	subi	r30, 0xA1	; 161
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	b9 f5       	brne	.+110    	; 0x133e <mount_volume+0x4c4>
			&& move_window(fs, bsect + 1) == FR_OK)
    12d0:	49 89       	ldd	r20, Y+17	; 0x11
    12d2:	5a 89       	ldd	r21, Y+18	; 0x12
    12d4:	6b 89       	ldd	r22, Y+19	; 0x13
    12d6:	7c 89       	ldd	r23, Y+20	; 0x14
    12d8:	4f 5f       	subi	r20, 0xFF	; 255
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	6f 4f       	sbci	r22, 0xFF	; 255
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	c8 01       	movw	r24, r16
    12e2:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    12e6:	81 11       	cpse	r24, r1
    12e8:	2a c0       	rjmp	.+84     	; 0x133e <mount_volume+0x4c4>
		{
			fs->fsi_flag = 0;
    12ea:	d8 01       	movw	r26, r16
    12ec:	14 96       	adiw	r26, 0x04	; 4
    12ee:	1c 92       	st	X, r1
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    12f0:	f8 01       	movw	r30, r16
    12f2:	e3 5d       	subi	r30, 0xD3	; 211
    12f4:	fd 4f       	sbci	r31, 0xFD	; 253
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	85 35       	cpi	r24, 0x55	; 85
    12fc:	9a 4a       	sbci	r25, 0xAA	; 170
    12fe:	f9 f4       	brne	.+62     	; 0x133e <mount_volume+0x4c4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    1300:	c8 01       	movw	r24, r16
    1302:	8f 96       	adiw	r24, 0x2f	; 47
    1304:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    1308:	62 35       	cpi	r22, 0x52	; 82
    130a:	72 45       	sbci	r23, 0x52	; 82
    130c:	81 46       	sbci	r24, 0x61	; 97
    130e:	91 44       	sbci	r25, 0x41	; 65
    1310:	b1 f4       	brne	.+44     	; 0x133e <mount_volume+0x4c4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    1312:	c8 01       	movw	r24, r16
    1314:	8d 5e       	subi	r24, 0xED	; 237
    1316:	9d 4f       	sbci	r25, 0xFD	; 253
    1318:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    131c:	62 37       	cpi	r22, 0x72	; 114
    131e:	72 47       	sbci	r23, 0x72	; 114
    1320:	81 44       	sbci	r24, 0x41	; 65
    1322:	91 46       	sbci	r25, 0x61	; 97
    1324:	61 f4       	brne	.+24     	; 0x133e <mount_volume+0x4c4>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    1326:	c8 01       	movw	r24, r16
    1328:	85 5e       	subi	r24, 0xE5	; 229
    132a:	9d 4f       	sbci	r25, 0xFD	; 253
    132c:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    1330:	d8 01       	movw	r26, r16
    1332:	1b 96       	adiw	r26, 0x0b	; 11
    1334:	6d 93       	st	X+, r22
    1336:	7d 93       	st	X+, r23
    1338:	8d 93       	st	X+, r24
    133a:	9c 93       	st	X, r25
    133c:	1e 97       	sbiw	r26, 0x0e	; 14
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
    133e:	f8 01       	movw	r30, r16
    1340:	a0 82       	st	Z, r10
	fs->id = ++Fsid;		/* Volume mount ID */
    1342:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <Fsid>
    1346:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <Fsid+0x1>
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <Fsid+0x1>
    1350:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <Fsid>
    1354:	96 83       	std	Z+6, r25	; 0x06
    1356:	85 83       	std	Z+5, r24	; 0x05
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <mount_volume+0x4e8>


	/* Get logical drive number */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    135a:	8b e0       	ldi	r24, 0x0B	; 11
    135c:	0e c0       	rjmp	.+28     	; 0x137a <mount_volume+0x500>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    135e:	8c e0       	ldi	r24, 0x0C	; 12
    1360:	0c c0       	rjmp	.+24     	; 0x137a <mount_volume+0x500>
		stat = disk_status(fs->pdrv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is already valid */
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0a c0       	rjmp	.+20     	; 0x137a <mount_volume+0x500>

	fs->fs_type = 0;					/* Clear the filesystem object */
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	08 c0       	rjmp	.+16     	; 0x137a <mount_volume+0x500>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	06 c0       	rjmp	.+12     	; 0x137a <mount_volume+0x500>
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	30 ce       	rjmp	.-928    	; 0xfd4 <mount_volume+0x15a>
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    1374:	84 e0       	ldi	r24, 0x04	; 4
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	2d ce       	rjmp	.-934    	; 0xfd4 <mount_volume+0x15a>
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    137a:	a0 96       	adiw	r28, 0x20	; 32
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	8f 90       	pop	r8
    139e:	7f 90       	pop	r7
    13a0:	6f 90       	pop	r6
    13a2:	5f 90       	pop	r5
    13a4:	4f 90       	pop	r4
    13a6:	08 95       	ret

000013a8 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
    13a8:	2f 92       	push	r2
    13aa:	3f 92       	push	r3
    13ac:	4f 92       	push	r4
    13ae:	5f 92       	push	r5
    13b0:	6f 92       	push	r6
    13b2:	7f 92       	push	r7
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <put_fat+0x26>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <put_fat+0x28>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    13d4:	42 30       	cpi	r20, 0x02	; 2
    13d6:	51 05       	cpc	r21, r1
    13d8:	61 05       	cpc	r22, r1
    13da:	71 05       	cpc	r23, r1
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <put_fat+0x38>
    13de:	e6 c0       	rjmp	.+460    	; 0x15ac <put_fat+0x204>
    13e0:	fc 01       	movw	r30, r24
    13e2:	c3 88       	ldd	r12, Z+19	; 0x13
    13e4:	d4 88       	ldd	r13, Z+20	; 0x14
    13e6:	e5 88       	ldd	r14, Z+21	; 0x15
    13e8:	f6 88       	ldd	r15, Z+22	; 0x16
    13ea:	4c 15       	cp	r20, r12
    13ec:	5d 05       	cpc	r21, r13
    13ee:	6e 05       	cpc	r22, r14
    13f0:	7f 05       	cpc	r23, r15
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <put_fat+0x4e>
    13f4:	db c0       	rjmp	.+438    	; 0x15ac <put_fat+0x204>
    13f6:	28 01       	movw	r4, r16
    13f8:	39 01       	movw	r6, r18
    13fa:	6a 01       	movw	r12, r20
    13fc:	7b 01       	movw	r14, r22
    13fe:	9c 83       	std	Y+4, r25	; 0x04
    1400:	8b 83       	std	Y+3, r24	; 0x03
		switch (fs->fs_type) {
    1402:	80 81       	ld	r24, Z
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	09 f4       	brne	.+2      	; 0x140a <put_fat+0x62>
    1408:	71 c0       	rjmp	.+226    	; 0x14ec <put_fat+0x144>
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	09 f4       	brne	.+2      	; 0x1410 <put_fat+0x68>
    140e:	90 c0       	rjmp	.+288    	; 0x1530 <put_fat+0x188>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f0       	breq	.+2      	; 0x1416 <put_fat+0x6e>
    1414:	cb c0       	rjmp	.+406    	; 0x15ac <put_fat+0x204>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    1416:	5a 01       	movw	r10, r20
    1418:	b6 94       	lsr	r11
    141a:	a7 94       	ror	r10
    141c:	a4 0e       	add	r10, r20
    141e:	b5 1e       	adc	r11, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1420:	c5 01       	movw	r24, r10
    1422:	89 2f       	mov	r24, r25
    1424:	99 27       	eor	r25, r25
    1426:	86 95       	lsr	r24
    1428:	47 8d       	ldd	r20, Z+31	; 0x1f
    142a:	50 a1       	ldd	r21, Z+32	; 0x20
    142c:	61 a1       	ldd	r22, Z+33	; 0x21
    142e:	72 a1       	ldd	r23, Z+34	; 0x22
    1430:	48 0f       	add	r20, r24
    1432:	59 1f       	adc	r21, r25
    1434:	61 1d       	adc	r22, r1
    1436:	71 1d       	adc	r23, r1
    1438:	cf 01       	movw	r24, r30
    143a:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    143e:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1440:	81 11       	cpse	r24, r1
    1442:	b5 c0       	rjmp	.+362    	; 0x15ae <put_fat+0x206>
			p = fs->win + bc++ % SS(fs);
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	21 5d       	subi	r18, 0xD1	; 209
    144a:	3f 4f       	sbci	r19, 0xFF	; 255
    144c:	3a 83       	std	Y+2, r19	; 0x02
    144e:	29 83       	std	Y+1, r18	; 0x01
    1450:	15 01       	movw	r2, r10
    1452:	3f ef       	ldi	r19, 0xFF	; 255
    1454:	23 1a       	sub	r2, r19
    1456:	33 0a       	sbc	r3, r19
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	b8 22       	and	r11, r24
    145c:	e9 81       	ldd	r30, Y+1	; 0x01
    145e:	fa 81       	ldd	r31, Y+2	; 0x02
    1460:	ea 0d       	add	r30, r10
    1462:	fb 1d       	adc	r31, r11
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
    1464:	46 01       	movw	r8, r12
    1466:	57 01       	movw	r10, r14
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	89 22       	and	r8, r25
    146c:	99 24       	eor	r9, r9
    146e:	aa 24       	eor	r10, r10
    1470:	bb 24       	eor	r11, r11
    1472:	c0 fe       	sbrs	r12, 0
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <put_fat+0xe0>
    1476:	80 81       	ld	r24, Z
    1478:	28 2f       	mov	r18, r24
    147a:	2f 70       	andi	r18, 0x0F	; 15
    147c:	30 e1       	ldi	r19, 0x10	; 16
    147e:	43 9e       	mul	r4, r19
    1480:	c0 01       	movw	r24, r0
    1482:	11 24       	eor	r1, r1
    1484:	82 2b       	or	r24, r18
    1486:	01 c0       	rjmp	.+2      	; 0x148a <put_fat+0xe2>
    1488:	84 2d       	mov	r24, r4
    148a:	80 83       	st	Z, r24
			fs->wflag = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	eb 81       	ldd	r30, Y+3	; 0x03
    1490:	fc 81       	ldd	r31, Y+4	; 0x04
    1492:	83 83       	std	Z+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1494:	47 8d       	ldd	r20, Z+31	; 0x1f
    1496:	50 a1       	ldd	r21, Z+32	; 0x20
    1498:	61 a1       	ldd	r22, Z+33	; 0x21
    149a:	72 a1       	ldd	r23, Z+34	; 0x22
    149c:	c1 01       	movw	r24, r2
    149e:	89 2f       	mov	r24, r25
    14a0:	99 27       	eor	r25, r25
    14a2:	86 95       	lsr	r24
    14a4:	48 0f       	add	r20, r24
    14a6:	59 1f       	adc	r21, r25
    14a8:	61 1d       	adc	r22, r1
    14aa:	71 1d       	adc	r23, r1
    14ac:	cf 01       	movw	r24, r30
    14ae:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    14b2:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    14b4:	81 11       	cpse	r24, r1
    14b6:	7b c0       	rjmp	.+246    	; 0x15ae <put_fat+0x206>
			p = fs->win + bc % SS(fs);
    14b8:	f1 e0       	ldi	r31, 0x01	; 1
    14ba:	3f 22       	and	r3, r31
    14bc:	e9 81       	ldd	r30, Y+1	; 0x01
    14be:	fa 81       	ldd	r31, Y+2	; 0x02
    14c0:	e2 0d       	add	r30, r2
    14c2:	f3 1d       	adc	r31, r3
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    14c4:	89 28       	or	r8, r9
    14c6:	8a 28       	or	r8, r10
    14c8:	8b 28       	or	r8, r11
    14ca:	41 f0       	breq	.+16     	; 0x14dc <put_fat+0x134>
    14cc:	54 e0       	ldi	r21, 0x04	; 4
    14ce:	76 94       	lsr	r7
    14d0:	67 94       	ror	r6
    14d2:	57 94       	ror	r5
    14d4:	47 94       	ror	r4
    14d6:	5a 95       	dec	r21
    14d8:	d1 f7       	brne	.-12     	; 0x14ce <put_fat+0x126>
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <put_fat+0x140>
    14dc:	00 81       	ld	r16, Z
    14de:	00 7f       	andi	r16, 0xF0	; 240
    14e0:	85 2d       	mov	r24, r5
    14e2:	8f 70       	andi	r24, 0x0F	; 15
    14e4:	40 2e       	mov	r4, r16
    14e6:	48 2a       	or	r4, r24
    14e8:	40 82       	st	Z, r4
    14ea:	5b c0       	rjmp	.+182    	; 0x15a2 <put_fat+0x1fa>
			fs->wflag = 1;
			break;

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    14ec:	77 27       	eor	r23, r23
    14ee:	6f 2d       	mov	r22, r15
    14f0:	5e 2d       	mov	r21, r14
    14f2:	4d 2d       	mov	r20, r13
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	87 8d       	ldd	r24, Z+31	; 0x1f
    14fa:	90 a1       	ldd	r25, Z+32	; 0x20
    14fc:	a1 a1       	ldd	r26, Z+33	; 0x21
    14fe:	b2 a1       	ldd	r27, Z+34	; 0x22
    1500:	48 0f       	add	r20, r24
    1502:	59 1f       	adc	r21, r25
    1504:	6a 1f       	adc	r22, r26
    1506:	7b 1f       	adc	r23, r27
    1508:	cf 01       	movw	r24, r30
    150a:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    150e:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1510:	81 11       	cpse	r24, r1
    1512:	4d c0       	rjmp	.+154    	; 0x15ae <put_fat+0x206>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    1514:	eb 81       	ldd	r30, Y+3	; 0x03
    1516:	fc 81       	ldd	r31, Y+4	; 0x04
    1518:	bf 96       	adiw	r30, 0x2f	; 47
    151a:	cc 0c       	add	r12, r12
    151c:	dd 1c       	adc	r13, r13
    151e:	e8 94       	clt
    1520:	c0 f8       	bld	r12, 0
    1522:	21 e0       	ldi	r18, 0x01	; 1
    1524:	d2 22       	and	r13, r18
    1526:	ec 0d       	add	r30, r12
    1528:	fd 1d       	adc	r31, r13
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    152a:	40 82       	st	Z, r4
	*ptr++ = (BYTE)val;
    152c:	51 82       	std	Z+1, r5	; 0x01
    152e:	39 c0       	rjmp	.+114    	; 0x15a2 <put_fat+0x1fa>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1530:	eb 81       	ldd	r30, Y+3	; 0x03
    1532:	fc 81       	ldd	r31, Y+4	; 0x04
    1534:	87 8d       	ldd	r24, Z+31	; 0x1f
    1536:	90 a1       	ldd	r25, Z+32	; 0x20
    1538:	a1 a1       	ldd	r26, Z+33	; 0x21
    153a:	b2 a1       	ldd	r27, Z+34	; 0x22
    153c:	27 e0       	ldi	r18, 0x07	; 7
    153e:	76 95       	lsr	r23
    1540:	67 95       	ror	r22
    1542:	57 95       	ror	r21
    1544:	47 95       	ror	r20
    1546:	2a 95       	dec	r18
    1548:	d1 f7       	brne	.-12     	; 0x153e <put_fat+0x196>
    154a:	48 0f       	add	r20, r24
    154c:	59 1f       	adc	r21, r25
    154e:	6a 1f       	adc	r22, r26
    1550:	7b 1f       	adc	r23, r27
    1552:	cf 01       	movw	r24, r30
    1554:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    1558:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    155a:	81 11       	cpse	r24, r1
    155c:	28 c0       	rjmp	.+80     	; 0x15ae <put_fat+0x206>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    155e:	4b 81       	ldd	r20, Y+3	; 0x03
    1560:	5c 81       	ldd	r21, Y+4	; 0x04
    1562:	41 5d       	subi	r20, 0xD1	; 209
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	cc 0c       	add	r12, r12
    1568:	dd 1c       	adc	r13, r13
    156a:	cc 0c       	add	r12, r12
    156c:	dd 1c       	adc	r13, r13
    156e:	fc ef       	ldi	r31, 0xFC	; 252
    1570:	cf 22       	and	r12, r31
    1572:	f1 e0       	ldi	r31, 0x01	; 1
    1574:	df 22       	and	r13, r31
    1576:	c4 0e       	add	r12, r20
    1578:	d5 1e       	adc	r13, r21
    157a:	c6 01       	movw	r24, r12
    157c:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    1580:	2f e0       	ldi	r18, 0x0F	; 15
    1582:	72 22       	and	r7, r18
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	88 27       	eor	r24, r24
    158a:	99 27       	eor	r25, r25
    158c:	aa 27       	eor	r26, r26
    158e:	b0 7f       	andi	r27, 0xF0	; 240
    1590:	48 2a       	or	r4, r24
    1592:	59 2a       	or	r5, r25
    1594:	6a 2a       	or	r6, r26
    1596:	7b 2a       	or	r7, r27
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1598:	f6 01       	movw	r30, r12
    159a:	40 82       	st	Z, r4
	*ptr++ = (BYTE)val; val >>= 8;
    159c:	51 82       	std	Z+1, r5	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    159e:	62 82       	std	Z+2, r6	; 0x02
	*ptr++ = (BYTE)val;
    15a0:	73 82       	std	Z+3, r7	; 0x03
			if (res != FR_OK) break;
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	eb 81       	ldd	r30, Y+3	; 0x03
    15a6:	fc 81       	ldd	r31, Y+4	; 0x04
    15a8:	83 83       	std	Z+3, r24	; 0x03
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <put_fat+0x206>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    15ac:	12 e0       	ldi	r17, 0x02	; 2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
    15ae:	81 2f       	mov	r24, r17
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	7f 90       	pop	r7
    15d2:	6f 90       	pop	r6
    15d4:	5f 90       	pop	r5
    15d6:	4f 90       	pop	r4
    15d8:	3f 90       	pop	r3
    15da:	2f 90       	pop	r2
    15dc:	08 95       	ret

000015de <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    15de:	4f 92       	push	r4
    15e0:	5f 92       	push	r5
    15e2:	6f 92       	push	r6
    15e4:	7f 92       	push	r7
    15e6:	8f 92       	push	r8
    15e8:	9f 92       	push	r9
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	8c 01       	movw	r16, r24
    1600:	2a 01       	movw	r4, r20
    1602:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    1604:	fc 01       	movw	r30, r24
    1606:	c0 81       	ld	r28, Z
    1608:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
    160a:	41 15       	cp	r20, r1
    160c:	51 05       	cpc	r21, r1
    160e:	61 05       	cpc	r22, r1
    1610:	71 05       	cpc	r23, r1
    1612:	99 f4       	brne	.+38     	; 0x163a <create_chain+0x5c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    1614:	8b 84       	ldd	r8, Y+11	; 0x0b
    1616:	9c 84       	ldd	r9, Y+12	; 0x0c
    1618:	ad 84       	ldd	r10, Y+13	; 0x0d
    161a:	be 84       	ldd	r11, Y+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    161c:	81 14       	cp	r8, r1
    161e:	91 04       	cpc	r9, r1
    1620:	a1 04       	cpc	r10, r1
    1622:	b1 04       	cpc	r11, r1
    1624:	59 f1       	breq	.+86     	; 0x167c <create_chain+0x9e>
    1626:	8b 89       	ldd	r24, Y+19	; 0x13
    1628:	9c 89       	ldd	r25, Y+20	; 0x14
    162a:	ad 89       	ldd	r26, Y+21	; 0x15
    162c:	be 89       	ldd	r27, Y+22	; 0x16
    162e:	88 16       	cp	r8, r24
    1630:	99 06       	cpc	r9, r25
    1632:	aa 06       	cpc	r10, r26
    1634:	bb 06       	cpc	r11, r27
    1636:	30 f1       	brcs	.+76     	; 0x1684 <create_chain+0xa6>
    1638:	21 c0       	rjmp	.+66     	; 0x167c <create_chain+0x9e>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    163a:	ce 01       	movw	r24, r28
    163c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
		if (cs < 2) return 1;				/* Test for insanity */
    1640:	62 30       	cpi	r22, 0x02	; 2
    1642:	71 05       	cpc	r23, r1
    1644:	81 05       	cpc	r24, r1
    1646:	91 05       	cpc	r25, r1
    1648:	08 f4       	brcc	.+2      	; 0x164c <create_chain+0x6e>
    164a:	ee c0       	rjmp	.+476    	; 0x1828 <create_chain+0x24a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    164c:	6f 3f       	cpi	r22, 0xFF	; 255
    164e:	ff ef       	ldi	r31, 0xFF	; 255
    1650:	7f 07       	cpc	r23, r31
    1652:	8f 07       	cpc	r24, r31
    1654:	9f 07       	cpc	r25, r31
    1656:	29 f4       	brne	.+10     	; 0x1662 <create_chain+0x84>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    1658:	4f ef       	ldi	r20, 0xFF	; 255
    165a:	3f ef       	ldi	r19, 0xFF	; 255
    165c:	2f ef       	ldi	r18, 0xFF	; 255
    165e:	9f ef       	ldi	r25, 0xFF	; 255
    1660:	eb c0       	rjmp	.+470    	; 0x1838 <create_chain+0x25a>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Test for insanity */
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1662:	cb 88       	ldd	r12, Y+19	; 0x13
    1664:	dc 88       	ldd	r13, Y+20	; 0x14
    1666:	ed 88       	ldd	r14, Y+21	; 0x15
    1668:	fe 88       	ldd	r15, Y+22	; 0x16
    166a:	6c 15       	cp	r22, r12
    166c:	7d 05       	cpc	r23, r13
    166e:	8e 05       	cpc	r24, r14
    1670:	9f 05       	cpc	r25, r15
    1672:	08 f4       	brcc	.+2      	; 0x1676 <create_chain+0x98>
    1674:	de c0       	rjmp	.+444    	; 0x1832 <create_chain+0x254>
    1676:	53 01       	movw	r10, r6
    1678:	42 01       	movw	r8, r4
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <create_chain+0xa6>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Suggested cluster to start to find */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    167c:	81 2c       	mov	r8, r1
    167e:	91 2c       	mov	r9, r1
    1680:	54 01       	movw	r10, r8
    1682:	83 94       	inc	r8
		if (cs < 2) return 1;				/* Test for insanity */
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;							/* Cluster to start to find */
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    1684:	8f 85       	ldd	r24, Y+15	; 0x0f
    1686:	98 89       	ldd	r25, Y+16	; 0x10
    1688:	a9 89       	ldd	r26, Y+17	; 0x11
    168a:	ba 89       	ldd	r27, Y+18	; 0x12
    168c:	89 2b       	or	r24, r25
    168e:	8a 2b       	or	r24, r26
    1690:	8b 2b       	or	r24, r27
    1692:	11 f4       	brne	.+4      	; 0x1698 <create_chain+0xba>
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	c9 c0       	rjmp	.+402    	; 0x182a <create_chain+0x24c>
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
    1698:	84 14       	cp	r8, r4
    169a:	95 04       	cpc	r9, r5
    169c:	a6 04       	cpc	r10, r6
    169e:	b7 04       	cpc	r11, r7
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <create_chain+0xc6>
    16a2:	47 c0       	rjmp	.+142    	; 0x1732 <create_chain+0x154>
			ncl = scl + 1;						/* Test if next cluster is free */
    16a4:	75 01       	movw	r14, r10
    16a6:	64 01       	movw	r12, r8
    16a8:	2f ef       	ldi	r18, 0xFF	; 255
    16aa:	c2 1a       	sub	r12, r18
    16ac:	d2 0a       	sbc	r13, r18
    16ae:	e2 0a       	sbc	r14, r18
    16b0:	f2 0a       	sbc	r15, r18
			if (ncl >= fs->n_fatent) ncl = 2;
    16b2:	8b 89       	ldd	r24, Y+19	; 0x13
    16b4:	9c 89       	ldd	r25, Y+20	; 0x14
    16b6:	ad 89       	ldd	r26, Y+21	; 0x15
    16b8:	be 89       	ldd	r27, Y+22	; 0x16
    16ba:	c8 16       	cp	r12, r24
    16bc:	d9 06       	cpc	r13, r25
    16be:	ea 06       	cpc	r14, r26
    16c0:	fb 06       	cpc	r15, r27
    16c2:	28 f0       	brcs	.+10     	; 0x16ce <create_chain+0xf0>
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	c9 2e       	mov	r12, r25
    16c8:	d1 2c       	mov	r13, r1
    16ca:	e1 2c       	mov	r14, r1
    16cc:	f1 2c       	mov	r15, r1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    16ce:	b7 01       	movw	r22, r14
    16d0:	a6 01       	movw	r20, r12
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    16dc:	61 30       	cpi	r22, 0x01	; 1
    16de:	71 05       	cpc	r23, r1
    16e0:	81 05       	cpc	r24, r1
    16e2:	91 05       	cpc	r25, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <create_chain+0x10a>
    16e6:	a0 c0       	rjmp	.+320    	; 0x1828 <create_chain+0x24a>
    16e8:	6f 3f       	cpi	r22, 0xFF	; 255
    16ea:	ff ef       	ldi	r31, 0xFF	; 255
    16ec:	7f 07       	cpc	r23, r31
    16ee:	8f 07       	cpc	r24, r31
    16f0:	9f 07       	cpc	r25, r31
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <create_chain+0x118>
    16f4:	b1 cf       	rjmp	.-158    	; 0x1658 <create_chain+0x7a>
			if (cs != 0) {						/* Not free? */
    16f6:	67 2b       	or	r22, r23
    16f8:	68 2b       	or	r22, r24
    16fa:	69 2b       	or	r22, r25
    16fc:	a9 f0       	breq	.+42     	; 0x1728 <create_chain+0x14a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    16fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    1700:	9c 85       	ldd	r25, Y+12	; 0x0c
    1702:	ad 85       	ldd	r26, Y+13	; 0x0d
    1704:	be 85       	ldd	r27, Y+14	; 0x0e
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	91 05       	cpc	r25, r1
    170a:	a1 05       	cpc	r26, r1
    170c:	b1 05       	cpc	r27, r1
    170e:	88 f0       	brcs	.+34     	; 0x1732 <create_chain+0x154>
    1710:	4b 89       	ldd	r20, Y+19	; 0x13
    1712:	5c 89       	ldd	r21, Y+20	; 0x14
    1714:	6d 89       	ldd	r22, Y+21	; 0x15
    1716:	7e 89       	ldd	r23, Y+22	; 0x16
    1718:	84 17       	cp	r24, r20
    171a:	95 07       	cpc	r25, r21
    171c:	a6 07       	cpc	r26, r22
    171e:	b7 07       	cpc	r27, r23
    1720:	40 f4       	brcc	.+16     	; 0x1732 <create_chain+0x154>
    1722:	4c 01       	movw	r8, r24
    1724:	5d 01       	movw	r10, r26
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <create_chain+0x154>
				ncl = 0;
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    1728:	c1 14       	cp	r12, r1
    172a:	d1 04       	cpc	r13, r1
    172c:	e1 04       	cpc	r14, r1
    172e:	f1 04       	cpc	r15, r1
    1730:	d1 f5       	brne	.+116    	; 0x17a6 <create_chain+0x1c8>
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
			ncl = scl + 1;						/* Test if next cluster is free */
			if (ncl >= fs->n_fatent) ncl = 2;
    1732:	75 01       	movw	r14, r10
    1734:	64 01       	movw	r12, r8
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
    1736:	2f ef       	ldi	r18, 0xFF	; 255
    1738:	c2 1a       	sub	r12, r18
    173a:	d2 0a       	sbc	r13, r18
    173c:	e2 0a       	sbc	r14, r18
    173e:	f2 0a       	sbc	r15, r18
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    1740:	8b 89       	ldd	r24, Y+19	; 0x13
    1742:	9c 89       	ldd	r25, Y+20	; 0x14
    1744:	ad 89       	ldd	r26, Y+21	; 0x15
    1746:	be 89       	ldd	r27, Y+22	; 0x16
    1748:	c8 16       	cp	r12, r24
    174a:	d9 06       	cpc	r13, r25
    174c:	ea 06       	cpc	r14, r26
    174e:	fb 06       	cpc	r15, r27
    1750:	60 f0       	brcs	.+24     	; 0x176a <create_chain+0x18c>
					ncl = 2;
					if (ncl > scl) return 0;	/* No free cluster found? */
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	88 16       	cp	r8, r24
    1756:	91 04       	cpc	r9, r1
    1758:	a1 04       	cpc	r10, r1
    175a:	b1 04       	cpc	r11, r1
    175c:	08 f4       	brcc	.+2      	; 0x1760 <create_chain+0x182>
    175e:	9a cf       	rjmp	.-204    	; 0x1694 <create_chain+0xb6>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
					ncl = 2;
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	c8 2e       	mov	r12, r24
    1764:	d1 2c       	mov	r13, r1
    1766:	e1 2c       	mov	r14, r1
    1768:	f1 2c       	mov	r15, r1
					if (ncl > scl) return 0;	/* No free cluster found? */
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    176a:	b7 01       	movw	r22, r14
    176c:	a6 01       	movw	r20, r12
    176e:	f8 01       	movw	r30, r16
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
				if (cs == 0) break;				/* Found a free cluster? */
    1778:	61 15       	cp	r22, r1
    177a:	71 05       	cpc	r23, r1
    177c:	81 05       	cpc	r24, r1
    177e:	91 05       	cpc	r25, r1
    1780:	91 f0       	breq	.+36     	; 0x17a6 <create_chain+0x1c8>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    1782:	61 30       	cpi	r22, 0x01	; 1
    1784:	71 05       	cpc	r23, r1
    1786:	81 05       	cpc	r24, r1
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <create_chain+0x1b0>
    178c:	4d c0       	rjmp	.+154    	; 0x1828 <create_chain+0x24a>
    178e:	6f 3f       	cpi	r22, 0xFF	; 255
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	09 f4       	brne	.+2      	; 0x179a <create_chain+0x1bc>
    1798:	5f cf       	rjmp	.-322    	; 0x1658 <create_chain+0x7a>
				if (ncl == scl) return 0;		/* No free cluster found? */
    179a:	c8 14       	cp	r12, r8
    179c:	d9 04       	cpc	r13, r9
    179e:	ea 04       	cpc	r14, r10
    17a0:	fb 04       	cpc	r15, r11
    17a2:	49 f6       	brne	.-110    	; 0x1736 <create_chain+0x158>
    17a4:	77 cf       	rjmp	.-274    	; 0x1694 <create_chain+0xb6>
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    17a6:	0f ef       	ldi	r16, 0xFF	; 255
    17a8:	1f ef       	ldi	r17, 0xFF	; 255
    17aa:	98 01       	movw	r18, r16
    17ac:	b7 01       	movw	r22, r14
    17ae:	a6 01       	movw	r20, r12
    17b0:	ce 01       	movw	r24, r28
    17b2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <put_fat>
		if (res == FR_OK && clst != 0) {
    17b6:	81 11       	cpse	r24, r1
    17b8:	34 c0       	rjmp	.+104    	; 0x1822 <create_chain+0x244>
    17ba:	41 14       	cp	r4, r1
    17bc:	51 04       	cpc	r5, r1
    17be:	61 04       	cpc	r6, r1
    17c0:	71 04       	cpc	r7, r1
    17c2:	e9 f4       	brne	.+58     	; 0x17fe <create_chain+0x220>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
    17c4:	cb 86       	std	Y+11, r12	; 0x0b
    17c6:	dc 86       	std	Y+12, r13	; 0x0c
    17c8:	ed 86       	std	Y+13, r14	; 0x0d
    17ca:	fe 86       	std	Y+14, r15	; 0x0e
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    17cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ce:	98 89       	ldd	r25, Y+16	; 0x10
    17d0:	a9 89       	ldd	r26, Y+17	; 0x11
    17d2:	ba 89       	ldd	r27, Y+18	; 0x12
    17d4:	4b 89       	ldd	r20, Y+19	; 0x13
    17d6:	5c 89       	ldd	r21, Y+20	; 0x14
    17d8:	6d 89       	ldd	r22, Y+21	; 0x15
    17da:	7e 89       	ldd	r23, Y+22	; 0x16
    17dc:	42 50       	subi	r20, 0x02	; 2
    17de:	51 09       	sbc	r21, r1
    17e0:	61 09       	sbc	r22, r1
    17e2:	71 09       	sbc	r23, r1
    17e4:	48 17       	cp	r20, r24
    17e6:	59 07       	cpc	r21, r25
    17e8:	6a 07       	cpc	r22, r26
    17ea:	7b 07       	cpc	r23, r27
    17ec:	90 f0       	brcs	.+36     	; 0x1812 <create_chain+0x234>
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	a1 09       	sbc	r26, r1
    17f2:	b1 09       	sbc	r27, r1
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	98 8b       	std	Y+16, r25	; 0x10
    17f8:	a9 8b       	std	Y+17, r26	; 0x11
    17fa:	ba 8b       	std	Y+18, r27	; 0x12
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <create_chain+0x234>
				if (ncl == scl) return 0;		/* No free cluster found? */
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
		if (res == FR_OK && clst != 0) {
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    17fe:	97 01       	movw	r18, r14
    1800:	86 01       	movw	r16, r12
    1802:	b3 01       	movw	r22, r6
    1804:	a2 01       	movw	r20, r4
    1806:	ce 01       	movw	r24, r28
    1808:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    180c:	88 23       	and	r24, r24
    180e:	d1 f2       	breq	.-76     	; 0x17c4 <create_chain+0x1e6>
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <create_chain+0x244>
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	8c 83       	std	Y+4, r24	; 0x04
    1818:	4c 2d       	mov	r20, r12
    181a:	3d 2d       	mov	r19, r13
    181c:	2e 2d       	mov	r18, r14
    181e:	9f 2d       	mov	r25, r15
    1820:	0b c0       	rjmp	.+22     	; 0x1838 <create_chain+0x25a>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	09 f4       	brne	.+2      	; 0x1828 <create_chain+0x24a>
    1826:	18 cf       	rjmp	.-464    	; 0x1658 <create_chain+0x7a>
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <create_chain+0x25a>
    1832:	46 2f       	mov	r20, r22
    1834:	37 2f       	mov	r19, r23
    1836:	28 2f       	mov	r18, r24
	}

	return ncl;		/* Return new cluster number or error status */
}
    1838:	64 2f       	mov	r22, r20
    183a:	73 2f       	mov	r23, r19
    183c:	82 2f       	mov	r24, r18
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	7f 90       	pop	r7
    1858:	6f 90       	pop	r6
    185a:	5f 90       	pop	r5
    185c:	4f 90       	pop	r4
    185e:	08 95       	ret

00001860 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1860:	4f 92       	push	r4
    1862:	5f 92       	push	r5
    1864:	6f 92       	push	r6
    1866:	7f 92       	push	r7
    1868:	af 92       	push	r10
    186a:	bf 92       	push	r11
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	ec 01       	movw	r28, r24
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    187e:	08 81       	ld	r16, Y
    1880:	19 81       	ldd	r17, Y+1	; 0x01


	ofs = dp->dptr + SZDIRE;	/* Next entry */
    1882:	ce 84       	ldd	r12, Y+14	; 0x0e
    1884:	df 84       	ldd	r13, Y+15	; 0x0f
    1886:	e8 88       	ldd	r14, Y+16	; 0x10
    1888:	f9 88       	ldd	r15, Y+17	; 0x11
    188a:	80 e2       	ldi	r24, 0x20	; 32
    188c:	c8 0e       	add	r12, r24
    188e:	d1 1c       	adc	r13, r1
    1890:	e1 1c       	adc	r14, r1
    1892:	f1 1c       	adc	r15, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    1894:	c1 14       	cp	r12, r1
    1896:	d1 04       	cpc	r13, r1
    1898:	e0 e2       	ldi	r30, 0x20	; 32
    189a:	ee 06       	cpc	r14, r30
    189c:	f1 04       	cpc	r15, r1
    189e:	20 f0       	brcs	.+8      	; 0x18a8 <dir_next+0x48>
    18a0:	1e 8a       	std	Y+22, r1	; 0x16
    18a2:	1f 8a       	std	Y+23, r1	; 0x17
    18a4:	18 8e       	std	Y+24, r1	; 0x18
    18a6:	19 8e       	std	Y+25, r1	; 0x19
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    18a8:	8e 89       	ldd	r24, Y+22	; 0x16
    18aa:	9f 89       	ldd	r25, Y+23	; 0x17
    18ac:	a8 8d       	ldd	r26, Y+24	; 0x18
    18ae:	b9 8d       	ldd	r27, Y+25	; 0x19
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	a1 05       	cpc	r26, r1
    18b4:	b1 05       	cpc	r27, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <dir_next+0x5a>
    18b8:	a6 c0       	rjmp	.+332    	; 0x1a06 <dir_next+0x1a6>
    18ba:	5b 01       	movw	r10, r22

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    18bc:	b7 01       	movw	r22, r14
    18be:	a6 01       	movw	r20, r12
    18c0:	51 70       	andi	r21, 0x01	; 1
    18c2:	66 27       	eor	r22, r22
    18c4:	77 27       	eor	r23, r23
    18c6:	45 2b       	or	r20, r21
    18c8:	46 2b       	or	r20, r22
    18ca:	47 2b       	or	r20, r23
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <dir_next+0x70>
    18ce:	8d c0       	rjmp	.+282    	; 0x19ea <dir_next+0x18a>
		dp->sect++;				/* Next sector */
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	a1 1d       	adc	r26, r1
    18d4:	b1 1d       	adc	r27, r1
    18d6:	8e 8b       	std	Y+22, r24	; 0x16
    18d8:	9f 8b       	std	Y+23, r25	; 0x17
    18da:	a8 8f       	std	Y+24, r26	; 0x18
    18dc:	b9 8f       	std	Y+25, r27	; 0x19

		if (dp->clust == 0) {	/* Static table */
    18de:	4a 89       	ldd	r20, Y+18	; 0x12
    18e0:	5b 89       	ldd	r21, Y+19	; 0x13
    18e2:	6c 89       	ldd	r22, Y+20	; 0x14
    18e4:	7d 89       	ldd	r23, Y+21	; 0x15
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    18e6:	f8 01       	movw	r30, r16
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
		dp->sect++;				/* Next sector */

		if (dp->clust == 0) {	/* Static table */
    18e8:	41 15       	cp	r20, r1
    18ea:	51 05       	cpc	r21, r1
    18ec:	61 05       	cpc	r22, r1
    18ee:	71 05       	cpc	r23, r1
    18f0:	c1 f4       	brne	.+48     	; 0x1922 <dir_next+0xc2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    18f2:	87 81       	ldd	r24, Z+7	; 0x07
    18f4:	90 85       	ldd	r25, Z+8	; 0x08
    18f6:	a0 e0       	ldi	r26, 0x00	; 0
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	b7 01       	movw	r22, r14
    18fc:	a6 01       	movw	r20, r12
    18fe:	35 e0       	ldi	r19, 0x05	; 5
    1900:	76 95       	lsr	r23
    1902:	67 95       	ror	r22
    1904:	57 95       	ror	r21
    1906:	47 95       	ror	r20
    1908:	3a 95       	dec	r19
    190a:	d1 f7       	brne	.-12     	; 0x1900 <dir_next+0xa0>
    190c:	48 17       	cp	r20, r24
    190e:	59 07       	cpc	r21, r25
    1910:	6a 07       	cpc	r22, r26
    1912:	7b 07       	cpc	r23, r27
    1914:	08 f4       	brcc	.+2      	; 0x1918 <dir_next+0xb8>
    1916:	69 c0       	rjmp	.+210    	; 0x19ea <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
    1918:	1e 8a       	std	Y+22, r1	; 0x16
    191a:	1f 8a       	std	Y+23, r1	; 0x17
    191c:	18 8e       	std	Y+24, r1	; 0x18
    191e:	19 8e       	std	Y+25, r1	; 0x19
    1920:	72 c0       	rjmp	.+228    	; 0x1a06 <dir_next+0x1a6>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    1922:	81 85       	ldd	r24, Z+9	; 0x09
    1924:	92 85       	ldd	r25, Z+10	; 0x0a
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	26 01       	movw	r4, r12
    192e:	37 01       	movw	r6, r14
    1930:	29 e0       	ldi	r18, 0x09	; 9
    1932:	76 94       	lsr	r7
    1934:	67 94       	ror	r6
    1936:	57 94       	ror	r5
    1938:	47 94       	ror	r4
    193a:	2a 95       	dec	r18
    193c:	d1 f7       	brne	.-12     	; 0x1932 <dir_next+0xd2>
    193e:	84 21       	and	r24, r4
    1940:	95 21       	and	r25, r5
    1942:	a6 21       	and	r26, r6
    1944:	b7 21       	and	r27, r7
    1946:	89 2b       	or	r24, r25
    1948:	8a 2b       	or	r24, r26
    194a:	8b 2b       	or	r24, r27
    194c:	09 f0       	breq	.+2      	; 0x1950 <dir_next+0xf0>
    194e:	4d c0       	rjmp	.+154    	; 0x19ea <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    1950:	c8 01       	movw	r24, r16
    1952:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
    1956:	2b 01       	movw	r4, r22
    1958:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    195a:	62 30       	cpi	r22, 0x02	; 2
    195c:	71 05       	cpc	r23, r1
    195e:	81 05       	cpc	r24, r1
    1960:	91 05       	cpc	r25, r1
    1962:	10 f4       	brcc	.+4      	; 0x1968 <dir_next+0x108>
    1964:	82 e0       	ldi	r24, 0x02	; 2
    1966:	52 c0       	rjmp	.+164    	; 0x1a0c <dir_next+0x1ac>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	48 16       	cp	r4, r24
    196c:	58 06       	cpc	r5, r24
    196e:	68 06       	cpc	r6, r24
    1970:	78 06       	cpc	r7, r24
    1972:	11 f4       	brne	.+4      	; 0x1978 <dir_next+0x118>
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	4a c0       	rjmp	.+148    	; 0x1a0c <dir_next+0x1ac>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    1978:	f8 01       	movw	r30, r16
    197a:	83 89       	ldd	r24, Z+19	; 0x13
    197c:	94 89       	ldd	r25, Z+20	; 0x14
    197e:	a5 89       	ldd	r26, Z+21	; 0x15
    1980:	b6 89       	ldd	r27, Z+22	; 0x16
    1982:	48 16       	cp	r4, r24
    1984:	59 06       	cpc	r5, r25
    1986:	6a 06       	cpc	r6, r26
    1988:	7b 06       	cpc	r7, r27
    198a:	10 f1       	brcs	.+68     	; 0x19d0 <dir_next+0x170>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    198c:	ab 28       	or	r10, r11
    198e:	21 f2       	breq	.-120    	; 0x1918 <dir_next+0xb8>
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    1990:	4a 89       	ldd	r20, Y+18	; 0x12
    1992:	5b 89       	ldd	r21, Y+19	; 0x13
    1994:	6c 89       	ldd	r22, Y+20	; 0x14
    1996:	7d 89       	ldd	r23, Y+21	; 0x15
    1998:	ce 01       	movw	r24, r28
    199a:	0e 94 ef 0a 	call	0x15de	; 0x15de <create_chain>
    199e:	2b 01       	movw	r4, r22
    19a0:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    19a2:	61 15       	cp	r22, r1
    19a4:	71 05       	cpc	r23, r1
    19a6:	81 05       	cpc	r24, r1
    19a8:	91 05       	cpc	r25, r1
    19aa:	79 f1       	breq	.+94     	; 0x1a0a <dir_next+0x1aa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    19ac:	61 30       	cpi	r22, 0x01	; 1
    19ae:	71 05       	cpc	r23, r1
    19b0:	81 05       	cpc	r24, r1
    19b2:	91 05       	cpc	r25, r1
    19b4:	b9 f2       	breq	.-82     	; 0x1964 <dir_next+0x104>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	48 16       	cp	r4, r24
    19ba:	58 06       	cpc	r5, r24
    19bc:	68 06       	cpc	r6, r24
    19be:	78 06       	cpc	r7, r24
    19c0:	c9 f2       	breq	.-78     	; 0x1974 <dir_next+0x114>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    19c2:	b3 01       	movw	r22, r6
    19c4:	a2 01       	movw	r20, r4
    19c6:	c8 01       	movw	r24, r16
    19c8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <dir_clear>
    19cc:	81 11       	cpse	r24, r1
    19ce:	d2 cf       	rjmp	.-92     	; 0x1974 <dir_next+0x114>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    19d0:	4a 8a       	std	Y+18, r4	; 0x12
    19d2:	5b 8a       	std	Y+19, r5	; 0x13
    19d4:	6c 8a       	std	Y+20, r6	; 0x14
    19d6:	7d 8a       	std	Y+21, r7	; 0x15
				dp->sect = clst2sect(fs, clst);
    19d8:	b3 01       	movw	r22, r6
    19da:	a2 01       	movw	r20, r4
    19dc:	c8 01       	movw	r24, r16
    19de:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
    19e2:	6e 8b       	std	Y+22, r22	; 0x16
    19e4:	7f 8b       	std	Y+23, r23	; 0x17
    19e6:	88 8f       	std	Y+24, r24	; 0x18
    19e8:	99 8f       	std	Y+25, r25	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    19ea:	ce 86       	std	Y+14, r12	; 0x0e
    19ec:	df 86       	std	Y+15, r13	; 0x0f
    19ee:	e8 8a       	std	Y+16, r14	; 0x10
    19f0:	f9 8a       	std	Y+17, r15	; 0x11
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    19f2:	01 5d       	subi	r16, 0xD1	; 209
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	e1 e0       	ldi	r30, 0x01	; 1
    19f8:	de 22       	and	r13, r30
    19fa:	c0 0e       	add	r12, r16
    19fc:	d1 1e       	adc	r13, r17
    19fe:	db 8e       	std	Y+27, r13	; 0x1b
    1a00:	ca 8e       	std	Y+26, r12	; 0x1a

	return FR_OK;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <dir_next+0x1ac>
	FATFS *fs = dp->obj.fs;


	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    1a06:	84 e0       	ldi	r24, 0x04	; 4
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <dir_next+0x1ac>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1a0a:	87 e0       	ldi	r24, 0x07	; 7
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	ff 90       	pop	r15
    1a16:	ef 90       	pop	r14
    1a18:	df 90       	pop	r13
    1a1a:	cf 90       	pop	r12
    1a1c:	bf 90       	pop	r11
    1a1e:	af 90       	pop	r10
    1a20:	7f 90       	pop	r7
    1a22:	6f 90       	pop	r6
    1a24:	5f 90       	pop	r5
    1a26:	4f 90       	pop	r4
    1a28:	08 95       	ret

00001a2a <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
    1a2a:	2f 92       	push	r2
    1a2c:	3f 92       	push	r3
    1a2e:	4f 92       	push	r4
    1a30:	5f 92       	push	r5
    1a32:	6f 92       	push	r6
    1a34:	7f 92       	push	r7
    1a36:	8f 92       	push	r8
    1a38:	9f 92       	push	r9
    1a3a:	af 92       	push	r10
    1a3c:	bf 92       	push	r11
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
    1a4e:	fc 01       	movw	r30, r24
    1a50:	c0 80       	ld	r12, Z
    1a52:	d1 80       	ldd	r13, Z+1	; 0x01
    1a54:	9b 01       	movw	r18, r22
    1a56:	89 01       	movw	r16, r18
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    1a58:	f9 01       	movw	r30, r18
    1a5a:	40 81       	ld	r20, Z
    1a5c:	2f 5f       	subi	r18, 0xFF	; 255
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	4f 32       	cpi	r20, 0x2F	; 47
    1a62:	c9 f3       	breq	.-14     	; 0x1a56 <follow_path+0x2c>
    1a64:	4c 35       	cpi	r20, 0x5C	; 92
    1a66:	b9 f3       	breq	.-18     	; 0x1a56 <follow_path+0x2c>
		dp->obj.sclust = 0;					/* Start from root directory */
    1a68:	fc 01       	movw	r30, r24
    1a6a:	16 82       	std	Z+6, r1	; 0x06
    1a6c:	17 82       	std	Z+7, r1	; 0x07
    1a6e:	10 86       	std	Z+8, r1	; 0x08
    1a70:	11 86       	std	Z+9, r1	; 0x09
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1a72:	f8 01       	movw	r30, r16
    1a74:	20 81       	ld	r18, Z
    1a76:	20 32       	cpi	r18, 0x20	; 32
    1a78:	90 f0       	brcs	.+36     	; 0x1a9e <follow_path+0x74>
    1a7a:	ec 01       	movw	r28, r24
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    1a7c:	7c 01       	movw	r14, r24
    1a7e:	fc e1       	ldi	r31, 0x1C	; 28
    1a80:	ef 0e       	add	r14, r31
    1a82:	f1 1c       	adc	r15, r1
    1a84:	3c 01       	movw	r6, r24
    1a86:	87 e2       	ldi	r24, 0x27	; 39
    1a88:	68 0e       	add	r6, r24
    1a8a:	71 1c       	adc	r7, r1
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1a8c:	80 e2       	ldi	r24, 0x20	; 32
    1a8e:	38 2e       	mov	r3, r24
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1a90:	95 e0       	ldi	r25, 0x05	; 5
    1a92:	29 2e       	mov	r2, r25
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1a94:	46 01       	movw	r8, r12
    1a96:	ef e2       	ldi	r30, 0x2F	; 47
    1a98:	8e 0e       	add	r8, r30
    1a9a:	91 1c       	adc	r9, r1
    1a9c:	52 c0       	rjmp	.+164    	; 0x1b42 <follow_path+0x118>
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    1a9e:	20 e8       	ldi	r18, 0x80	; 128
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	27 a3       	std	Z+39, r18	; 0x27
			}
		}
	}

	return res;
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	af 90       	pop	r10
    1ab8:	9f 90       	pop	r9
    1aba:	8f 90       	pop	r8
    1abc:	7f 90       	pop	r7
    1abe:	6f 90       	pop	r6
    1ac0:	5f 90       	pop	r5
    1ac2:	4f 90       	pop	r4
    1ac4:	3f 90       	pop	r3
    1ac6:	2f 90       	pop	r2
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
		res = dir_sdi(dp, 0);
    1ac8:	0c 94 65 06 	jmp	0xcca	; 0xcca <dir_sdi.constprop.15>
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1acc:	31 92       	st	Z+, r3
	} while (--cnt);
    1ace:	e6 15       	cp	r30, r6
    1ad0:	f7 05       	cpc	r31, r7
    1ad2:	e1 f7       	brne	.-8      	; 0x1acc <follow_path+0xa2>
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	68 e0       	ldi	r22, 0x08	; 8
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    1ae2:	2f 5f       	subi	r18, 0xFF	; 255
    1ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae6:	51 91       	ld	r21, Z+
		if (c <= ' ') break; 			/* Break if end of the path name */
    1ae8:	51 32       	cpi	r21, 0x21	; 33
    1aea:	68 f5       	brcc	.+90     	; 0x1b46 <follow_path+0x11c>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    1aec:	02 0f       	add	r16, r18
    1aee:	13 1f       	adc	r17, r19
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    1af0:	89 2b       	or	r24, r25
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <follow_path+0xcc>
    1af4:	8d c0       	rjmp	.+282    	; 0x1c10 <follow_path+0x1e6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    1af6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1af8:	85 3e       	cpi	r24, 0xE5	; 229
    1afa:	09 f4       	brne	.+2      	; 0x1afe <follow_path+0xd4>
    1afc:	2c 8e       	std	Y+28, r2	; 0x1c
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1afe:	51 32       	cpi	r21, 0x21	; 33
    1b00:	08 f4       	brcc	.+2      	; 0x1b04 <follow_path+0xda>
    1b02:	50 c0       	rjmp	.+160    	; 0x1ba4 <follow_path+0x17a>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	8f a3       	std	Y+39, r24	; 0x27
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1b08:	a8 80       	ld	r10, Y
    1b0a:	b9 80       	ldd	r11, Y+1	; 0x01
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	0e 94 65 06 	call	0xcca	; 0xcca <dir_sdi.constprop.15>
	if (res != FR_OK) return res;
    1b12:	88 23       	and	r24, r24
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <follow_path+0xee>
    1b16:	48 c0       	rjmp	.+144    	; 0x1ba8 <follow_path+0x17e>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    1b18:	9f a1       	ldd	r25, Y+39	; 0x27
			if (res != FR_OK) {				/* Failed to find the object */
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	73 c0       	rjmp	.+230    	; 0x1c04 <follow_path+0x1da>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1b1e:	92 fd       	sbrc	r25, 2
    1b20:	8c c0       	rjmp	.+280    	; 0x1c3a <follow_path+0x210>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	84 ff       	sbrs	r24, 4
    1b26:	72 c0       	rjmp	.+228    	; 0x1c0c <follow_path+0x1e2>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    1b28:	6e 85       	ldd	r22, Y+14	; 0x0e
    1b2a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1b2c:	71 70       	andi	r23, 0x01	; 1
    1b2e:	68 0d       	add	r22, r8
    1b30:	79 1d       	adc	r23, r9
    1b32:	f6 01       	movw	r30, r12
    1b34:	80 81       	ld	r24, Z
    1b36:	0e 94 3d 04 	call	0x87a	; 0x87a <ld_clust.isra.3>
    1b3a:	6e 83       	std	Y+6, r22	; 0x06
    1b3c:	7f 83       	std	Y+7, r23	; 0x07
    1b3e:	88 87       	std	Y+8, r24	; 0x08
    1b40:	99 87       	std	Y+9, r25	; 0x09
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
    1b42:	f7 01       	movw	r30, r14
    1b44:	c3 cf       	rjmp	.-122    	; 0x1acc <follow_path+0xa2>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    1b46:	5f 32       	cpi	r21, 0x2F	; 47
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <follow_path+0x128>
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	e2 0f       	add	r30, r18
    1b4e:	f3 1f       	adc	r31, r19
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <follow_path+0x132>
    1b52:	5c 35       	cpi	r21, 0x5C	; 92
    1b54:	51 f4       	brne	.+20     	; 0x1b6a <follow_path+0x140>
    1b56:	f9 cf       	rjmp	.-14     	; 0x1b4a <follow_path+0x120>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    1b58:	4c 35       	cpi	r20, 0x5C	; 92
    1b5a:	41 f6       	brne	.-112    	; 0x1aec <follow_path+0xc2>
    1b5c:	9f 01       	movw	r18, r30
    1b5e:	20 1b       	sub	r18, r16
    1b60:	31 0b       	sbc	r19, r17
    1b62:	41 91       	ld	r20, Z+
    1b64:	4f 32       	cpi	r20, 0x2F	; 47
    1b66:	c1 f7       	brne	.-16     	; 0x1b58 <follow_path+0x12e>
    1b68:	f9 cf       	rjmp	.-14     	; 0x1b5c <follow_path+0x132>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    1b6a:	5e 32       	cpi	r21, 0x2E	; 46
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <follow_path+0x146>
    1b6e:	5d c0       	rjmp	.+186    	; 0x1c2a <follow_path+0x200>
    1b70:	86 17       	cp	r24, r22
    1b72:	97 07       	cpc	r25, r23
    1b74:	08 f0       	brcs	.+2      	; 0x1b78 <follow_path+0x14e>
    1b76:	4c c0       	rjmp	.+152    	; 0x1c10 <follow_path+0x1e6>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    1b78:	57 ff       	sbrs	r21, 7
    1b7a:	06 c0       	rjmp	.+12     	; 0x1b88 <follow_path+0x15e>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    1b7c:	a5 2f       	mov	r26, r21
    1b7e:	af 77       	andi	r26, 0x7F	; 127
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	a7 57       	subi	r26, 0x77	; 119
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	5c 91       	ld	r21, X
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    1b88:	a5 2e       	mov	r10, r21
    1b8a:	b1 2c       	mov	r11, r1
    1b8c:	aa ec       	ldi	r26, 0xCA	; 202
    1b8e:	b1 e0       	ldi	r27, 0x01	; 1


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    1b90:	4d 91       	ld	r20, X+
    1b92:	44 23       	and	r20, r20
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <follow_path+0x16e>
    1b96:	3e c0       	rjmp	.+124    	; 0x1c14 <follow_path+0x1ea>
    1b98:	44 2e       	mov	r4, r20
    1b9a:	51 2c       	mov	r5, r1
    1b9c:	a4 14       	cp	r10, r4
    1b9e:	b5 04       	cpc	r11, r5
    1ba0:	b9 f7       	brne	.-18     	; 0x1b90 <follow_path+0x166>
    1ba2:	36 c0       	rjmp	.+108    	; 0x1c10 <follow_path+0x1e6>
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    1ba4:	84 e0       	ldi	r24, 0x04	; 4
    1ba6:	af cf       	rjmp	.-162    	; 0x1b06 <follow_path+0xdc>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    1ba8:	4e 89       	ldd	r20, Y+22	; 0x16
    1baa:	5f 89       	ldd	r21, Y+23	; 0x17
    1bac:	68 8d       	ldd	r22, Y+24	; 0x18
    1bae:	79 8d       	ldd	r23, Y+25	; 0x19
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
		if (res != FR_OK) break;
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	af cf       	rjmp	.-162    	; 0x1b18 <follow_path+0xee>
		c = dp->dir[DIR_Name];
    1bba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bbc:	fb 8d       	ldd	r31, Y+27	; 0x1b
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1bbe:	90 81       	ld	r25, Z
    1bc0:	99 23       	and	r25, r25
    1bc2:	f1 f0       	breq	.+60     	; 0x1c00 <follow_path+0x1d6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    1bc4:	93 85       	ldd	r25, Z+11	; 0x0b
    1bc6:	9f 73       	andi	r25, 0x3F	; 63
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1bca:	93 85       	ldd	r25, Z+11	; 0x0b
    1bcc:	93 fd       	sbrc	r25, 3
    1bce:	12 c0       	rjmp	.+36     	; 0x1bf4 <follow_path+0x1ca>
    1bd0:	af 01       	movw	r20, r30
    1bd2:	45 5f       	subi	r20, 0xF5	; 245
    1bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd6:	d7 01       	movw	r26, r14
{
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    1bd8:	21 91       	ld	r18, Z+
    1bda:	9d 91       	ld	r25, X+
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	29 1b       	sub	r18, r25
    1be0:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
    1be2:	4e 17       	cp	r20, r30
    1be4:	5f 07       	cpc	r21, r31
    1be6:	19 f0       	breq	.+6      	; 0x1bee <follow_path+0x1c4>
    1be8:	23 2b       	or	r18, r19
    1bea:	b1 f3       	breq	.-20     	; 0x1bd8 <follow_path+0x1ae>
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <follow_path+0x1ca>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    1bee:	23 2b       	or	r18, r19
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <follow_path+0x1ca>
    1bf2:	92 cf       	rjmp	.-220    	; 0x1b18 <follow_path+0xee>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	0e 94 30 0c 	call	0x1860	; 0x1860 <dir_next>
    1bfe:	89 cf       	rjmp	.-238    	; 0x1b12 <follow_path+0xe8>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c00:	84 e0       	ldi	r24, 0x04	; 4
    1c02:	8a cf       	rjmp	.-236    	; 0x1b18 <follow_path+0xee>
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	c9 f4       	brne	.+50     	; 0x1c3a <follow_path+0x210>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1c08:	92 fd       	sbrc	r25, 2
    1c0a:	17 c0       	rjmp	.+46     	; 0x1c3a <follow_path+0x210>
    1c0c:	85 e0       	ldi	r24, 0x05	; 5
    1c0e:	15 c0       	rjmp	.+42     	; 0x1c3a <follow_path+0x210>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1c10:	86 e0       	ldi	r24, 0x06	; 6
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
			}
		}
	}

	return res;
    1c12:	13 c0       	rjmp	.+38     	; 0x1c3a <follow_path+0x210>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    1c14:	4f e9       	ldi	r20, 0x9F	; 159
    1c16:	45 0f       	add	r20, r21
    1c18:	4a 31       	cpi	r20, 0x1A	; 26
    1c1a:	08 f4       	brcc	.+2      	; 0x1c1e <follow_path+0x1f4>
    1c1c:	50 52       	subi	r21, 0x20	; 32
			sfn[i++] = c;
    1c1e:	d7 01       	movw	r26, r14
    1c20:	a8 0f       	add	r26, r24
    1c22:	b9 1f       	adc	r27, r25
    1c24:	5c 93       	st	X, r21
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	5c cf       	rjmp	.-328    	; 0x1ae2 <follow_path+0xb8>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    1c2a:	6b 30       	cpi	r22, 0x0B	; 11
    1c2c:	71 05       	cpc	r23, r1
    1c2e:	81 f3       	breq	.-32     	; 0x1c10 <follow_path+0x1e6>
			i = 8; ni = 11;				/* Enter file extension field */
    1c30:	88 e0       	ldi	r24, 0x08	; 8
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	6b e0       	ldi	r22, 0x0B	; 11
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	54 cf       	rjmp	.-344    	; 0x1ae2 <follow_path+0xb8>
			}
		}
	}

	return res;
}
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	ff 90       	pop	r15
    1c44:	ef 90       	pop	r14
    1c46:	df 90       	pop	r13
    1c48:	cf 90       	pop	r12
    1c4a:	bf 90       	pop	r11
    1c4c:	af 90       	pop	r10
    1c4e:	9f 90       	pop	r9
    1c50:	8f 90       	pop	r8
    1c52:	7f 90       	pop	r7
    1c54:	6f 90       	pop	r6
    1c56:	5f 90       	pop	r5
    1c58:	4f 90       	pop	r4
    1c5a:	3f 90       	pop	r3
    1c5c:	2f 90       	pop	r2
    1c5e:	08 95       	ret

00001c60 <dir_read.constprop.13>:
/*-----------------------------------------------------------------------*/

#define DIR_READ_FILE(dp) dir_read(dp, 0)
#define DIR_READ_LABEL(dp) dir_read(dp, 1)

static FRESULT dir_read (
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    1c6a:	08 81       	ld	r16, Y
    1c6c:	19 81       	ldd	r17, Y+1	; 0x01
static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    1c6e:	84 e0       	ldi	r24, 0x04	; 4
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    1c70:	4e 89       	ldd	r20, Y+22	; 0x16
    1c72:	5f 89       	ldd	r21, Y+23	; 0x17
    1c74:	68 8d       	ldd	r22, Y+24	; 0x18
    1c76:	79 8d       	ldd	r23, Y+25	; 0x19
    1c78:	41 15       	cp	r20, r1
    1c7a:	51 05       	cpc	r21, r1
    1c7c:	61 05       	cpc	r22, r1
    1c7e:	71 05       	cpc	r23, r1
    1c80:	01 f1       	breq	.+64     	; 0x1cc2 <dir_read.constprop.13+0x62>
		res = move_window(fs, dp->sect);
    1c82:	c8 01       	movw	r24, r16
    1c84:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
		if (res != FR_OK) break;
    1c88:	81 11       	cpse	r24, r1
    1c8a:	1d c0       	rjmp	.+58     	; 0x1cc6 <dir_read.constprop.13+0x66>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    1c8c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c8e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1c90:	90 81       	ld	r25, Z
		if (b == 0) {
    1c92:	99 23       	and	r25, r25
    1c94:	e9 f0       	breq	.+58     	; 0x1cd0 <dir_read.constprop.13+0x70>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    1c96:	83 85       	ldd	r24, Z+11	; 0x0b
    1c98:	8f 73       	andi	r24, 0x3F	; 63
    1c9a:	8c 83       	std	Y+4, r24	; 0x04
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    1c9c:	95 3e       	cpi	r25, 0xE5	; 229
    1c9e:	49 f0       	breq	.+18     	; 0x1cb2 <dir_read.constprop.13+0x52>
    1ca0:	9e 32       	cpi	r25, 0x2E	; 46
    1ca2:	39 f0       	breq	.+14     	; 0x1cb2 <dir_read.constprop.13+0x52>
    1ca4:	8f 30       	cpi	r24, 0x0F	; 15
    1ca6:	29 f0       	breq	.+10     	; 0x1cb2 <dir_read.constprop.13+0x52>
    1ca8:	8f 71       	andi	r24, 0x1F	; 31
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	11 f0       	breq	.+4      	; 0x1cb2 <dir_read.constprop.13+0x52>
static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	11 c0       	rjmp	.+34     	; 0x1cd4 <dir_read.constprop.13+0x74>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	0e 94 30 0c 	call	0x1860	; 0x1860 <dir_next>
		if (res != FR_OK) break;
    1cbc:	88 23       	and	r24, r24
    1cbe:	c1 f2       	breq	.-80     	; 0x1c70 <dir_read.constprop.13+0x10>
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <dir_read.constprop.13+0x66>
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    1cc2:	88 23       	and	r24, r24
    1cc4:	a1 f3       	breq	.-24     	; 0x1cae <dir_read.constprop.13+0x4e>
    1cc6:	1e 8a       	std	Y+22, r1	; 0x16
    1cc8:	1f 8a       	std	Y+23, r1	; 0x17
    1cca:	18 8e       	std	Y+24, r1	; 0x18
    1ccc:	19 8e       	std	Y+25, r1	; 0x19
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <dir_read.constprop.13+0x74>
	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		b = dp->dir[DIR_Name];	/* Test for the entry type */
		if (b == 0) {
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    1cd0:	84 e0       	ldi	r24, 0x04	; 4
    1cd2:	f9 cf       	rjmp	.-14     	; 0x1cc6 <dir_read.constprop.13+0x66>
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
	return res;
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	08 95       	ret

00001cde <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
    1cde:	ef 92       	push	r14
    1ce0:	ff 92       	push	r15
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1cea:	dc 01       	movw	r26, r24
    1cec:	ed 90       	ld	r14, X+
    1cee:	fc 90       	ld	r15, X
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    1cf0:	0e 94 65 06 	call	0xcca	; 0xcca <dir_sdi.constprop.15>
    1cf4:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	41 c0       	rjmp	.+130    	; 0x1d7c <dir_register+0x9e>
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	46 89       	ldd	r20, Z+22	; 0x16
    1cfe:	57 89       	ldd	r21, Z+23	; 0x17
    1d00:	60 8d       	ldd	r22, Z+24	; 0x18
    1d02:	71 8d       	ldd	r23, Z+25	; 0x19
    1d04:	c7 01       	movw	r24, r14
    1d06:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    1d0a:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	36 c0       	rjmp	.+108    	; 0x1d7c <dir_register+0x9e>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    1d10:	d8 01       	movw	r26, r16
    1d12:	5a 96       	adiw	r26, 0x1a	; 26
    1d14:	ed 91       	ld	r30, X+
    1d16:	fc 91       	ld	r31, X
    1d18:	5b 97       	sbiw	r26, 0x1b	; 27
    1d1a:	80 81       	ld	r24, Z
    1d1c:	85 3e       	cpi	r24, 0xE5	; 229
    1d1e:	99 f4       	brne	.+38     	; 0x1d46 <dir_register+0x68>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    1d20:	f8 01       	movw	r30, r16
    1d22:	46 89       	ldd	r20, Z+22	; 0x16
    1d24:	57 89       	ldd	r21, Z+23	; 0x17
    1d26:	60 8d       	ldd	r22, Z+24	; 0x18
    1d28:	71 8d       	ldd	r23, Z+25	; 0x19
    1d2a:	c7 01       	movw	r24, r14
    1d2c:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    1d30:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    1d32:	81 11       	cpse	r24, r1
    1d34:	26 c0       	rjmp	.+76     	; 0x1d82 <dir_register+0xa4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    1d36:	d8 01       	movw	r26, r16
    1d38:	5a 96       	adiw	r26, 0x1a	; 26
    1d3a:	ed 91       	ld	r30, X+
    1d3c:	fc 91       	ld	r31, X
    1d3e:	5b 97       	sbiw	r26, 0x1b	; 27
    1d40:	cf 01       	movw	r24, r30
    1d42:	80 96       	adiw	r24, 0x20	; 32
    1d44:	08 c0       	rjmp	.+16     	; 0x1d56 <dir_register+0x78>
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    1d46:	88 23       	and	r24, r24
    1d48:	59 f3       	breq	.-42     	; 0x1d20 <dir_register+0x42>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
			} else {
				n = 0;				/* Not a free entry, restart to search */
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	c8 01       	movw	r24, r16
    1d50:	0e 94 30 0c 	call	0x1860	; 0x1860 <dir_next>
    1d54:	cf cf       	rjmp	.-98     	; 0x1cf4 <dir_register+0x16>
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1d56:	11 92       	st	Z+, r1
	} while (--cnt);
    1d58:	8e 17       	cp	r24, r30
    1d5a:	9f 07       	cpc	r25, r31
    1d5c:	e1 f7       	brne	.-8      	; 0x1d56 <dir_register+0x78>
	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    1d5e:	b8 01       	movw	r22, r16
    1d60:	64 5e       	subi	r22, 0xE4	; 228
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	4b e0       	ldi	r20, 0x0B	; 11
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	f8 01       	movw	r30, r16
    1d6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d6c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d6e:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	d7 01       	movw	r26, r14
    1d76:	13 96       	adiw	r26, 0x03	; 3
    1d78:	8c 93       	st	X, r24
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <dir_register+0xa4>
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1d7c:	c4 30       	cpi	r28, 0x04	; 4
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <dir_register+0xa4>
    1d80:	c7 e0       	ldi	r28, 0x07	; 7
			fs->wflag = 1;
		}
	}

	return res;
}
    1d82:	8c 2f       	mov	r24, r28
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	08 95       	ret

00001d90 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
    1d90:	4f 92       	push	r4
    1d92:	5f 92       	push	r5
    1d94:	6f 92       	push	r6
    1d96:	7f 92       	push	r7
    1d98:	8f 92       	push	r8
    1d9a:	9f 92       	push	r9
    1d9c:	af 92       	push	r10
    1d9e:	bf 92       	push	r11
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	7c 01       	movw	r14, r24
    1dae:	4a 01       	movw	r8, r20
    1db0:	5b 01       	movw	r10, r22
    1db2:	b9 01       	movw	r22, r18
    1db4:	a8 01       	movw	r20, r16
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    1db6:	22 e0       	ldi	r18, 0x02	; 2
    1db8:	82 16       	cp	r8, r18
    1dba:	91 04       	cpc	r9, r1
    1dbc:	a1 04       	cpc	r10, r1
    1dbe:	b1 04       	cpc	r11, r1
    1dc0:	10 f4       	brcc	.+4      	; 0x1dc6 <remove_chain+0x36>
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	65 c0       	rjmp	.+202    	; 0x1e90 <remove_chain+0x100>
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	c0 81       	ld	r28, Z
    1dca:	d1 81       	ldd	r29, Z+1	; 0x01
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	ad 89       	ldd	r26, Y+21	; 0x15
    1dd2:	be 89       	ldd	r27, Y+22	; 0x16
    1dd4:	88 16       	cp	r8, r24
    1dd6:	99 06       	cpc	r9, r25
    1dd8:	aa 06       	cpc	r10, r26
    1dda:	bb 06       	cpc	r11, r27
    1ddc:	90 f7       	brcc	.-28     	; 0x1dc2 <remove_chain+0x32>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    1dde:	41 15       	cp	r20, r1
    1de0:	51 05       	cpc	r21, r1
    1de2:	61 05       	cpc	r22, r1
    1de4:	71 05       	cpc	r23, r1
    1de6:	41 f0       	breq	.+16     	; 0x1df8 <remove_chain+0x68>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    1de8:	0f ef       	ldi	r16, 0xFF	; 255
    1dea:	1f ef       	ldi	r17, 0xFF	; 255
    1dec:	98 01       	movw	r18, r16
    1dee:	ce 01       	movw	r24, r28
    1df0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <put_fat>
		if (res != FR_OK) return res;
    1df4:	81 11       	cpse	r24, r1
    1df6:	4c c0       	rjmp	.+152    	; 0x1e90 <remove_chain+0x100>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    1df8:	b5 01       	movw	r22, r10
    1dfa:	a4 01       	movw	r20, r8
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	80 81       	ld	r24, Z
    1e00:	91 81       	ldd	r25, Z+1	; 0x01
    1e02:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
    1e06:	2b 01       	movw	r4, r22
    1e08:	3c 01       	movw	r6, r24
		if (nxt == 0) break;				/* Empty cluster? */
    1e0a:	61 15       	cp	r22, r1
    1e0c:	71 05       	cpc	r23, r1
    1e0e:	81 05       	cpc	r24, r1
    1e10:	91 05       	cpc	r25, r1
    1e12:	11 f4       	brne	.+4      	; 0x1e18 <remove_chain+0x88>
				}
			}
		}
	}
#endif
	return FR_OK;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	3c c0       	rjmp	.+120    	; 0x1e90 <remove_chain+0x100>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    1e18:	61 30       	cpi	r22, 0x01	; 1
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	81 05       	cpc	r24, r1
    1e1e:	91 05       	cpc	r25, r1
    1e20:	81 f2       	breq	.-96     	; 0x1dc2 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    1e22:	6f 3f       	cpi	r22, 0xFF	; 255
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	8f 4f       	sbci	r24, 0xFF	; 255
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	89 f1       	breq	.+98     	; 0x1e8e <remove_chain+0xfe>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    1e2c:	00 e0       	ldi	r16, 0x00	; 0
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	98 01       	movw	r18, r16
    1e32:	b5 01       	movw	r22, r10
    1e34:	a4 01       	movw	r20, r8
    1e36:	ce 01       	movw	r24, r28
    1e38:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <put_fat>
			if (res != FR_OK) return res;
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	28 c0       	rjmp	.+80     	; 0x1e90 <remove_chain+0x100>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    1e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e42:	98 89       	ldd	r25, Y+16	; 0x10
    1e44:	a9 89       	ldd	r26, Y+17	; 0x11
    1e46:	ba 89       	ldd	r27, Y+18	; 0x12
    1e48:	4b 89       	ldd	r20, Y+19	; 0x13
    1e4a:	5c 89       	ldd	r21, Y+20	; 0x14
    1e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e50:	4a 01       	movw	r8, r20
    1e52:	5b 01       	movw	r10, r22
    1e54:	e2 e0       	ldi	r30, 0x02	; 2
    1e56:	8e 1a       	sub	r8, r30
    1e58:	91 08       	sbc	r9, r1
    1e5a:	a1 08       	sbc	r10, r1
    1e5c:	b1 08       	sbc	r11, r1
    1e5e:	88 15       	cp	r24, r8
    1e60:	99 05       	cpc	r25, r9
    1e62:	aa 05       	cpc	r26, r10
    1e64:	bb 05       	cpc	r27, r11
    1e66:	50 f4       	brcc	.+20     	; 0x1e7c <remove_chain+0xec>
			fs->free_clst++;
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	b1 1d       	adc	r27, r1
    1e6e:	8f 87       	std	Y+15, r24	; 0x0f
    1e70:	98 8b       	std	Y+16, r25	; 0x10
    1e72:	a9 8b       	std	Y+17, r26	; 0x11
    1e74:	ba 8b       	std	Y+18, r27	; 0x12
			fs->fsi_flag |= 1;
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	81 60       	ori	r24, 0x01	; 1
    1e7a:	8c 83       	std	Y+4, r24	; 0x04
    1e7c:	53 01       	movw	r10, r6
    1e7e:	42 01       	movw	r8, r4
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    1e80:	44 16       	cp	r4, r20
    1e82:	55 06       	cpc	r5, r21
    1e84:	66 06       	cpc	r6, r22
    1e86:	77 06       	cpc	r7, r23
    1e88:	08 f4       	brcc	.+2      	; 0x1e8c <remove_chain+0xfc>
    1e8a:	b6 cf       	rjmp	.-148    	; 0x1df8 <remove_chain+0x68>
    1e8c:	c3 cf       	rjmp	.-122    	; 0x1e14 <remove_chain+0x84>
	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
#endif
	return FR_OK;
}
    1e90:	df 91       	pop	r29
    1e92:	cf 91       	pop	r28
    1e94:	1f 91       	pop	r17
    1e96:	0f 91       	pop	r16
    1e98:	ff 90       	pop	r15
    1e9a:	ef 90       	pop	r14
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	08 95       	ret

00001eae <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
    1eb8:	0e 94 ae 04 	call	0x95c	; 0x95c <sync_window>
    1ebc:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	61 c0       	rjmp	.+194    	; 0x1f84 <sync_fs+0xd6>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    1ec2:	88 81       	ld	r24, Y
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <sync_fs+0x1c>
    1ec8:	53 c0       	rjmp	.+166    	; 0x1f70 <sync_fs+0xc2>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <sync_fs+0x24>
    1ed0:	4f c0       	rjmp	.+158    	; 0x1f70 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
    1ed2:	be 01       	movw	r22, r28
    1ed4:	61 5d       	subi	r22, 0xD1	; 209
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	fb 01       	movw	r30, r22
    1eda:	ce 01       	movw	r24, r28
    1edc:	81 5d       	subi	r24, 0xD1	; 209
    1ede:	9d 4f       	sbci	r25, 0xFD	; 253
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    1ee0:	11 92       	st	Z+, r1
	} while (--cnt);
    1ee2:	e8 17       	cp	r30, r24
    1ee4:	f9 07       	cpc	r31, r25
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <sync_fs+0x32>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1ee8:	85 e5       	ldi	r24, 0x55	; 85
    1eea:	fe 01       	movw	r30, r28
    1eec:	e3 5d       	subi	r30, 0xD3	; 211
    1eee:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef0:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    1ef2:	8a ea       	ldi	r24, 0xAA	; 170
    1ef4:	31 96       	adiw	r30, 0x01	; 1
    1ef6:	80 83       	st	Z, r24
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1ef8:	82 e5       	ldi	r24, 0x52	; 82
    1efa:	8f a7       	std	Y+47, r24	; 0x2f
	*ptr++ = (BYTE)val; val >>= 8;
    1efc:	88 ab       	std	Y+48, r24	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    1efe:	81 e6       	ldi	r24, 0x61	; 97
    1f00:	89 ab       	std	Y+49, r24	; 0x31
	*ptr++ = (BYTE)val;
    1f02:	91 e4       	ldi	r25, 0x41	; 65
    1f04:	9a ab       	std	Y+50, r25	; 0x32
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1f06:	22 e7       	ldi	r18, 0x72	; 114
    1f08:	7b 97       	sbiw	r30, 0x1b	; 27
    1f0a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1f0c:	31 96       	adiw	r30, 0x01	; 1
    1f0e:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1f10:	31 96       	adiw	r30, 0x01	; 1
    1f12:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1f14:	31 96       	adiw	r30, 0x01	; 1
    1f16:	80 83       	st	Z, r24
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    1f18:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f1a:	28 89       	ldd	r18, Y+16	; 0x10
    1f1c:	99 89       	ldd	r25, Y+17	; 0x11
    1f1e:	8a 89       	ldd	r24, Y+18	; 0x12
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1f20:	31 96       	adiw	r30, 0x01	; 1
    1f22:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1f24:	31 96       	adiw	r30, 0x01	; 1
    1f26:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1f28:	31 96       	adiw	r30, 0x01	; 1
    1f2a:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1f2c:	31 96       	adiw	r30, 0x01	; 1
    1f2e:	80 83       	st	Z, r24
			mem_set(fs->win, 0, sizeof fs->win);
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    1f30:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f32:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f34:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f36:	8e 85       	ldd	r24, Y+14	; 0x0e
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1f38:	31 96       	adiw	r30, 0x01	; 1
    1f3a:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1f3c:	31 96       	adiw	r30, 0x01	; 1
    1f3e:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1f40:	31 96       	adiw	r30, 0x01	; 1
    1f42:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1f44:	31 96       	adiw	r30, 0x01	; 1
    1f46:	80 83       	st	Z, r24
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    1f48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1f4e:	be 8d       	ldd	r27, Y+30	; 0x1e
    1f50:	9c 01       	movw	r18, r24
    1f52:	ad 01       	movw	r20, r26
    1f54:	2f 5f       	subi	r18, 0xFF	; 255
    1f56:	3f 4f       	sbci	r19, 0xFF	; 255
    1f58:	4f 4f       	sbci	r20, 0xFF	; 255
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	2b a7       	std	Y+43, r18	; 0x2b
    1f5e:	3c a7       	std	Y+44, r19	; 0x2c
    1f60:	4d a7       	std	Y+45, r20	; 0x2d
    1f62:	5e a7       	std	Y+46, r21	; 0x2e
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    1f64:	01 e0       	ldi	r16, 0x01	; 1
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <disk_write>
			fs->fsi_flag = 0;
    1f6e:	1c 82       	std	Y+4, r1	; 0x04
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <disk_ioctl>
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	81 11       	cpse	r24, r1
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <sync_fs+0xd6>
    1f82:	90 e0       	ldi	r25, 0x00	; 0
	}

	return res;
}
    1f84:	89 2f       	mov	r24, r25
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	08 95       	ret

00001f90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <f_mount+0x8>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <f_mount+0xa>
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <f_mount+0xc>
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	7e 83       	std	Y+6, r23	; 0x06
    1fa6:	6d 83       	std	Y+5, r22	; 0x05
    1fa8:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1faa:	7a 83       	std	Y+2, r23	; 0x02
    1fac:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1fb6:	97 fd       	sbrc	r25, 7
    1fb8:	20 c0       	rjmp	.+64     	; 0x1ffa <f_mount+0x6a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	ee 51       	subi	r30, 0x1E	; 30
    1fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc4:	01 90       	ld	r0, Z+
    1fc6:	f0 81       	ld	r31, Z
    1fc8:	e0 2d       	mov	r30, r0

	if (cfs) {
    1fca:	30 97       	sbiw	r30, 0x00	; 0
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1fce:	10 82       	st	Z, r1
	}

	if (fs) {
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	30 97       	sbiw	r30, 0x00	; 0
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
    1fd8:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1fda:	dc 01       	movw	r26, r24
    1fdc:	ae 51       	subi	r26, 0x1E	; 30
    1fde:	be 4f       	sbci	r27, 0xFE	; 254
    1fe0:	ed 93       	st	X+, r30
    1fe2:	fc 93       	st	X, r31

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1fe4:	11 23       	and	r17, r17
    1fe6:	59 f0       	breq	.+22     	; 0x1ffe <f_mount+0x6e>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	be 01       	movw	r22, r28
    1fec:	6d 5f       	subi	r22, 0xFD	; 253
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	05 96       	adiw	r24, 0x05	; 5
    1ff4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
	LEAVE_FF(fs, res);
    1ff8:	03 c0       	rjmp	.+6      	; 0x2000 <f_mount+0x70>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1ffa:	8b e0       	ldi	r24, 0x0B	; 11
    1ffc:	01 c0       	rjmp	.+2      	; 0x2000 <f_mount+0x70>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    1ffe:	80 e0       	ldi	r24, 0x00	; 0

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    2000:	26 96       	adiw	r28, 0x06	; 6
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	08 95       	ret

00002014 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2014:	4f 92       	push	r4
    2016:	5f 92       	push	r5
    2018:	6f 92       	push	r6
    201a:	7f 92       	push	r7
    201c:	8f 92       	push	r8
    201e:	9f 92       	push	r9
    2020:	af 92       	push	r10
    2022:	bf 92       	push	r11
    2024:	cf 92       	push	r12
    2026:	df 92       	push	r13
    2028:	ef 92       	push	r14
    202a:	ff 92       	push	r15
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	e0 97       	sbiw	r28, 0x30	; 48
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	7c a7       	std	Y+44, r23	; 0x2c
    2046:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	09 f4       	brne	.+2      	; 0x204e <f_open+0x3a>
    204c:	5b c1       	rjmp	.+694    	; 0x2304 <f_open+0x2f0>
    204e:	14 2f       	mov	r17, r20
    2050:	7c 01       	movw	r14, r24

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    2052:	24 2f       	mov	r18, r20
    2054:	2f 73       	andi	r18, 0x3F	; 63
    2056:	c2 2e       	mov	r12, r18
	res = mount_volume(&path, &fs, mode);
    2058:	42 2f       	mov	r20, r18
    205a:	be 01       	movw	r22, r28
    205c:	67 5d       	subi	r22, 0xD7	; 215
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	ce 01       	movw	r24, r28
    2062:	8b 96       	adiw	r24, 0x2b	; 43
    2064:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
    2068:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    206a:	81 11       	cpse	r24, r1
    206c:	58 c1       	rjmp	.+688    	; 0x231e <f_open+0x30a>
		dj.obj.fs = fs;
    206e:	89 a5       	ldd	r24, Y+41	; 0x29
    2070:	9a a5       	ldd	r25, Y+42	; 0x2a
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    2076:	6b a5       	ldd	r22, Y+43	; 0x2b
    2078:	7c a5       	ldd	r23, Y+44	; 0x2c
    207a:	ce 01       	movw	r24, r28
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    2082:	81 11       	cpse	r24, r1
    2084:	03 c0       	rjmp	.+6      	; 0x208c <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    2086:	98 a5       	ldd	r25, Y+40	; 0x28
    2088:	97 fd       	sbrc	r25, 7
				res = FR_INVALID_NAME;
    208a:	86 e0       	ldi	r24, 0x06	; 6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    208c:	91 2f       	mov	r25, r17
    208e:	9c 71       	andi	r25, 0x1C	; 28
    2090:	09 f4       	brne	.+2      	; 0x2094 <f_open+0x80>
    2092:	6d c0       	rjmp	.+218    	; 0x216e <f_open+0x15a>
			if (res != FR_OK) {					/* No file, create new */
    2094:	88 23       	and	r24, r24
    2096:	61 f0       	breq	.+24     	; 0x20b0 <f_open+0x9c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    2098:	84 30       	cpi	r24, 0x04	; 4
    209a:	21 f4       	brne	.+8      	; 0x20a4 <f_open+0x90>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <dir_register>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    20a4:	3c 2d       	mov	r19, r12
    20a6:	38 60       	ori	r19, 0x08	; 8
    20a8:	c3 2e       	mov	r12, r19
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    20aa:	88 23       	and	r24, r24
    20ac:	39 f0       	breq	.+14     	; 0x20bc <f_open+0xa8>
    20ae:	31 c1       	rjmp	.+610    	; 0x2312 <f_open+0x2fe>
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	81 71       	andi	r24, 0x11	; 17
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <f_open+0xa4>
    20b6:	2c c1       	rjmp	.+600    	; 0x2310 <f_open+0x2fc>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    20b8:	12 fd       	sbrc	r17, 2
    20ba:	26 c1       	rjmp	.+588    	; 0x2308 <f_open+0x2f4>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    20bc:	c3 fe       	sbrs	r12, 3
    20be:	65 c0       	rjmp	.+202    	; 0x218a <f_open+0x176>
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
    20c0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    20c2:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    20c4:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    20c6:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    20c8:	92 e3       	ldi	r25, 0x32	; 50
    20ca:	90 8b       	std	Z+16, r25	; 0x10
	*ptr++ = (BYTE)val;
    20cc:	80 e5       	ldi	r24, 0x50	; 80
    20ce:	81 8b       	std	Z+17, r24	; 0x11
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
    20d0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    20d2:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    20d4:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    20d6:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    20d8:	90 8f       	std	Z+24, r25	; 0x18
	*ptr++ = (BYTE)val;
    20da:	81 8f       	std	Z+25, r24	; 0x19
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    20dc:	ab 8c       	ldd	r10, Y+27	; 0x1b
    20de:	bc 8c       	ldd	r11, Y+28	; 0x1c
    20e0:	09 a5       	ldd	r16, Y+41	; 0x29
    20e2:	1a a5       	ldd	r17, Y+42	; 0x2a
    20e4:	b5 01       	movw	r22, r10
    20e6:	d8 01       	movw	r26, r16
    20e8:	8c 91       	ld	r24, X
    20ea:	0e 94 3d 04 	call	0x87a	; 0x87a <ld_clust.isra.3>
    20ee:	2b 01       	movw	r4, r22
    20f0:	3c 01       	movw	r6, r24
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    20f4:	f5 01       	movw	r30, r10
    20f6:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    20f8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    20fa:	fc 8d       	ldd	r31, Y+28	; 0x1c
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    20fc:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    20fe:	13 8e       	std	Z+27, r1	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    2100:	d8 01       	movw	r26, r16
    2102:	8c 91       	ld	r24, X
    2104:	83 30       	cpi	r24, 0x03	; 3
    2106:	11 f4       	brne	.+4      	; 0x210c <f_open+0xf8>
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2108:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    210a:	15 8a       	std	Z+21, r1	; 0x15
					st_dword(dj.dir + DIR_CrtTime, tm);
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    210c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    210e:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2110:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    2112:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    2114:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    2116:	17 8e       	std	Z+31, r1	; 0x1f
					st_dword(dj.dir + DIR_ModTime, tm);
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	f8 01       	movw	r30, r16
    211c:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    211e:	41 14       	cp	r4, r1
    2120:	51 04       	cpc	r5, r1
    2122:	61 04       	cpc	r6, r1
    2124:	71 04       	cpc	r7, r1
    2126:	71 f1       	breq	.+92     	; 0x2184 <f_open+0x170>
						sc = fs->winsect;
    2128:	83 a4       	ldd	r8, Z+43	; 0x2b
    212a:	94 a4       	ldd	r9, Z+44	; 0x2c
    212c:	a5 a4       	ldd	r10, Z+45	; 0x2d
    212e:	b6 a4       	ldd	r11, Z+46	; 0x2e
						res = remove_chain(&dj.obj, cl, 0);
    2130:	00 e0       	ldi	r16, 0x00	; 0
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	98 01       	movw	r18, r16
    2136:	b3 01       	movw	r22, r6
    2138:	a2 01       	movw	r20, r4
    213a:	ce 01       	movw	r24, r28
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <remove_chain>
						if (res == FR_OK) {
    2142:	81 11       	cpse	r24, r1
    2144:	e6 c0       	rjmp	.+460    	; 0x2312 <f_open+0x2fe>
							res = move_window(fs, sc);
    2146:	b5 01       	movw	r22, r10
    2148:	a4 01       	movw	r20, r8
    214a:	89 a5       	ldd	r24, Y+41	; 0x29
    214c:	9a a5       	ldd	r25, Y+42	; 0x2a
    214e:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    2152:	e9 a5       	ldd	r30, Y+41	; 0x29
    2154:	fa a5       	ldd	r31, Y+42	; 0x2a
    2156:	21 e0       	ldi	r18, 0x01	; 1
    2158:	42 1a       	sub	r4, r18
    215a:	51 08       	sbc	r5, r1
    215c:	61 08       	sbc	r6, r1
    215e:	71 08       	sbc	r7, r1
    2160:	43 86       	std	Z+11, r4	; 0x0b
    2162:	54 86       	std	Z+12, r5	; 0x0c
    2164:	65 86       	std	Z+13, r6	; 0x0d
    2166:	76 86       	std	Z+14, r7	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    2168:	88 23       	and	r24, r24
    216a:	51 f0       	breq	.+20     	; 0x2180 <f_open+0x16c>
    216c:	d2 c0       	rjmp	.+420    	; 0x2312 <f_open+0x2fe>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
    216e:	81 11       	cpse	r24, r1
    2170:	d0 c0       	rjmp	.+416    	; 0x2312 <f_open+0x2fe>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	84 fd       	sbrc	r24, 4
    2176:	ca c0       	rjmp	.+404    	; 0x230c <f_open+0x2f8>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    2178:	11 ff       	sbrs	r17, 1
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <f_open+0x16c>
    217c:	80 fd       	sbrc	r24, 0
    217e:	c8 c0       	rjmp	.+400    	; 0x2310 <f_open+0x2fc>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    2180:	c3 fe       	sbrs	r12, 3
    2182:	03 c0       	rjmp	.+6      	; 0x218a <f_open+0x176>
    2184:	3c 2d       	mov	r19, r12
    2186:	30 64       	ori	r19, 0x40	; 64
    2188:	c3 2e       	mov	r12, r19
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    218a:	09 a5       	ldd	r16, Y+41	; 0x29
    218c:	1a a5       	ldd	r17, Y+42	; 0x2a
    218e:	f8 01       	movw	r30, r16
    2190:	83 a5       	ldd	r24, Z+43	; 0x2b
    2192:	94 a5       	ldd	r25, Z+44	; 0x2c
    2194:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2196:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2198:	f7 01       	movw	r30, r14
    219a:	84 8f       	std	Z+28, r24	; 0x1c
    219c:	95 8f       	std	Z+29, r25	; 0x1d
    219e:	a6 8f       	std	Z+30, r26	; 0x1e
    21a0:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    21a2:	ab 8c       	ldd	r10, Y+27	; 0x1b
    21a4:	bc 8c       	ldd	r11, Y+28	; 0x1c
    21a6:	b1 a2       	std	Z+33, r11	; 0x21
    21a8:	a0 a2       	std	Z+32, r10	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    21aa:	b5 01       	movw	r22, r10
    21ac:	d8 01       	movw	r26, r16
    21ae:	8c 91       	ld	r24, X
    21b0:	0e 94 3d 04 	call	0x87a	; 0x87a <ld_clust.isra.3>
    21b4:	2b 01       	movw	r4, r22
    21b6:	3c 01       	movw	r6, r24
    21b8:	f7 01       	movw	r30, r14
    21ba:	66 83       	std	Z+6, r22	; 0x06
    21bc:	77 83       	std	Z+7, r23	; 0x07
    21be:	80 87       	std	Z+8, r24	; 0x08
    21c0:	91 87       	std	Z+9, r25	; 0x09
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    21c2:	c5 01       	movw	r24, r10
    21c4:	4c 96       	adiw	r24, 0x1c	; 28
    21c6:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    21ca:	4b 01       	movw	r8, r22
    21cc:	5c 01       	movw	r10, r24
    21ce:	d7 01       	movw	r26, r14
    21d0:	1a 96       	adiw	r26, 0x0a	; 10
    21d2:	6d 93       	st	X+, r22
    21d4:	7d 93       	st	X+, r23
    21d6:	8d 93       	st	X+, r24
    21d8:	9c 93       	st	X, r25
    21da:	1d 97       	sbiw	r26, 0x0d	; 13
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    21dc:	11 96       	adiw	r26, 0x01	; 1
    21de:	1c 93       	st	X, r17
    21e0:	0e 93       	st	-X, r16
			fp->obj.id = fs->id;
    21e2:	f8 01       	movw	r30, r16
    21e4:	85 81       	ldd	r24, Z+5	; 0x05
    21e6:	96 81       	ldd	r25, Z+6	; 0x06
    21e8:	13 96       	adiw	r26, 0x03	; 3
    21ea:	9c 93       	st	X, r25
    21ec:	8e 93       	st	-X, r24
    21ee:	12 97       	sbiw	r26, 0x02	; 2
			fp->flag = mode;		/* Set file access mode */
    21f0:	1e 96       	adiw	r26, 0x0e	; 14
    21f2:	cc 92       	st	X, r12
    21f4:	1e 97       	sbiw	r26, 0x0e	; 14
			fp->err = 0;			/* Clear error flag */
    21f6:	1f 96       	adiw	r26, 0x0f	; 15
    21f8:	1c 92       	st	X, r1
    21fa:	1f 97       	sbiw	r26, 0x0f	; 15
			fp->sect = 0;			/* Invalidate current data sector */
    21fc:	58 96       	adiw	r26, 0x18	; 24
    21fe:	1d 92       	st	X+, r1
    2200:	1d 92       	st	X+, r1
    2202:	1d 92       	st	X+, r1
    2204:	1c 92       	st	X, r1
    2206:	5b 97       	sbiw	r26, 0x1b	; 27
			fp->fptr = 0;			/* Set file pointer top of the file */
    2208:	f7 01       	movw	r30, r14
    220a:	10 8a       	std	Z+16, r1	; 0x10
    220c:	11 8a       	std	Z+17, r1	; 0x11
    220e:	12 8a       	std	Z+18, r1	; 0x12
    2210:	13 8a       	std	Z+19, r1	; 0x13
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    2212:	c5 fe       	sbrs	r12, 5
    2214:	80 c0       	rjmp	.+256    	; 0x2316 <f_open+0x302>
    2216:	81 14       	cp	r8, r1
    2218:	91 04       	cpc	r9, r1
    221a:	a1 04       	cpc	r10, r1
    221c:	b1 04       	cpc	r11, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <f_open+0x20e>
    2220:	7a c0       	rjmp	.+244    	; 0x2316 <f_open+0x302>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    2222:	50 96       	adiw	r26, 0x10	; 16
    2224:	8d 92       	st	X+, r8
    2226:	9d 92       	st	X+, r9
    2228:	ad 92       	st	X+, r10
    222a:	bc 92       	st	X, r11
    222c:	53 97       	sbiw	r26, 0x13	; 19
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    222e:	f8 01       	movw	r30, r16
    2230:	81 85       	ldd	r24, Z+9	; 0x09
    2232:	92 85       	ldd	r25, Z+10	; 0x0a
    2234:	a0 e0       	ldi	r26, 0x00	; 0
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	9c 01       	movw	r18, r24
    223a:	ad 01       	movw	r20, r26
    223c:	69 e0       	ldi	r22, 0x09	; 9
    223e:	22 0f       	add	r18, r18
    2240:	33 1f       	adc	r19, r19
    2242:	44 1f       	adc	r20, r20
    2244:	55 1f       	adc	r21, r21
    2246:	6a 95       	dec	r22
    2248:	d1 f7       	brne	.-12     	; 0x223e <f_open+0x22a>
    224a:	2d a7       	std	Y+45, r18	; 0x2d
    224c:	3e a7       	std	Y+46, r19	; 0x2e
    224e:	4f a7       	std	Y+47, r20	; 0x2f
    2250:	58 ab       	std	Y+48, r21	; 0x30
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    2252:	8d a5       	ldd	r24, Y+45	; 0x2d
    2254:	9e a5       	ldd	r25, Y+46	; 0x2e
    2256:	af a5       	ldd	r26, Y+47	; 0x2f
    2258:	b8 a9       	ldd	r27, Y+48	; 0x30
    225a:	88 15       	cp	r24, r8
    225c:	99 05       	cpc	r25, r9
    225e:	aa 05       	cpc	r26, r10
    2260:	bb 05       	cpc	r27, r11
    2262:	00 f5       	brcc	.+64     	; 0x22a4 <f_open+0x290>
					clst = get_fat(&fp->obj, clst);
    2264:	b3 01       	movw	r22, r6
    2266:	a2 01       	movw	r20, r4
    2268:	d7 01       	movw	r26, r14
    226a:	8d 91       	ld	r24, X+
    226c:	9c 91       	ld	r25, X
    226e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
    2272:	2b 01       	movw	r4, r22
    2274:	3c 01       	movw	r6, r24
    2276:	2d a5       	ldd	r18, Y+45	; 0x2d
    2278:	3e a5       	ldd	r19, Y+46	; 0x2e
    227a:	4f a5       	ldd	r20, Y+47	; 0x2f
    227c:	58 a9       	ldd	r21, Y+48	; 0x30
    227e:	82 1a       	sub	r8, r18
    2280:	93 0a       	sbc	r9, r19
    2282:	a4 0a       	sbc	r10, r20
    2284:	b5 0a       	sbc	r11, r21
					if (clst <= 1) res = FR_INT_ERR;
    2286:	62 30       	cpi	r22, 0x02	; 2
    2288:	71 05       	cpc	r23, r1
    228a:	81 05       	cpc	r24, r1
    228c:	91 05       	cpc	r25, r1
    228e:	40 f0       	brcs	.+16     	; 0x22a0 <f_open+0x28c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    2290:	6f 3f       	cpi	r22, 0xFF	; 255
    2292:	7f 4f       	sbci	r23, 0xFF	; 255
    2294:	8f 4f       	sbci	r24, 0xFF	; 255
    2296:	9f 4f       	sbci	r25, 0xFF	; 255
    2298:	e1 f6       	brne	.-72     	; 0x2252 <f_open+0x23e>
    229a:	dd 24       	eor	r13, r13
    229c:	d3 94       	inc	r13
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <f_open+0x290>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    22a0:	82 e0       	ldi	r24, 0x02	; 2
    22a2:	d8 2e       	mov	r13, r24
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    22a4:	d7 01       	movw	r26, r14
    22a6:	54 96       	adiw	r26, 0x14	; 20
    22a8:	4d 92       	st	X+, r4
    22aa:	5d 92       	st	X+, r5
    22ac:	6d 92       	st	X+, r6
    22ae:	7c 92       	st	X, r7
    22b0:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    22b2:	d1 10       	cpse	r13, r1
    22b4:	34 c0       	rjmp	.+104    	; 0x231e <f_open+0x30a>
    22b6:	d5 01       	movw	r26, r10
    22b8:	c4 01       	movw	r24, r8
    22ba:	91 70       	andi	r25, 0x01	; 1
    22bc:	aa 27       	eor	r26, r26
    22be:	bb 27       	eor	r27, r27
    22c0:	89 2b       	or	r24, r25
    22c2:	8a 2b       	or	r24, r26
    22c4:	8b 2b       	or	r24, r27
    22c6:	39 f1       	breq	.+78     	; 0x2316 <f_open+0x302>
					sc = clst2sect(fs, clst);
    22c8:	b3 01       	movw	r22, r6
    22ca:	a2 01       	movw	r20, r4
    22cc:	89 a5       	ldd	r24, Y+41	; 0x29
    22ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d0:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
					if (sc == 0) {
    22d4:	61 15       	cp	r22, r1
    22d6:	71 05       	cpc	r23, r1
    22d8:	81 05       	cpc	r24, r1
    22da:	91 05       	cpc	r25, r1
    22dc:	f1 f0       	breq	.+60     	; 0x231a <f_open+0x306>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    22de:	29 e0       	ldi	r18, 0x09	; 9
    22e0:	b6 94       	lsr	r11
    22e2:	a7 94       	ror	r10
    22e4:	97 94       	ror	r9
    22e6:	87 94       	ror	r8
    22e8:	2a 95       	dec	r18
    22ea:	d1 f7       	brne	.-12     	; 0x22e0 <f_open+0x2cc>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	88 0d       	add	r24, r8
    22f2:	99 1d       	adc	r25, r9
    22f4:	aa 1d       	adc	r26, r10
    22f6:	bb 1d       	adc	r27, r11
    22f8:	f7 01       	movw	r30, r14
    22fa:	80 8f       	std	Z+24, r24	; 0x18
    22fc:	91 8f       	std	Z+25, r25	; 0x19
    22fe:	a2 8f       	std	Z+26, r26	; 0x1a
    2300:	b3 8f       	std	Z+27, r27	; 0x1b
    2302:	09 c0       	rjmp	.+18     	; 0x2316 <f_open+0x302>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    2304:	89 e0       	ldi	r24, 0x09	; 9
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <f_open+0x312>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    2308:	88 e0       	ldi	r24, 0x08	; 8
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <f_open+0x2fe>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
					res = FR_NO_FILE;
    230c:	84 e0       	ldi	r24, 0x04	; 4
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <f_open+0x2fe>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
						res = FR_DENIED;
    2310:	87 e0       	ldi	r24, 0x07	; 7
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    2312:	d8 2e       	mov	r13, r24
    2314:	04 c0       	rjmp	.+8      	; 0x231e <f_open+0x30a>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	06 c0       	rjmp	.+12     	; 0x2326 <f_open+0x312>
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					sc = clst2sect(fs, clst);
					if (sc == 0) {
						res = FR_INT_ERR;
    231a:	92 e0       	ldi	r25, 0x02	; 2
    231c:	d9 2e       	mov	r13, r25
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    231e:	d7 01       	movw	r26, r14
    2320:	1d 92       	st	X+, r1
    2322:	1c 92       	st	X, r1
    2324:	8d 2d       	mov	r24, r13

	LEAVE_FF(fs, res);
}
    2326:	e0 96       	adiw	r28, 0x30	; 48
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	bf 90       	pop	r11
    2344:	af 90       	pop	r10
    2346:	9f 90       	pop	r9
    2348:	8f 90       	pop	r8
    234a:	7f 90       	pop	r7
    234c:	6f 90       	pop	r6
    234e:	5f 90       	pop	r5
    2350:	4f 90       	pop	r4
    2352:	08 95       	ret

00002354 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    2354:	2f 92       	push	r2
    2356:	3f 92       	push	r3
    2358:	4f 92       	push	r4
    235a:	5f 92       	push	r5
    235c:	6f 92       	push	r6
    235e:	7f 92       	push	r7
    2360:	8f 92       	push	r8
    2362:	9f 92       	push	r9
    2364:	af 92       	push	r10
    2366:	bf 92       	push	r11
    2368:	cf 92       	push	r12
    236a:	df 92       	push	r13
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	00 d0       	rcall	.+0      	; 0x237a <f_read+0x26>
    237a:	00 d0       	rcall	.+0      	; 0x237c <f_read+0x28>
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	7c 01       	movw	r14, r24
    2382:	4b 01       	movw	r8, r22
    2384:	5a 01       	movw	r10, r20
    2386:	3c 83       	std	Y+4, r19	; 0x04
    2388:	2b 83       	std	Y+3, r18	; 0x03
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    238a:	f9 01       	movw	r30, r18
    238c:	11 82       	std	Z+1, r1	; 0x01
    238e:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    2390:	be 01       	movw	r22, r28
    2392:	6f 5f       	subi	r22, 0xFF	; 255
    2394:	7f 4f       	sbci	r23, 0xFF	; 255
    2396:	0e 94 08 04 	call	0x810	; 0x810 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    239a:	81 11       	cpse	r24, r1
    239c:	12 c1       	rjmp	.+548    	; 0x25c2 <f_read+0x26e>
    239e:	f7 01       	movw	r30, r14
    23a0:	87 85       	ldd	r24, Z+15	; 0x0f
    23a2:	81 11       	cpse	r24, r1
    23a4:	0e c1       	rjmp	.+540    	; 0x25c2 <f_read+0x26e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    23a6:	86 85       	ldd	r24, Z+14	; 0x0e
    23a8:	80 ff       	sbrs	r24, 0
    23aa:	0a c1       	rjmp	.+532    	; 0x25c0 <f_read+0x26c>
	remain = fp->obj.objsize - fp->fptr;
    23ac:	82 85       	ldd	r24, Z+10	; 0x0a
    23ae:	93 85       	ldd	r25, Z+11	; 0x0b
    23b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    23b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    23b4:	40 89       	ldd	r20, Z+16	; 0x10
    23b6:	51 89       	ldd	r21, Z+17	; 0x11
    23b8:	62 89       	ldd	r22, Z+18	; 0x12
    23ba:	73 89       	ldd	r23, Z+19	; 0x13
    23bc:	84 1b       	sub	r24, r20
    23be:	95 0b       	sbc	r25, r21
    23c0:	a6 0b       	sbc	r26, r22
    23c2:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    23c4:	a5 01       	movw	r20, r10
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	84 17       	cp	r24, r20
    23cc:	95 07       	cpc	r25, r21
    23ce:	a6 07       	cpc	r26, r22
    23d0:	b7 07       	cpc	r27, r23
    23d2:	08 f0       	brcs	.+2      	; 0x23d6 <f_read+0x82>
    23d4:	7b c0       	rjmp	.+246    	; 0x24cc <f_read+0x178>
    23d6:	5c 01       	movw	r10, r24
    23d8:	79 c0       	rjmp	.+242    	; 0x24cc <f_read+0x178>

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    23da:	f7 01       	movw	r30, r14
    23dc:	80 89       	ldd	r24, Z+16	; 0x10
    23de:	91 89       	ldd	r25, Z+17	; 0x11
    23e0:	a2 89       	ldd	r26, Z+18	; 0x12
    23e2:	b3 89       	ldd	r27, Z+19	; 0x13
    23e4:	ac 01       	movw	r20, r24
    23e6:	bd 01       	movw	r22, r26
    23e8:	51 70       	andi	r21, 0x01	; 1
    23ea:	66 27       	eor	r22, r22
    23ec:	77 27       	eor	r23, r23
    23ee:	45 2b       	or	r20, r21
    23f0:	46 2b       	or	r20, r22
    23f2:	47 2b       	or	r20, r23
    23f4:	09 f0       	breq	.+2      	; 0x23f8 <f_read+0xa4>
    23f6:	bb c0       	rjmp	.+374    	; 0x256e <f_read+0x21a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	01 85       	ldd	r16, Z+9	; 0x09
    23fe:	12 85       	ldd	r17, Z+10	; 0x0a
    2400:	01 50       	subi	r16, 0x01	; 1
    2402:	11 09       	sbc	r17, r1
    2404:	ac 01       	movw	r20, r24
    2406:	bd 01       	movw	r22, r26
    2408:	e9 e0       	ldi	r30, 0x09	; 9
    240a:	76 95       	lsr	r23
    240c:	67 95       	ror	r22
    240e:	57 95       	ror	r21
    2410:	47 95       	ror	r20
    2412:	ea 95       	dec	r30
    2414:	d1 f7       	brne	.-12     	; 0x240a <f_read+0xb6>
    2416:	04 23       	and	r16, r20
    2418:	15 23       	and	r17, r21
			if (csect == 0) {					/* On the cluster boundary? */
    241a:	01 15       	cp	r16, r1
    241c:	11 05       	cpc	r17, r1
    241e:	09 f4       	brne	.+2      	; 0x2422 <f_read+0xce>
    2420:	5a c0       	rjmp	.+180    	; 0x24d6 <f_read+0x182>
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    2422:	29 80       	ldd	r2, Y+1	; 0x01
    2424:	3a 80       	ldd	r3, Y+2	; 0x02
    2426:	f7 01       	movw	r30, r14
    2428:	44 89       	ldd	r20, Z+20	; 0x14
    242a:	55 89       	ldd	r21, Z+21	; 0x15
    242c:	66 89       	ldd	r22, Z+22	; 0x16
    242e:	77 89       	ldd	r23, Z+23	; 0x17
    2430:	c1 01       	movw	r24, r2
    2432:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    2436:	61 15       	cp	r22, r1
    2438:	71 05       	cpc	r23, r1
    243a:	81 05       	cpc	r24, r1
    243c:	91 05       	cpc	r25, r1
    243e:	09 f4       	brne	.+2      	; 0x2442 <f_read+0xee>
    2440:	61 c0       	rjmp	.+194    	; 0x2504 <f_read+0x1b0>
			sect += csect;
    2442:	2b 01       	movw	r4, r22
    2444:	3c 01       	movw	r6, r24
    2446:	40 0e       	add	r4, r16
    2448:	51 1e       	adc	r5, r17
    244a:	61 1c       	adc	r6, r1
    244c:	71 1c       	adc	r7, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    244e:	65 01       	movw	r12, r10
    2450:	cd 2c       	mov	r12, r13
    2452:	dd 24       	eor	r13, r13
    2454:	c6 94       	lsr	r12
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    2456:	c1 14       	cp	r12, r1
    2458:	d1 04       	cpc	r13, r1
    245a:	09 f4       	brne	.+2      	; 0x245e <f_read+0x10a>
    245c:	83 c0       	rjmp	.+262    	; 0x2564 <f_read+0x210>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    245e:	f1 01       	movw	r30, r2
    2460:	81 85       	ldd	r24, Z+9	; 0x09
    2462:	92 85       	ldd	r25, Z+10	; 0x0a
    2464:	98 01       	movw	r18, r16
    2466:	2c 0d       	add	r18, r12
    2468:	3d 1d       	adc	r19, r13
    246a:	82 17       	cp	r24, r18
    246c:	93 07       	cpc	r25, r19
    246e:	18 f4       	brcc	.+6      	; 0x2476 <f_read+0x122>
					cc = fs->csize - csect;
    2470:	6c 01       	movw	r12, r24
    2472:	c0 1a       	sub	r12, r16
    2474:	d1 0a       	sbc	r13, r17
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2476:	86 01       	movw	r16, r12
    2478:	a3 01       	movw	r20, r6
    247a:	92 01       	movw	r18, r4
    247c:	b4 01       	movw	r22, r8
    247e:	f1 01       	movw	r30, r2
    2480:	81 81       	ldd	r24, Z+1	; 0x01
    2482:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <disk_read>
    2486:	81 11       	cpse	r24, r1
    2488:	45 c0       	rjmp	.+138    	; 0x2514 <f_read+0x1c0>
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    248a:	e9 81       	ldd	r30, Y+1	; 0x01
    248c:	fa 81       	ldd	r31, Y+2	; 0x02
    248e:	83 81       	ldd	r24, Z+3	; 0x03
    2490:	81 11       	cpse	r24, r1
    2492:	4a c0       	rjmp	.+148    	; 0x2528 <f_read+0x1d4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    2494:	dc 2c       	mov	r13, r12
    2496:	cc 24       	eor	r12, r12
    2498:	dd 0c       	add	r13, r13
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
    249a:	ac 18       	sub	r10, r12
    249c:	bd 08       	sbc	r11, r13
    249e:	eb 81       	ldd	r30, Y+3	; 0x03
    24a0:	fc 81       	ldd	r31, Y+4	; 0x04
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	8c 0d       	add	r24, r12
    24a8:	9d 1d       	adc	r25, r13
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
    24ae:	8c 0c       	add	r8, r12
    24b0:	9d 1c       	adc	r9, r13
    24b2:	f7 01       	movw	r30, r14
    24b4:	80 89       	ldd	r24, Z+16	; 0x10
    24b6:	91 89       	ldd	r25, Z+17	; 0x11
    24b8:	a2 89       	ldd	r26, Z+18	; 0x12
    24ba:	b3 89       	ldd	r27, Z+19	; 0x13
    24bc:	8c 0d       	add	r24, r12
    24be:	9d 1d       	adc	r25, r13
    24c0:	a1 1d       	adc	r26, r1
    24c2:	b1 1d       	adc	r27, r1
    24c4:	80 8b       	std	Z+16, r24	; 0x10
    24c6:	91 8b       	std	Z+17, r25	; 0x11
    24c8:	a2 8b       	std	Z+18, r26	; 0x12
    24ca:	b3 8b       	std	Z+19, r27	; 0x13
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until btr bytes read */
    24cc:	a1 14       	cp	r10, r1
    24ce:	b1 04       	cpc	r11, r1
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <f_read+0x180>
    24d2:	83 cf       	rjmp	.-250    	; 0x23da <f_read+0x86>
    24d4:	73 c0       	rjmp	.+230    	; 0x25bc <f_read+0x268>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    24d6:	f7 01       	movw	r30, r14
	for ( ;  btr;								/* Repeat until btr bytes read */
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    24d8:	89 2b       	or	r24, r25
    24da:	8a 2b       	or	r24, r26
    24dc:	8b 2b       	or	r24, r27
    24de:	29 f4       	brne	.+10     	; 0x24ea <f_read+0x196>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    24e0:	66 81       	ldd	r22, Z+6	; 0x06
    24e2:	77 81       	ldd	r23, Z+7	; 0x07
    24e4:	80 85       	ldd	r24, Z+8	; 0x08
    24e6:	91 85       	ldd	r25, Z+9	; 0x09
    24e8:	08 c0       	rjmp	.+16     	; 0x24fa <f_read+0x1a6>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    24ea:	44 89       	ldd	r20, Z+20	; 0x14
    24ec:	55 89       	ldd	r21, Z+21	; 0x15
    24ee:	66 89       	ldd	r22, Z+22	; 0x16
    24f0:	77 89       	ldd	r23, Z+23	; 0x17
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    24fa:	62 30       	cpi	r22, 0x02	; 2
    24fc:	71 05       	cpc	r23, r1
    24fe:	81 05       	cpc	r24, r1
    2500:	91 05       	cpc	r25, r1
    2502:	10 f4       	brcc	.+4      	; 0x2508 <f_read+0x1b4>
    2504:	82 e0       	ldi	r24, 0x02	; 2
    2506:	07 c0       	rjmp	.+14     	; 0x2516 <f_read+0x1c2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2508:	6f 3f       	cpi	r22, 0xFF	; 255
    250a:	ff ef       	ldi	r31, 0xFF	; 255
    250c:	7f 07       	cpc	r23, r31
    250e:	8f 07       	cpc	r24, r31
    2510:	9f 07       	cpc	r25, r31
    2512:	21 f4       	brne	.+8      	; 0x251c <f_read+0x1c8>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	f7 01       	movw	r30, r14
    2518:	87 87       	std	Z+15, r24	; 0x0f
    251a:	53 c0       	rjmp	.+166    	; 0x25c2 <f_read+0x26e>
				fp->clust = clst;				/* Update current cluster */
    251c:	f7 01       	movw	r30, r14
    251e:	64 8b       	std	Z+20, r22	; 0x14
    2520:	75 8b       	std	Z+21, r23	; 0x15
    2522:	86 8b       	std	Z+22, r24	; 0x16
    2524:	97 8b       	std	Z+23, r25	; 0x17
    2526:	7d cf       	rjmp	.-262    	; 0x2422 <f_read+0xce>
					cc = fs->csize - csect;
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
    2528:	83 a5       	ldd	r24, Z+43	; 0x2b
    252a:	94 a5       	ldd	r25, Z+44	; 0x2c
    252c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    252e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2530:	84 19       	sub	r24, r4
    2532:	95 09       	sbc	r25, r5
    2534:	a6 09       	sbc	r26, r6
    2536:	b7 09       	sbc	r27, r7
    2538:	a6 01       	movw	r20, r12
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	84 17       	cp	r24, r20
    2540:	95 07       	cpc	r25, r21
    2542:	a6 07       	cpc	r26, r22
    2544:	b7 07       	cpc	r27, r23
    2546:	08 f0       	brcs	.+2      	; 0x254a <f_read+0x1f6>
    2548:	a5 cf       	rjmp	.-182    	; 0x2494 <f_read+0x140>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    254a:	bf 01       	movw	r22, r30
    254c:	61 5d       	subi	r22, 0xD1	; 209
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	98 2f       	mov	r25, r24
    2552:	88 27       	eor	r24, r24
    2554:	99 0f       	add	r25, r25
    2556:	40 e0       	ldi	r20, 0x00	; 0
    2558:	52 e0       	ldi	r21, 0x02	; 2
    255a:	88 0d       	add	r24, r8
    255c:	99 1d       	adc	r25, r9
    255e:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
    2562:	98 cf       	rjmp	.-208    	; 0x2494 <f_read+0x140>
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
    2564:	f7 01       	movw	r30, r14
    2566:	40 8e       	std	Z+24, r4	; 0x18
    2568:	51 8e       	std	Z+25, r5	; 0x19
    256a:	62 8e       	std	Z+26, r6	; 0x1a
    256c:	73 8e       	std	Z+27, r7	; 0x1b
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    256e:	f7 01       	movw	r30, r14
    2570:	80 89       	ldd	r24, Z+16	; 0x10
    2572:	91 89       	ldd	r25, Z+17	; 0x11
    2574:	91 70       	andi	r25, 0x01	; 1
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	32 e0       	ldi	r19, 0x02	; 2
    257a:	28 1b       	sub	r18, r24
    257c:	39 0b       	sbc	r19, r25
    257e:	65 01       	movw	r12, r10
    2580:	2a 15       	cp	r18, r10
    2582:	3b 05       	cpc	r19, r11
    2584:	08 f4       	brcc	.+2      	; 0x2588 <f_read+0x234>
    2586:	69 01       	movw	r12, r18
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    2588:	f7 01       	movw	r30, r14
    258a:	40 8d       	ldd	r20, Z+24	; 0x18
    258c:	51 8d       	ldd	r21, Z+25	; 0x19
    258e:	62 8d       	ldd	r22, Z+26	; 0x1a
    2590:	73 8d       	ldd	r23, Z+27	; 0x1b
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    259a:	81 11       	cpse	r24, r1
    259c:	bb cf       	rjmp	.-138    	; 0x2514 <f_read+0x1c0>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    259e:	69 81       	ldd	r22, Y+1	; 0x01
    25a0:	7a 81       	ldd	r23, Y+2	; 0x02
    25a2:	61 5d       	subi	r22, 0xD1	; 209
    25a4:	7f 4f       	sbci	r23, 0xFF	; 255
    25a6:	f7 01       	movw	r30, r14
    25a8:	80 89       	ldd	r24, Z+16	; 0x10
    25aa:	91 89       	ldd	r25, Z+17	; 0x11
    25ac:	91 70       	andi	r25, 0x01	; 1
    25ae:	68 0f       	add	r22, r24
    25b0:	79 1f       	adc	r23, r25
    25b2:	a6 01       	movw	r20, r12
    25b4:	c4 01       	movw	r24, r8
    25b6:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
    25ba:	6f cf       	rjmp	.-290    	; 0x249a <f_read+0x146>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	01 c0       	rjmp	.+2      	; 0x25c2 <f_read+0x26e>


	*br = 0;	/* Clear read byte counter */
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    25c0:	87 e0       	ldi	r24, 0x07	; 7
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	7f 90       	pop	r7
    25e4:	6f 90       	pop	r6
    25e6:	5f 90       	pop	r5
    25e8:	4f 90       	pop	r4
    25ea:	3f 90       	pop	r3
    25ec:	2f 90       	pop	r2
    25ee:	08 95       	ret

000025f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    25f0:	2f 92       	push	r2
    25f2:	3f 92       	push	r3
    25f4:	4f 92       	push	r4
    25f6:	5f 92       	push	r5
    25f8:	6f 92       	push	r6
    25fa:	7f 92       	push	r7
    25fc:	8f 92       	push	r8
    25fe:	9f 92       	push	r9
    2600:	af 92       	push	r10
    2602:	bf 92       	push	r11
    2604:	cf 92       	push	r12
    2606:	df 92       	push	r13
    2608:	ef 92       	push	r14
    260a:	ff 92       	push	r15
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	00 d0       	rcall	.+0      	; 0x2616 <f_write+0x26>
    2616:	00 d0       	rcall	.+0      	; 0x2618 <f_write+0x28>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	7c 01       	movw	r14, r24
    261e:	4b 01       	movw	r8, r22
    2620:	5a 01       	movw	r10, r20
    2622:	3c 83       	std	Y+4, r19	; 0x04
    2624:	2b 83       	std	Y+3, r18	; 0x03
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    2626:	f9 01       	movw	r30, r18
    2628:	11 82       	std	Z+1, r1	; 0x01
    262a:	10 82       	st	Z, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    262c:	be 01       	movw	r22, r28
    262e:	6f 5f       	subi	r22, 0xFF	; 255
    2630:	7f 4f       	sbci	r23, 0xFF	; 255
    2632:	0e 94 08 04 	call	0x810	; 0x810 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    2636:	81 11       	cpse	r24, r1
    2638:	6f c1       	rjmp	.+734    	; 0x2918 <f_write+0x328>
    263a:	f7 01       	movw	r30, r14
    263c:	87 85       	ldd	r24, Z+15	; 0x0f
    263e:	81 11       	cpse	r24, r1
    2640:	6b c1       	rjmp	.+726    	; 0x2918 <f_write+0x328>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2642:	86 85       	ldd	r24, Z+14	; 0x0e
    2644:	81 ff       	sbrs	r24, 1
    2646:	67 c1       	rjmp	.+718    	; 0x2916 <f_write+0x326>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    2648:	80 89       	ldd	r24, Z+16	; 0x10
    264a:	91 89       	ldd	r25, Z+17	; 0x11
    264c:	a2 89       	ldd	r26, Z+18	; 0x12
    264e:	b3 89       	ldd	r27, Z+19	; 0x13
    2650:	ac 01       	movw	r20, r24
    2652:	bd 01       	movw	r22, r26
    2654:	4a 0d       	add	r20, r10
    2656:	5b 1d       	adc	r21, r11
    2658:	61 1d       	adc	r22, r1
    265a:	71 1d       	adc	r23, r1
    265c:	48 17       	cp	r20, r24
    265e:	59 07       	cpc	r21, r25
    2660:	6a 07       	cpc	r22, r26
    2662:	7b 07       	cpc	r23, r27
    2664:	08 f0       	brcs	.+2      	; 0x2668 <f_write+0x78>
    2666:	bb c0       	rjmp	.+374    	; 0x27de <f_write+0x1ee>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    2668:	5c 01       	movw	r10, r24
    266a:	a0 94       	com	r10
    266c:	b0 94       	com	r11
    266e:	b7 c0       	rjmp	.+366    	; 0x27de <f_write+0x1ee>
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    2670:	f7 01       	movw	r30, r14
    2672:	80 89       	ldd	r24, Z+16	; 0x10
    2674:	91 89       	ldd	r25, Z+17	; 0x11
    2676:	a2 89       	ldd	r26, Z+18	; 0x12
    2678:	b3 89       	ldd	r27, Z+19	; 0x13
    267a:	ac 01       	movw	r20, r24
    267c:	bd 01       	movw	r22, r26
    267e:	51 70       	andi	r21, 0x01	; 1
    2680:	66 27       	eor	r22, r22
    2682:	77 27       	eor	r23, r23
    2684:	45 2b       	or	r20, r21
    2686:	46 2b       	or	r20, r22
    2688:	47 2b       	or	r20, r23
    268a:	09 f0       	breq	.+2      	; 0x268e <f_write+0x9e>
    268c:	19 c1       	rjmp	.+562    	; 0x28c0 <f_write+0x2d0>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	fa 81       	ldd	r31, Y+2	; 0x02
    2692:	01 85       	ldd	r16, Z+9	; 0x09
    2694:	12 85       	ldd	r17, Z+10	; 0x0a
    2696:	01 50       	subi	r16, 0x01	; 1
    2698:	11 09       	sbc	r17, r1
    269a:	ac 01       	movw	r20, r24
    269c:	bd 01       	movw	r22, r26
    269e:	e9 e0       	ldi	r30, 0x09	; 9
    26a0:	76 95       	lsr	r23
    26a2:	67 95       	ror	r22
    26a4:	57 95       	ror	r21
    26a6:	47 95       	ror	r20
    26a8:	ea 95       	dec	r30
    26aa:	d1 f7       	brne	.-12     	; 0x26a0 <f_write+0xb0>
    26ac:	04 23       	and	r16, r20
    26ae:	15 23       	and	r17, r21
			if (csect == 0) {				/* On the cluster boundary? */
    26b0:	01 15       	cp	r16, r1
    26b2:	11 05       	cpc	r17, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <f_write+0xc8>
    26b6:	98 c0       	rjmp	.+304    	; 0x27e8 <f_write+0x1f8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;			/* Update current cluster */
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	fc 01       	movw	r30, r24
    26be:	43 a4       	ldd	r4, Z+43	; 0x2b
    26c0:	54 a4       	ldd	r5, Z+44	; 0x2c
    26c2:	65 a4       	ldd	r6, Z+45	; 0x2d
    26c4:	76 a4       	ldd	r7, Z+46	; 0x2e
    26c6:	f7 01       	movw	r30, r14
    26c8:	40 8d       	ldd	r20, Z+24	; 0x18
    26ca:	51 8d       	ldd	r21, Z+25	; 0x19
    26cc:	62 8d       	ldd	r22, Z+26	; 0x1a
    26ce:	73 8d       	ldd	r23, Z+27	; 0x1b
    26d0:	44 16       	cp	r4, r20
    26d2:	55 06       	cpc	r5, r21
    26d4:	66 06       	cpc	r6, r22
    26d6:	77 06       	cpc	r7, r23
    26d8:	09 f4       	brne	.+2      	; 0x26dc <f_write+0xec>
    26da:	ce c0       	rjmp	.+412    	; 0x2878 <f_write+0x288>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    26dc:	69 80       	ldd	r6, Y+1	; 0x01
    26de:	7a 80       	ldd	r7, Y+2	; 0x02
    26e0:	f7 01       	movw	r30, r14
    26e2:	44 89       	ldd	r20, Z+20	; 0x14
    26e4:	55 89       	ldd	r21, Z+21	; 0x15
    26e6:	66 89       	ldd	r22, Z+22	; 0x16
    26e8:	77 89       	ldd	r23, Z+23	; 0x17
    26ea:	c3 01       	movw	r24, r6
    26ec:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    26f0:	61 15       	cp	r22, r1
    26f2:	71 05       	cpc	r23, r1
    26f4:	81 05       	cpc	r24, r1
    26f6:	91 05       	cpc	r25, r1
    26f8:	09 f4       	brne	.+2      	; 0x26fc <f_write+0x10c>
    26fa:	9f c0       	rjmp	.+318    	; 0x283a <f_write+0x24a>
			sect += csect;
    26fc:	1b 01       	movw	r2, r22
    26fe:	2c 01       	movw	r4, r24
    2700:	20 0e       	add	r2, r16
    2702:	31 1e       	adc	r3, r17
    2704:	41 1c       	adc	r4, r1
    2706:	51 1c       	adc	r5, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    2708:	65 01       	movw	r12, r10
    270a:	cd 2c       	mov	r12, r13
    270c:	dd 24       	eor	r13, r13
    270e:	c6 94       	lsr	r12
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    2710:	c1 14       	cp	r12, r1
    2712:	d1 04       	cpc	r13, r1
    2714:	09 f4       	brne	.+2      	; 0x2718 <f_write+0x128>
    2716:	b6 c0       	rjmp	.+364    	; 0x2884 <f_write+0x294>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    2718:	f3 01       	movw	r30, r6
    271a:	81 85       	ldd	r24, Z+9	; 0x09
    271c:	92 85       	ldd	r25, Z+10	; 0x0a
    271e:	98 01       	movw	r18, r16
    2720:	2c 0d       	add	r18, r12
    2722:	3d 1d       	adc	r19, r13
    2724:	82 17       	cp	r24, r18
    2726:	93 07       	cpc	r25, r19
    2728:	18 f4       	brcc	.+6      	; 0x2730 <f_write+0x140>
					cc = fs->csize - csect;
    272a:	6c 01       	movw	r12, r24
    272c:	c0 1a       	sub	r12, r16
    272e:	d1 0a       	sbc	r13, r17
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2730:	86 01       	movw	r16, r12
    2732:	a2 01       	movw	r20, r4
    2734:	91 01       	movw	r18, r2
    2736:	b4 01       	movw	r22, r8
    2738:	f3 01       	movw	r30, r6
    273a:	81 81       	ldd	r24, Z+1	; 0x01
    273c:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <disk_write>
    2740:	81 11       	cpse	r24, r1
    2742:	83 c0       	rjmp	.+262    	; 0x284a <f_write+0x25a>
#if FF_FS_MINIMIZE <= 2
#if FF_FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	fc 01       	movw	r30, r24
    274a:	43 a5       	ldd	r20, Z+43	; 0x2b
    274c:	54 a5       	ldd	r21, Z+44	; 0x2c
    274e:	65 a5       	ldd	r22, Z+45	; 0x2d
    2750:	76 a5       	ldd	r23, Z+46	; 0x2e
    2752:	42 19       	sub	r20, r2
    2754:	53 09       	sbc	r21, r3
    2756:	64 09       	sbc	r22, r4
    2758:	75 09       	sbc	r23, r5
    275a:	86 01       	movw	r16, r12
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 17       	cp	r20, r16
    2762:	51 07       	cpc	r21, r17
    2764:	62 07       	cpc	r22, r18
    2766:	73 07       	cpc	r23, r19
    2768:	70 f4       	brcc	.+28     	; 0x2786 <f_write+0x196>
    276a:	54 2f       	mov	r21, r20
    276c:	44 27       	eor	r20, r20
    276e:	55 0f       	add	r21, r21
    2770:	b4 01       	movw	r22, r8
    2772:	64 0f       	add	r22, r20
    2774:	75 1f       	adc	r23, r21
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	52 e0       	ldi	r21, 0x02	; 2
    277a:	8f 96       	adiw	r24, 0x2f	; 47
    277c:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
    2780:	e9 81       	ldd	r30, Y+1	; 0x01
    2782:	fa 81       	ldd	r31, Y+2	; 0x02
    2784:	13 82       	std	Z+3, r1	; 0x03
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    2786:	dc 2c       	mov	r13, r12
    2788:	cc 24       	eor	r12, r12
    278a:	dd 0c       	add	r13, r13
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    278c:	ac 18       	sub	r10, r12
    278e:	bd 08       	sbc	r11, r13
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	8c 0d       	add	r24, r12
    279a:	9d 1d       	adc	r25, r13
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
    27a0:	8c 0c       	add	r8, r12
    27a2:	9d 1c       	adc	r9, r13
    27a4:	f7 01       	movw	r30, r14
    27a6:	80 89       	ldd	r24, Z+16	; 0x10
    27a8:	91 89       	ldd	r25, Z+17	; 0x11
    27aa:	a2 89       	ldd	r26, Z+18	; 0x12
    27ac:	b3 89       	ldd	r27, Z+19	; 0x13
    27ae:	8c 0d       	add	r24, r12
    27b0:	9d 1d       	adc	r25, r13
    27b2:	a1 1d       	adc	r26, r1
    27b4:	b1 1d       	adc	r27, r1
    27b6:	80 8b       	std	Z+16, r24	; 0x10
    27b8:	91 8b       	std	Z+17, r25	; 0x11
    27ba:	a2 8b       	std	Z+18, r26	; 0x12
    27bc:	b3 8b       	std	Z+19, r27	; 0x13
    27be:	42 85       	ldd	r20, Z+10	; 0x0a
    27c0:	53 85       	ldd	r21, Z+11	; 0x0b
    27c2:	64 85       	ldd	r22, Z+12	; 0x0c
    27c4:	75 85       	ldd	r23, Z+13	; 0x0d
    27c6:	48 17       	cp	r20, r24
    27c8:	59 07       	cpc	r21, r25
    27ca:	6a 07       	cpc	r22, r26
    27cc:	7b 07       	cpc	r23, r27
    27ce:	10 f4       	brcc	.+4      	; 0x27d4 <f_write+0x1e4>
    27d0:	ac 01       	movw	r20, r24
    27d2:	bd 01       	movw	r22, r26
    27d4:	f7 01       	movw	r30, r14
    27d6:	42 87       	std	Z+10, r20	; 0x0a
    27d8:	53 87       	std	Z+11, r21	; 0x0b
    27da:	64 87       	std	Z+12, r22	; 0x0c
    27dc:	75 87       	std	Z+13, r23	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    27de:	a1 14       	cp	r10, r1
    27e0:	b1 04       	cpc	r11, r1
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <f_write+0x1f6>
    27e4:	45 cf       	rjmp	.-374    	; 0x2670 <f_write+0x80>
    27e6:	1e c0       	rjmp	.+60     	; 0x2824 <f_write+0x234>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
    27e8:	f7 01       	movw	r30, r14
	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
    27ea:	89 2b       	or	r24, r25
    27ec:	8a 2b       	or	r24, r26
    27ee:	8b 2b       	or	r24, r27
    27f0:	69 f4       	brne	.+26     	; 0x280c <f_write+0x21c>
					clst = fp->obj.sclust;	/* Follow from the origin */
    27f2:	66 81       	ldd	r22, Z+6	; 0x06
    27f4:	77 81       	ldd	r23, Z+7	; 0x07
    27f6:	80 85       	ldd	r24, Z+8	; 0x08
    27f8:	91 85       	ldd	r25, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    27fa:	61 15       	cp	r22, r1
    27fc:	71 05       	cpc	r23, r1
    27fe:	81 05       	cpc	r24, r1
    2800:	91 05       	cpc	r25, r1
    2802:	b1 f4       	brne	.+44     	; 0x2830 <f_write+0x240>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	ba 01       	movw	r22, r20
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <f_write+0x224>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    280c:	44 89       	ldd	r20, Z+20	; 0x14
    280e:	55 89       	ldd	r21, Z+21	; 0x15
    2810:	66 89       	ldd	r22, Z+22	; 0x16
    2812:	77 89       	ldd	r23, Z+23	; 0x17
    2814:	c7 01       	movw	r24, r14
    2816:	0e 94 ef 0a 	call	0x15de	; 0x15de <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    281a:	61 15       	cp	r22, r1
    281c:	71 05       	cpc	r23, r1
    281e:	81 05       	cpc	r24, r1
    2820:	91 05       	cpc	r25, r1
    2822:	31 f4       	brne	.+12     	; 0x2830 <f_write+0x240>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    2824:	f7 01       	movw	r30, r14
    2826:	86 85       	ldd	r24, Z+14	; 0x0e
    2828:	80 64       	ori	r24, 0x40	; 64
    282a:	86 87       	std	Z+14, r24	; 0x0e

	LEAVE_FF(fs, FR_OK);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	74 c0       	rjmp	.+232    	; 0x2918 <f_write+0x328>
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    2830:	61 30       	cpi	r22, 0x01	; 1
    2832:	71 05       	cpc	r23, r1
    2834:	81 05       	cpc	r24, r1
    2836:	91 05       	cpc	r25, r1
    2838:	11 f4       	brne	.+4      	; 0x283e <f_write+0x24e>
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	07 c0       	rjmp	.+14     	; 0x284c <f_write+0x25c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    283e:	6f 3f       	cpi	r22, 0xFF	; 255
    2840:	ff ef       	ldi	r31, 0xFF	; 255
    2842:	7f 07       	cpc	r23, r31
    2844:	8f 07       	cpc	r24, r31
    2846:	9f 07       	cpc	r25, r31
    2848:	21 f4       	brne	.+8      	; 0x2852 <f_write+0x262>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	f7 01       	movw	r30, r14
    284e:	87 87       	std	Z+15, r24	; 0x0f
    2850:	63 c0       	rjmp	.+198    	; 0x2918 <f_write+0x328>
				fp->clust = clst;			/* Update current cluster */
    2852:	f7 01       	movw	r30, r14
    2854:	64 8b       	std	Z+20, r22	; 0x14
    2856:	75 8b       	std	Z+21, r23	; 0x15
    2858:	86 8b       	std	Z+22, r24	; 0x16
    285a:	97 8b       	std	Z+23, r25	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    285c:	46 80       	ldd	r4, Z+6	; 0x06
    285e:	57 80       	ldd	r5, Z+7	; 0x07
    2860:	60 84       	ldd	r6, Z+8	; 0x08
    2862:	71 84       	ldd	r7, Z+9	; 0x09
    2864:	45 28       	or	r4, r5
    2866:	46 28       	or	r4, r6
    2868:	47 28       	or	r4, r7
    286a:	09 f0       	breq	.+2      	; 0x286e <f_write+0x27e>
    286c:	25 cf       	rjmp	.-438    	; 0x26b8 <f_write+0xc8>
    286e:	66 83       	std	Z+6, r22	; 0x06
    2870:	77 83       	std	Z+7, r23	; 0x07
    2872:	80 87       	std	Z+8, r24	; 0x08
    2874:	91 87       	std	Z+9, r25	; 0x09
    2876:	20 cf       	rjmp	.-448    	; 0x26b8 <f_write+0xc8>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    2878:	0e 94 ae 04 	call	0x95c	; 0x95c <sync_window>
    287c:	88 23       	and	r24, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <f_write+0x292>
    2880:	2d cf       	rjmp	.-422    	; 0x26dc <f_write+0xec>
    2882:	e3 cf       	rjmp	.-58     	; 0x284a <f_write+0x25a>
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
				continue;
			}
#if FF_FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    2884:	f7 01       	movw	r30, r14
    2886:	40 89       	ldd	r20, Z+16	; 0x10
    2888:	51 89       	ldd	r21, Z+17	; 0x11
    288a:	62 89       	ldd	r22, Z+18	; 0x12
    288c:	73 89       	ldd	r23, Z+19	; 0x13
    288e:	82 85       	ldd	r24, Z+10	; 0x0a
    2890:	93 85       	ldd	r25, Z+11	; 0x0b
    2892:	a4 85       	ldd	r26, Z+12	; 0x0c
    2894:	b5 85       	ldd	r27, Z+13	; 0x0d
    2896:	48 17       	cp	r20, r24
    2898:	59 07       	cpc	r21, r25
    289a:	6a 07       	cpc	r22, r26
    289c:	7b 07       	cpc	r23, r27
    289e:	58 f0       	brcs	.+22     	; 0x28b6 <f_write+0x2c6>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    28a0:	c3 01       	movw	r24, r6
    28a2:	0e 94 ae 04 	call	0x95c	; 0x95c <sync_window>
    28a6:	81 11       	cpse	r24, r1
    28a8:	d0 cf       	rjmp	.-96     	; 0x284a <f_write+0x25a>
				fs->winsect = sect;
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	23 a6       	std	Z+43, r2	; 0x2b
    28b0:	34 a6       	std	Z+44, r3	; 0x2c
    28b2:	45 a6       	std	Z+45, r4	; 0x2d
    28b4:	56 a6       	std	Z+46, r5	; 0x2e
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    28b6:	f7 01       	movw	r30, r14
    28b8:	20 8e       	std	Z+24, r2	; 0x18
    28ba:	31 8e       	std	Z+25, r3	; 0x19
    28bc:	42 8e       	std	Z+26, r4	; 0x1a
    28be:	53 8e       	std	Z+27, r5	; 0x1b
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    28c0:	f7 01       	movw	r30, r14
    28c2:	80 89       	ldd	r24, Z+16	; 0x10
    28c4:	91 89       	ldd	r25, Z+17	; 0x11
    28c6:	91 70       	andi	r25, 0x01	; 1
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	32 e0       	ldi	r19, 0x02	; 2
    28cc:	28 1b       	sub	r18, r24
    28ce:	39 0b       	sbc	r19, r25
    28d0:	65 01       	movw	r12, r10
    28d2:	2a 15       	cp	r18, r10
    28d4:	3b 05       	cpc	r19, r11
    28d6:	08 f4       	brcc	.+2      	; 0x28da <f_write+0x2ea>
    28d8:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    28da:	f7 01       	movw	r30, r14
    28dc:	40 8d       	ldd	r20, Z+24	; 0x18
    28de:	51 8d       	ldd	r21, Z+25	; 0x19
    28e0:	62 8d       	ldd	r22, Z+26	; 0x1a
    28e2:	73 8d       	ldd	r23, Z+27	; 0x1b
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
    28ec:	81 11       	cpse	r24, r1
    28ee:	ad cf       	rjmp	.-166    	; 0x284a <f_write+0x25a>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    28f0:	29 81       	ldd	r18, Y+1	; 0x01
    28f2:	3a 81       	ldd	r19, Y+2	; 0x02
    28f4:	21 5d       	subi	r18, 0xD1	; 209
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	f7 01       	movw	r30, r14
    28fa:	80 89       	ldd	r24, Z+16	; 0x10
    28fc:	91 89       	ldd	r25, Z+17	; 0x11
    28fe:	91 70       	andi	r25, 0x01	; 1
    2900:	a6 01       	movw	r20, r12
    2902:	b4 01       	movw	r22, r8
    2904:	82 0f       	add	r24, r18
    2906:	93 1f       	adc	r25, r19
    2908:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
		fs->wflag = 1;
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	21 e0       	ldi	r18, 0x01	; 1
    2912:	23 83       	std	Z+3, r18	; 0x03
    2914:	3b cf       	rjmp	.-394    	; 0x278c <f_write+0x19c>


	*bw = 0;	/* Clear write byte counter */
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2916:	87 e0       	ldi	r24, 0x07	; 7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	9f 90       	pop	r9
    2936:	8f 90       	pop	r8
    2938:	7f 90       	pop	r7
    293a:	6f 90       	pop	r6
    293c:	5f 90       	pop	r5
    293e:	4f 90       	pop	r4
    2940:	3f 90       	pop	r3
    2942:	2f 90       	pop	r2
    2944:	08 95       	ret

00002946 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	00 d0       	rcall	.+0      	; 0x2954 <f_sync+0xe>
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	7c 01       	movw	r14, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    295a:	be 01       	movw	r22, r28
    295c:	6f 5f       	subi	r22, 0xFF	; 255
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	0e 94 08 04 	call	0x810	; 0x810 <validate>
	if (res == FR_OK) {
    2964:	81 11       	cpse	r24, r1
    2966:	3c c0       	rjmp	.+120    	; 0x29e0 <f_sync+0x9a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    2968:	f7 01       	movw	r30, r14
    296a:	96 85       	ldd	r25, Z+14	; 0x0e
    296c:	96 ff       	sbrs	r25, 6
    296e:	38 c0       	rjmp	.+112    	; 0x29e0 <f_sync+0x9a>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    2970:	44 8d       	ldd	r20, Z+28	; 0x1c
    2972:	55 8d       	ldd	r21, Z+29	; 0x1d
    2974:	66 8d       	ldd	r22, Z+30	; 0x1e
    2976:	77 8d       	ldd	r23, Z+31	; 0x1f
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
				if (res == FR_OK) {
    2980:	81 11       	cpse	r24, r1
    2982:	2e c0       	rjmp	.+92     	; 0x29e0 <f_sync+0x9a>
					dir = fp->dir_ptr;
    2984:	f7 01       	movw	r30, r14
    2986:	00 a1       	ldd	r16, Z+32	; 0x20
    2988:	11 a1       	ldd	r17, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    298a:	f8 01       	movw	r30, r16
    298c:	83 85       	ldd	r24, Z+11	; 0x0b
    298e:	80 62       	ori	r24, 0x20	; 32
    2990:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    2992:	f7 01       	movw	r30, r14
    2994:	26 81       	ldd	r18, Z+6	; 0x06
    2996:	37 81       	ldd	r19, Z+7	; 0x07
    2998:	40 85       	ldd	r20, Z+8	; 0x08
    299a:	51 85       	ldd	r21, Z+9	; 0x09
    299c:	b8 01       	movw	r22, r16
    299e:	80 81       	ld	r24, Z
    29a0:	91 81       	ldd	r25, Z+1	; 0x01
    29a2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <st_clust.isra.4>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    29a6:	f7 01       	movw	r30, r14
    29a8:	32 85       	ldd	r19, Z+10	; 0x0a
    29aa:	23 85       	ldd	r18, Z+11	; 0x0b
    29ac:	94 85       	ldd	r25, Z+12	; 0x0c
    29ae:	85 85       	ldd	r24, Z+13	; 0x0d
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    29b0:	f8 01       	movw	r30, r16
    29b2:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    29b4:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    29b6:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    29b8:	87 8f       	std	Z+31, r24	; 0x1f
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    29ba:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    29bc:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    29be:	82 e3       	ldi	r24, 0x32	; 50
    29c0:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    29c2:	80 e5       	ldi	r24, 0x50	; 80
    29c4:	81 8f       	std	Z+25, r24	; 0x19
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    29c6:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    29c8:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	9a 81       	ldd	r25, Y+2	; 0x02
    29ce:	21 e0       	ldi	r18, 0x01	; 1
    29d0:	fc 01       	movw	r30, r24
    29d2:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    29d4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    29d8:	f7 01       	movw	r30, r14
    29da:	96 85       	ldd	r25, Z+14	; 0x0e
    29dc:	9f 7b       	andi	r25, 0xBF	; 191
    29de:	96 87       	std	Z+14, r25	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	ff 90       	pop	r15
    29ee:	ef 90       	pop	r14
    29f0:	08 95       	ret

000029f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	df 93       	push	r29
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <f_close+0xa>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2a02:	0e 94 a3 14 	call	0x2946	; 0x2946 <f_sync>
	if (res == FR_OK)
    2a06:	81 11       	cpse	r24, r1
    2a08:	0b c0       	rjmp	.+22     	; 0x2a20 <f_close+0x2e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    2a0a:	be 01       	movw	r22, r28
    2a0c:	6f 5f       	subi	r22, 0xFF	; 255
    2a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a10:	c8 01       	movw	r24, r16
    2a12:	0e 94 08 04 	call	0x810	; 0x810 <validate>
		if (res == FR_OK) {
    2a16:	81 11       	cpse	r24, r1
    2a18:	03 c0       	rjmp	.+6      	; 0x2a20 <f_close+0x2e>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	11 82       	std	Z+1, r1	; 0x01
    2a1e:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2a20:	0f 90       	pop	r0
    2a22:	0f 90       	pop	r0
    2a24:	df 91       	pop	r29
    2a26:	cf 91       	pop	r28
    2a28:	1f 91       	pop	r17
    2a2a:	0f 91       	pop	r16
    2a2c:	08 95       	ret

00002a2e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    2a2e:	4f 92       	push	r4
    2a30:	5f 92       	push	r5
    2a32:	6f 92       	push	r6
    2a34:	7f 92       	push	r7
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <f_lseek+0x22>
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <f_lseek+0x24>
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <f_lseek+0x26>
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	8c 01       	movw	r16, r24
    2a5a:	6a 01       	movw	r12, r20
    2a5c:	7b 01       	movw	r14, r22
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
    2a5e:	be 01       	movw	r22, r28
    2a60:	6f 5f       	subi	r22, 0xFF	; 255
    2a62:	7f 4f       	sbci	r23, 0xFF	; 255
    2a64:	0e 94 08 04 	call	0x810	; 0x810 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
    2a68:	81 11       	cpse	r24, r1
    2a6a:	64 c1       	rjmp	.+712    	; 0x2d34 <f_lseek+0x306>
    2a6c:	d8 01       	movw	r26, r16
    2a6e:	1f 96       	adiw	r26, 0x0f	; 15
    2a70:	8c 91       	ld	r24, X
    2a72:	1f 97       	sbiw	r26, 0x0f	; 15
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
    2a74:	81 11       	cpse	r24, r1
    2a76:	5e c1       	rjmp	.+700    	; 0x2d34 <f_lseek+0x306>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    2a78:	1a 96       	adiw	r26, 0x0a	; 10
    2a7a:	8d 91       	ld	r24, X+
    2a7c:	9d 91       	ld	r25, X+
    2a7e:	0d 90       	ld	r0, X+
    2a80:	bc 91       	ld	r27, X
    2a82:	a0 2d       	mov	r26, r0
    2a84:	8c 15       	cp	r24, r12
    2a86:	9d 05       	cpc	r25, r13
    2a88:	ae 05       	cpc	r26, r14
    2a8a:	bf 05       	cpc	r27, r15
    2a8c:	30 f4       	brcc	.+12     	; 0x2a9a <f_lseek+0x6c>
    2a8e:	f8 01       	movw	r30, r16
    2a90:	26 85       	ldd	r18, Z+14	; 0x0e
    2a92:	21 fd       	sbrc	r18, 1
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <f_lseek+0x6c>
    2a96:	6c 01       	movw	r12, r24
    2a98:	7d 01       	movw	r14, r26
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    2a9a:	d8 01       	movw	r26, r16
    2a9c:	50 96       	adiw	r26, 0x10	; 16
    2a9e:	8d 90       	ld	r8, X+
    2aa0:	9d 90       	ld	r9, X+
    2aa2:	ad 90       	ld	r10, X+
    2aa4:	bc 90       	ld	r11, X
    2aa6:	53 97       	sbiw	r26, 0x13	; 19
		fp->fptr = nsect = 0;
    2aa8:	f8 01       	movw	r30, r16
    2aaa:	10 8a       	std	Z+16, r1	; 0x10
    2aac:	11 8a       	std	Z+17, r1	; 0x11
    2aae:	12 8a       	std	Z+18, r1	; 0x12
    2ab0:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs > 0) {
    2ab2:	c1 14       	cp	r12, r1
    2ab4:	d1 04       	cpc	r13, r1
    2ab6:	e1 04       	cpc	r14, r1
    2ab8:	f1 04       	cpc	r15, r1
    2aba:	09 f4       	brne	.+2      	; 0x2abe <f_lseek+0x90>
    2abc:	34 c1       	rjmp	.+616    	; 0x2d26 <f_lseek+0x2f8>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    2abe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac2:	81 85       	ldd	r24, Z+9	; 0x09
    2ac4:	92 85       	ldd	r25, Z+10	; 0x0a
    2ac6:	a0 e0       	ldi	r26, 0x00	; 0
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	2c 01       	movw	r4, r24
    2acc:	3d 01       	movw	r6, r26
    2ace:	39 e0       	ldi	r19, 0x09	; 9
    2ad0:	44 0c       	add	r4, r4
    2ad2:	55 1c       	adc	r5, r5
    2ad4:	66 1c       	adc	r6, r6
    2ad6:	77 1c       	adc	r7, r7
    2ad8:	3a 95       	dec	r19
    2ada:	d1 f7       	brne	.-12     	; 0x2ad0 <f_lseek+0xa2>
			if (ifptr > 0 &&
    2adc:	81 14       	cp	r8, r1
    2ade:	91 04       	cpc	r9, r1
    2ae0:	a1 04       	cpc	r10, r1
    2ae2:	b1 04       	cpc	r11, r1
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <f_lseek+0xba>
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2ae8:	f1 e0       	ldi	r31, 0x01	; 1
    2aea:	8f 1a       	sub	r8, r31
    2aec:	91 08       	sbc	r9, r1
    2aee:	a1 08       	sbc	r10, r1
    2af0:	b1 08       	sbc	r11, r1
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs > 0) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2af2:	c7 01       	movw	r24, r14
    2af4:	b6 01       	movw	r22, r12
    2af6:	61 50       	subi	r22, 0x01	; 1
    2af8:	71 09       	sbc	r23, r1
    2afa:	81 09       	sbc	r24, r1
    2afc:	91 09       	sbc	r25, r1
    2afe:	a3 01       	movw	r20, r6
    2b00:	92 01       	movw	r18, r4
    2b02:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__udivmodsi4>
    2b06:	2b 83       	std	Y+3, r18	; 0x03
    2b08:	3c 83       	std	Y+4, r19	; 0x04
    2b0a:	4d 83       	std	Y+5, r20	; 0x05
    2b0c:	5e 83       	std	Y+6, r21	; 0x06
    2b0e:	c5 01       	movw	r24, r10
    2b10:	b4 01       	movw	r22, r8
    2b12:	a3 01       	movw	r20, r6
    2b14:	92 01       	movw	r18, r4
    2b16:	0e 94 2f 25 	call	0x4a5e	; 0x4a5e <__udivmodsi4>
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	ad 81       	ldd	r26, Y+5	; 0x05
    2b20:	be 81       	ldd	r27, Y+6	; 0x06
    2b22:	82 17       	cp	r24, r18
    2b24:	93 07       	cpc	r25, r19
    2b26:	a4 07       	cpc	r26, r20
    2b28:	b5 07       	cpc	r27, r21
    2b2a:	e8 f0       	brcs	.+58     	; 0x2b66 <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
    2b2c:	88 27       	eor	r24, r24
    2b2e:	99 27       	eor	r25, r25
    2b30:	dc 01       	movw	r26, r24
    2b32:	84 19       	sub	r24, r4
    2b34:	95 09       	sbc	r25, r5
    2b36:	a6 09       	sbc	r26, r6
    2b38:	b7 09       	sbc	r27, r7
    2b3a:	88 22       	and	r8, r24
    2b3c:	99 22       	and	r9, r25
    2b3e:	aa 22       	and	r10, r26
    2b40:	bb 22       	and	r11, r27
    2b42:	d8 01       	movw	r26, r16
    2b44:	50 96       	adiw	r26, 0x10	; 16
    2b46:	8d 92       	st	X+, r8
    2b48:	9d 92       	st	X+, r9
    2b4a:	ad 92       	st	X+, r10
    2b4c:	bc 92       	st	X, r11
    2b4e:	53 97       	sbiw	r26, 0x13	; 19
				ofs -= fp->fptr;
    2b50:	c8 18       	sub	r12, r8
    2b52:	d9 08       	sbc	r13, r9
    2b54:	ea 08       	sbc	r14, r10
    2b56:	fb 08       	sbc	r15, r11
				clst = fp->clust;
    2b58:	54 96       	adiw	r26, 0x14	; 20
    2b5a:	4d 91       	ld	r20, X+
    2b5c:	5d 91       	ld	r21, X+
    2b5e:	6d 91       	ld	r22, X+
    2b60:	7c 91       	ld	r23, X
    2b62:	57 97       	sbiw	r26, 0x17	; 23
    2b64:	32 c0       	rjmp	.+100    	; 0x2bca <f_lseek+0x19c>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    2b66:	f8 01       	movw	r30, r16
    2b68:	46 81       	ldd	r20, Z+6	; 0x06
    2b6a:	57 81       	ldd	r21, Z+7	; 0x07
    2b6c:	60 85       	ldd	r22, Z+8	; 0x08
    2b6e:	71 85       	ldd	r23, Z+9	; 0x09
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2b70:	41 15       	cp	r20, r1
    2b72:	51 05       	cpc	r21, r1
    2b74:	61 05       	cpc	r22, r1
    2b76:	71 05       	cpc	r23, r1
    2b78:	19 f5       	brne	.+70     	; 0x2bc0 <f_lseek+0x192>
					clst = create_chain(&fp->obj, 0);
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	ba 01       	movw	r22, r20
    2b80:	c8 01       	movw	r24, r16
    2b82:	0e 94 ef 0a 	call	0x15de	; 0x15de <create_chain>
    2b86:	ab 01       	movw	r20, r22
    2b88:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    2b8a:	41 30       	cpi	r20, 0x01	; 1
    2b8c:	51 05       	cpc	r21, r1
    2b8e:	61 05       	cpc	r22, r1
    2b90:	71 05       	cpc	r23, r1
    2b92:	29 f4       	brne	.+10     	; 0x2b9e <f_lseek+0x170>
    2b94:	82 e0       	ldi	r24, 0x02	; 2
    2b96:	d8 01       	movw	r26, r16
    2b98:	1f 96       	adiw	r26, 0x0f	; 15
    2b9a:	8c 93       	st	X, r24
    2b9c:	cb c0       	rjmp	.+406    	; 0x2d34 <f_lseek+0x306>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2b9e:	4f 3f       	cpi	r20, 0xFF	; 255
    2ba0:	bf ef       	ldi	r27, 0xFF	; 255
    2ba2:	5b 07       	cpc	r21, r27
    2ba4:	6b 07       	cpc	r22, r27
    2ba6:	7b 07       	cpc	r23, r27
    2ba8:	21 f4       	brne	.+8      	; 0x2bb2 <f_lseek+0x184>
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	f8 01       	movw	r30, r16
    2bae:	87 87       	std	Z+15, r24	; 0x0f
    2bb0:	c1 c0       	rjmp	.+386    	; 0x2d34 <f_lseek+0x306>
					fp->obj.sclust = clst;
    2bb2:	d8 01       	movw	r26, r16
    2bb4:	16 96       	adiw	r26, 0x06	; 6
    2bb6:	4d 93       	st	X+, r20
    2bb8:	5d 93       	st	X+, r21
    2bba:	6d 93       	st	X+, r22
    2bbc:	7c 93       	st	X, r23
    2bbe:	19 97       	sbiw	r26, 0x09	; 9
				}
#endif
				fp->clust = clst;
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	44 8b       	std	Z+20, r20	; 0x14
    2bc4:	55 8b       	std	Z+21, r21	; 0x15
    2bc6:	66 8b       	std	Z+22, r22	; 0x16
    2bc8:	77 8b       	std	Z+23, r23	; 0x17
			}
			if (clst != 0) {
    2bca:	41 15       	cp	r20, r1
    2bcc:	51 05       	cpc	r21, r1
    2bce:	61 05       	cpc	r22, r1
    2bd0:	71 05       	cpc	r23, r1
    2bd2:	09 f0       	breq	.+2      	; 0x2bd6 <f_lseek+0x1a8>
    2bd4:	3f c0       	rjmp	.+126    	; 0x2c54 <f_lseek+0x226>
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2bd6:	c1 2c       	mov	r12, r1
    2bd8:	d1 2c       	mov	r13, r1
    2bda:	76 01       	movw	r14, r12
    2bdc:	78 c0       	rjmp	.+240    	; 0x2cce <f_lseek+0x2a0>
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
					ofs -= bcs; fp->fptr += bcs;
    2bde:	c4 18       	sub	r12, r4
    2be0:	d5 08       	sbc	r13, r5
    2be2:	e6 08       	sbc	r14, r6
    2be4:	f7 08       	sbc	r15, r7
    2be6:	f8 01       	movw	r30, r16
    2be8:	80 89       	ldd	r24, Z+16	; 0x10
    2bea:	91 89       	ldd	r25, Z+17	; 0x11
    2bec:	a2 89       	ldd	r26, Z+18	; 0x12
    2bee:	b3 89       	ldd	r27, Z+19	; 0x13
    2bf0:	84 0d       	add	r24, r4
    2bf2:	95 1d       	adc	r25, r5
    2bf4:	a6 1d       	adc	r26, r6
    2bf6:	b7 1d       	adc	r27, r7
    2bf8:	80 8b       	std	Z+16, r24	; 0x10
    2bfa:	91 8b       	std	Z+17, r25	; 0x11
    2bfc:	a2 8b       	std	Z+18, r26	; 0x12
    2bfe:	b3 8b       	std	Z+19, r27	; 0x13
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2c00:	86 85       	ldd	r24, Z+14	; 0x0e
    2c02:	81 ff       	sbrs	r24, 1
    2c04:	2e c0       	rjmp	.+92     	; 0x2c62 <f_lseek+0x234>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e 94 ef 0a 	call	0x15de	; 0x15de <create_chain>
    2c0c:	ab 01       	movw	r20, r22
    2c0e:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    2c10:	41 15       	cp	r20, r1
    2c12:	51 05       	cpc	r21, r1
    2c14:	61 05       	cpc	r22, r1
    2c16:	71 05       	cpc	r23, r1
    2c18:	59 f1       	breq	.+86     	; 0x2c70 <f_lseek+0x242>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2c1a:	4f 3f       	cpi	r20, 0xFF	; 255
    2c1c:	bf ef       	ldi	r27, 0xFF	; 255
    2c1e:	5b 07       	cpc	r21, r27
    2c20:	6b 07       	cpc	r22, r27
    2c22:	7b 07       	cpc	r23, r27
    2c24:	11 f2       	breq	.-124    	; 0x2baa <f_lseek+0x17c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    2c26:	42 30       	cpi	r20, 0x02	; 2
    2c28:	51 05       	cpc	r21, r1
    2c2a:	61 05       	cpc	r22, r1
    2c2c:	71 05       	cpc	r23, r1
    2c2e:	08 f4       	brcc	.+2      	; 0x2c32 <f_lseek+0x204>
    2c30:	b1 cf       	rjmp	.-158    	; 0x2b94 <f_lseek+0x166>
    2c32:	e9 81       	ldd	r30, Y+1	; 0x01
    2c34:	fa 81       	ldd	r31, Y+2	; 0x02
    2c36:	83 89       	ldd	r24, Z+19	; 0x13
    2c38:	94 89       	ldd	r25, Z+20	; 0x14
    2c3a:	a5 89       	ldd	r26, Z+21	; 0x15
    2c3c:	b6 89       	ldd	r27, Z+22	; 0x16
    2c3e:	48 17       	cp	r20, r24
    2c40:	59 07       	cpc	r21, r25
    2c42:	6a 07       	cpc	r22, r26
    2c44:	7b 07       	cpc	r23, r27
    2c46:	08 f0       	brcs	.+2      	; 0x2c4a <f_lseek+0x21c>
    2c48:	a5 cf       	rjmp	.-182    	; 0x2b94 <f_lseek+0x166>
					fp->clust = clst;
    2c4a:	f8 01       	movw	r30, r16
    2c4c:	44 8b       	std	Z+20, r20	; 0x14
    2c4e:	55 8b       	std	Z+21, r21	; 0x15
    2c50:	66 8b       	std	Z+22, r22	; 0x16
    2c52:	77 8b       	std	Z+23, r23	; 0x17
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2c54:	4c 14       	cp	r4, r12
    2c56:	5d 04       	cpc	r5, r13
    2c58:	6e 04       	cpc	r6, r14
    2c5a:	7f 04       	cpc	r7, r15
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <f_lseek+0x232>
    2c5e:	bf cf       	rjmp	.-130    	; 0x2bde <f_lseek+0x1b0>
    2c60:	0a c0       	rjmp	.+20     	; 0x2c76 <f_lseek+0x248>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
    2c6a:	ab 01       	movw	r20, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	d5 cf       	rjmp	.-86     	; 0x2c1a <f_lseek+0x1ec>
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
						if (clst == 0) {				/* Clip file size in case of disk full */
							ofs = 0; break;
    2c70:	c1 2c       	mov	r12, r1
    2c72:	d1 2c       	mov	r13, r1
    2c74:	76 01       	movw	r14, r12
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    2c76:	f8 01       	movw	r30, r16
    2c78:	80 89       	ldd	r24, Z+16	; 0x10
    2c7a:	91 89       	ldd	r25, Z+17	; 0x11
    2c7c:	a2 89       	ldd	r26, Z+18	; 0x12
    2c7e:	b3 89       	ldd	r27, Z+19	; 0x13
    2c80:	8c 0d       	add	r24, r12
    2c82:	9d 1d       	adc	r25, r13
    2c84:	ae 1d       	adc	r26, r14
    2c86:	bf 1d       	adc	r27, r15
    2c88:	80 8b       	std	Z+16, r24	; 0x10
    2c8a:	91 8b       	std	Z+17, r25	; 0x11
    2c8c:	a2 8b       	std	Z+18, r26	; 0x12
    2c8e:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    2c90:	d7 01       	movw	r26, r14
    2c92:	c6 01       	movw	r24, r12
    2c94:	91 70       	andi	r25, 0x01	; 1
    2c96:	aa 27       	eor	r26, r26
    2c98:	bb 27       	eor	r27, r27
    2c9a:	89 2b       	or	r24, r25
    2c9c:	8a 2b       	or	r24, r26
    2c9e:	8b 2b       	or	r24, r27
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <f_lseek+0x276>
    2ca2:	99 cf       	rjmp	.-206    	; 0x2bd6 <f_lseek+0x1a8>
					nsect = clst2sect(fs, clst);	/* Current sector */
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
    2cac:	61 15       	cp	r22, r1
    2cae:	71 05       	cpc	r23, r1
    2cb0:	81 05       	cpc	r24, r1
    2cb2:	91 05       	cpc	r25, r1
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <f_lseek+0x28a>
    2cb6:	6e cf       	rjmp	.-292    	; 0x2b94 <f_lseek+0x166>
					nsect += (DWORD)(ofs / SS(fs));
    2cb8:	29 e0       	ldi	r18, 0x09	; 9
    2cba:	f6 94       	lsr	r15
    2cbc:	e7 94       	ror	r14
    2cbe:	d7 94       	ror	r13
    2cc0:	c7 94       	ror	r12
    2cc2:	2a 95       	dec	r18
    2cc4:	d1 f7       	brne	.-12     	; 0x2cba <f_lseek+0x28c>
    2cc6:	c6 0e       	add	r12, r22
    2cc8:	d7 1e       	adc	r13, r23
    2cca:	e8 1e       	adc	r14, r24
    2ccc:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 89       	ldd	r24, Z+16	; 0x10
    2cd2:	91 89       	ldd	r25, Z+17	; 0x11
    2cd4:	a2 89       	ldd	r26, Z+18	; 0x12
    2cd6:	b3 89       	ldd	r27, Z+19	; 0x13
    2cd8:	42 85       	ldd	r20, Z+10	; 0x0a
    2cda:	53 85       	ldd	r21, Z+11	; 0x0b
    2cdc:	64 85       	ldd	r22, Z+12	; 0x0c
    2cde:	75 85       	ldd	r23, Z+13	; 0x0d
    2ce0:	48 17       	cp	r20, r24
    2ce2:	59 07       	cpc	r21, r25
    2ce4:	6a 07       	cpc	r22, r26
    2ce6:	7b 07       	cpc	r23, r27
    2ce8:	38 f4       	brcc	.+14     	; 0x2cf8 <f_lseek+0x2ca>
			fp->obj.objsize = fp->fptr;
    2cea:	82 87       	std	Z+10, r24	; 0x0a
    2cec:	93 87       	std	Z+11, r25	; 0x0b
    2cee:	a4 87       	std	Z+12, r26	; 0x0c
    2cf0:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    2cf2:	26 85       	ldd	r18, Z+14	; 0x0e
    2cf4:	20 64       	ori	r18, 0x40	; 64
    2cf6:	26 87       	std	Z+14, r18	; 0x0e
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    2cf8:	91 70       	andi	r25, 0x01	; 1
    2cfa:	aa 27       	eor	r26, r26
    2cfc:	bb 27       	eor	r27, r27
    2cfe:	89 2b       	or	r24, r25
    2d00:	8a 2b       	or	r24, r26
    2d02:	8b 2b       	or	r24, r27
    2d04:	71 f0       	breq	.+28     	; 0x2d22 <f_lseek+0x2f4>
    2d06:	f8 01       	movw	r30, r16
    2d08:	80 8d       	ldd	r24, Z+24	; 0x18
    2d0a:	91 8d       	ldd	r25, Z+25	; 0x19
    2d0c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d0e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2d10:	8c 15       	cp	r24, r12
    2d12:	9d 05       	cpc	r25, r13
    2d14:	ae 05       	cpc	r26, r14
    2d16:	bf 05       	cpc	r27, r15
    2d18:	21 f0       	breq	.+8      	; 0x2d22 <f_lseek+0x2f4>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
    2d1a:	c0 8e       	std	Z+24, r12	; 0x18
    2d1c:	d1 8e       	std	Z+25, r13	; 0x19
    2d1e:	e2 8e       	std	Z+26, r14	; 0x1a
    2d20:	f3 8e       	std	Z+27, r15	; 0x1b
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <f_lseek+0x306>
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	dc 01       	movw	r26, r24
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2d2c:	c1 2c       	mov	r12, r1
    2d2e:	d1 2c       	mov	r13, r1
    2d30:	76 01       	movw	r14, r12
    2d32:	e2 cf       	rjmp	.-60     	; 0x2cf8 <f_lseek+0x2ca>
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
    2d34:	26 96       	adiw	r28, 0x06	; 6
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	ff 90       	pop	r15
    2d4a:	ef 90       	pop	r14
    2d4c:	df 90       	pop	r13
    2d4e:	cf 90       	pop	r12
    2d50:	bf 90       	pop	r11
    2d52:	af 90       	pop	r10
    2d54:	9f 90       	pop	r9
    2d56:	8f 90       	pop	r8
    2d58:	7f 90       	pop	r7
    2d5a:	6f 90       	pop	r6
    2d5c:	5f 90       	pop	r5
    2d5e:	4f 90       	pop	r4
    2d60:	08 95       	ret

00002d62 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    2d62:	0f 93       	push	r16
    2d64:	1f 93       	push	r17
    2d66:	cf 93       	push	r28
    2d68:	df 93       	push	r29
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <f_opendir+0xa>
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <f_opendir+0xc>
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	7c 83       	std	Y+4, r23	; 0x04
    2d74:	6b 83       	std	Y+3, r22	; 0x03
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	d9 f1       	breq	.+118    	; 0x2df0 <f_opendir+0x8e>
    2d7a:	8c 01       	movw	r16, r24

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    2d7c:	40 e0       	ldi	r20, 0x00	; 0
    2d7e:	be 01       	movw	r22, r28
    2d80:	6f 5f       	subi	r22, 0xFF	; 255
    2d82:	7f 4f       	sbci	r23, 0xFF	; 255
    2d84:	ce 01       	movw	r24, r28
    2d86:	03 96       	adiw	r24, 0x03	; 3
    2d88:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
	if (res == FR_OK) {
    2d8c:	81 11       	cpse	r24, r1
    2d8e:	2c c0       	rjmp	.+88     	; 0x2de8 <f_opendir+0x86>
		dp->obj.fs = fs;
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	9a 81       	ldd	r25, Y+2	; 0x02
    2d94:	f8 01       	movw	r30, r16
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    2d9a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d9c:	7c 81       	ldd	r23, Y+4	; 0x04
    2d9e:	c8 01       	movw	r24, r16
    2da0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    2da4:	81 11       	cpse	r24, r1
    2da6:	2a c0       	rjmp	.+84     	; 0x2dfc <f_opendir+0x9a>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    2da8:	f8 01       	movw	r30, r16
    2daa:	87 a1       	ldd	r24, Z+39	; 0x27
    2dac:	87 fd       	sbrc	r24, 7
    2dae:	0f c0       	rjmp	.+30     	; 0x2dce <f_opendir+0x6c>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    2db0:	84 81       	ldd	r24, Z+4	; 0x04
    2db2:	84 ff       	sbrs	r24, 4
    2db4:	18 c0       	rjmp	.+48     	; 0x2de6 <f_opendir+0x84>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    2db6:	62 8d       	ldd	r22, Z+26	; 0x1a
    2db8:	73 8d       	ldd	r23, Z+27	; 0x1b
    2dba:	e9 81       	ldd	r30, Y+1	; 0x01
    2dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dbe:	80 81       	ld	r24, Z
    2dc0:	0e 94 3d 04 	call	0x87a	; 0x87a <ld_clust.isra.3>
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	66 83       	std	Z+6, r22	; 0x06
    2dc8:	77 83       	std	Z+7, r23	; 0x07
    2dca:	80 87       	std	Z+8, r24	; 0x08
    2dcc:	91 87       	std	Z+9, r25	; 0x09
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dp->obj.id = fs->id;
    2dce:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd2:	85 81       	ldd	r24, Z+5	; 0x05
    2dd4:	96 81       	ldd	r25, Z+6	; 0x06
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	93 83       	std	Z+3, r25	; 0x03
    2dda:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    2ddc:	c8 01       	movw	r24, r16
    2dde:	0e 94 65 06 	call	0xcca	; 0xcca <dir_sdi.constprop.15>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2de2:	84 30       	cpi	r24, 0x04	; 4
    2de4:	39 f4       	brne	.+14     	; 0x2df4 <f_opendir+0x92>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    2de6:	85 e0       	ldi	r24, 0x05	; 5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    2de8:	f8 01       	movw	r30, r16
    2dea:	11 82       	std	Z+1, r1	; 0x01
    2dec:	10 82       	st	Z, r1
    2dee:	09 c0       	rjmp	.+18     	; 0x2e02 <f_opendir+0xa0>
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    2df0:	89 e0       	ldi	r24, 0x09	; 9
    2df2:	07 c0       	rjmp	.+14     	; 0x2e02 <f_opendir+0xa0>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
    2df4:	81 11       	cpse	r24, r1
    2df6:	f8 cf       	rjmp	.-16     	; 0x2de8 <f_opendir+0x86>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <f_opendir+0xa0>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2dfc:	84 30       	cpi	r24, 0x04	; 4
    2dfe:	99 f3       	breq	.-26     	; 0x2de6 <f_opendir+0x84>
    2e00:	f3 cf       	rjmp	.-26     	; 0x2de8 <f_opendir+0x86>
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	08 95       	ret

00002e14 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <f_closedir+0xa>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
    2e24:	be 01       	movw	r22, r28
    2e26:	6f 5f       	subi	r22, 0xFF	; 255
    2e28:	7f 4f       	sbci	r23, 0xFF	; 255
    2e2a:	0e 94 08 04 	call	0x810	; 0x810 <validate>
	if (res == FR_OK) {
    2e2e:	81 11       	cpse	r24, r1
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <f_closedir+0x24>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
    2e32:	f8 01       	movw	r30, r16
    2e34:	11 82       	std	Z+1, r1	; 0x01
    2e36:	10 82       	st	Z, r1
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	df 91       	pop	r29
    2e3e:	cf 91       	pop	r28
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	08 95       	ret

00002e46 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <f_readdir+0x10>
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	8c 01       	movw	r16, r24
    2e5c:	6b 01       	movw	r12, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    2e5e:	be 01       	movw	r22, r28
    2e60:	6f 5f       	subi	r22, 0xFF	; 255
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	0e 94 08 04 	call	0x810	; 0x810 <validate>
    2e68:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    2e6a:	81 11       	cpse	r24, r1
    2e6c:	23 c0       	rjmp	.+70     	; 0x2eb4 <f_readdir+0x6e>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2e6e:	c8 01       	movw	r24, r16
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
	if (res == FR_OK) {
		if (!fno) {
    2e70:	c1 14       	cp	r12, r1
    2e72:	d1 04       	cpc	r13, r1
    2e74:	19 f4       	brne	.+6      	; 0x2e7c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2e76:	0e 94 65 06 	call	0xcca	; 0xcca <dir_sdi.constprop.15>
    2e7a:	1b c0       	rjmp	.+54     	; 0x2eb2 <f_readdir+0x6c>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
    2e7c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_read.constprop.13>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    2e80:	98 2f       	mov	r25, r24
    2e82:	9b 7f       	andi	r25, 0xFB	; 251
    2e84:	b1 f4       	brne	.+44     	; 0x2eb2 <f_readdir+0x6c>
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    2e86:	f6 01       	movw	r30, r12
    2e88:	11 86       	std	Z+9, r1	; 0x09
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	86 89       	ldd	r24, Z+22	; 0x16
    2e8e:	97 89       	ldd	r25, Z+23	; 0x17
    2e90:	a0 8d       	ldd	r26, Z+24	; 0x18
    2e92:	b1 8d       	ldd	r27, Z+25	; 0x19
    2e94:	89 2b       	or	r24, r25
    2e96:	8a 2b       	or	r24, r26
    2e98:	8b 2b       	or	r24, r27
    2e9a:	21 f0       	breq	.+8      	; 0x2ea4 <f_readdir+0x5e>
    2e9c:	b6 01       	movw	r22, r12
    2e9e:	c8 01       	movw	r24, r16
    2ea0:	0e 94 5f 04 	call	0x8be	; 0x8be <get_fileinfo.part.5>
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    2ea4:	60 e0       	ldi	r22, 0x00	; 0
    2ea6:	70 e0       	ldi	r23, 0x00	; 0
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	0e 94 30 0c 	call	0x1860	; 0x1860 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    2eae:	84 30       	cpi	r24, 0x04	; 4
    2eb0:	09 f0       	breq	.+2      	; 0x2eb4 <f_readdir+0x6e>
    2eb2:	f8 2e       	mov	r15, r24
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    2eb4:	8f 2d       	mov	r24, r15
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	df 91       	pop	r29
    2ebc:	cf 91       	pop	r28
    2ebe:	1f 91       	pop	r17
    2ec0:	0f 91       	pop	r16
    2ec2:	ff 90       	pop	r15
    2ec4:	df 90       	pop	r13
    2ec6:	cf 90       	pop	r12
    2ec8:	08 95       	ret

00002eca <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	aa 97       	sbiw	r28, 0x2a	; 42
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	9a a7       	std	Y+42, r25	; 0x2a
    2ee6:	89 a7       	std	Y+41, r24	; 0x29
    2ee8:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	be 01       	movw	r22, r28
    2eee:	6f 5f       	subi	r22, 0xFF	; 255
    2ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	89 96       	adiw	r24, 0x29	; 41
    2ef6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
    2efa:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2efc:	81 11       	cpse	r24, r1
    2efe:	20 c0       	rjmp	.+64     	; 0x2f40 <f_stat+0x76>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    2f00:	69 a5       	ldd	r22, Y+41	; 0x29
    2f02:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f04:	ce 01       	movw	r24, r28
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
    2f0c:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    2f0e:	81 11       	cpse	r24, r1
    2f10:	17 c0       	rjmp	.+46     	; 0x2f40 <f_stat+0x76>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    2f12:	88 a5       	ldd	r24, Y+40	; 0x28
    2f14:	87 fd       	sbrc	r24, 7
    2f16:	13 c0       	rjmp	.+38     	; 0x2f3e <f_stat+0x74>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    2f18:	e1 14       	cp	r14, r1
    2f1a:	f1 04       	cpc	r15, r1
    2f1c:	89 f0       	breq	.+34     	; 0x2f40 <f_stat+0x76>
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    2f1e:	f7 01       	movw	r30, r14
    2f20:	11 86       	std	Z+9, r1	; 0x09
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    2f22:	8f 89       	ldd	r24, Y+23	; 0x17
    2f24:	98 8d       	ldd	r25, Y+24	; 0x18
    2f26:	a9 8d       	ldd	r26, Y+25	; 0x19
    2f28:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2f2a:	89 2b       	or	r24, r25
    2f2c:	8a 2b       	or	r24, r26
    2f2e:	8b 2b       	or	r24, r27
    2f30:	39 f0       	breq	.+14     	; 0x2f40 <f_stat+0x76>
    2f32:	b7 01       	movw	r22, r14
    2f34:	ce 01       	movw	r24, r28
    2f36:	01 96       	adiw	r24, 0x01	; 1
    2f38:	0e 94 5f 04 	call	0x8be	; 0x8be <get_fileinfo.part.5>
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <f_stat+0x76>
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
		if (res == FR_OK) {				/* Follow completed */
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
				res = FR_INVALID_NAME;
    2f3e:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    2f40:	81 2f       	mov	r24, r17
    2f42:	aa 96       	adiw	r28, 0x2a	; 42
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	08 95       	ret

00002f5a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
    2f5a:	2f 92       	push	r2
    2f5c:	3f 92       	push	r3
    2f5e:	4f 92       	push	r4
    2f60:	5f 92       	push	r5
    2f62:	6f 92       	push	r6
    2f64:	7f 92       	push	r7
    2f66:	8f 92       	push	r8
    2f68:	9f 92       	push	r9
    2f6a:	af 92       	push	r10
    2f6c:	bf 92       	push	r11
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	29 97       	sbiw	r28, 0x09	; 9
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	8b 83       	std	Y+3, r24	; 0x03
    2f92:	1b 01       	movw	r2, r22
    2f94:	7a 01       	movw	r14, r20
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    2f96:	40 e0       	ldi	r20, 0x00	; 0
    2f98:	be 01       	movw	r22, r28
    2f9a:	6f 5f       	subi	r22, 0xFF	; 255
    2f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9e:	ce 01       	movw	r24, r28
    2fa0:	03 96       	adiw	r24, 0x03	; 3
    2fa2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
	if (res == FR_OK) {
    2fa8:	81 11       	cpse	r24, r1
    2faa:	bd c0       	rjmp	.+378    	; 0x3126 <f_getfree+0x1cc>
		*fatfs = fs;				/* Return ptr to the fs object */
    2fac:	09 81       	ldd	r16, Y+1	; 0x01
    2fae:	1a 81       	ldd	r17, Y+2	; 0x02
    2fb0:	d7 01       	movw	r26, r14
    2fb2:	0d 93       	st	X+, r16
    2fb4:	1c 93       	st	X, r17
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    2fb6:	f8 01       	movw	r30, r16
    2fb8:	87 85       	ldd	r24, Z+15	; 0x0f
    2fba:	90 89       	ldd	r25, Z+16	; 0x10
    2fbc:	a1 89       	ldd	r26, Z+17	; 0x11
    2fbe:	b2 89       	ldd	r27, Z+18	; 0x12
    2fc0:	43 88       	ldd	r4, Z+19	; 0x13
    2fc2:	54 88       	ldd	r5, Z+20	; 0x14
    2fc4:	65 88       	ldd	r6, Z+21	; 0x15
    2fc6:	76 88       	ldd	r7, Z+22	; 0x16
    2fc8:	b3 01       	movw	r22, r6
    2fca:	a2 01       	movw	r20, r4
    2fcc:	42 50       	subi	r20, 0x02	; 2
    2fce:	51 09       	sbc	r21, r1
    2fd0:	61 09       	sbc	r22, r1
    2fd2:	71 09       	sbc	r23, r1
    2fd4:	48 17       	cp	r20, r24
    2fd6:	59 07       	cpc	r21, r25
    2fd8:	6a 07       	cpc	r22, r26
    2fda:	7b 07       	cpc	r23, r27
    2fdc:	30 f0       	brcs	.+12     	; 0x2fea <f_getfree+0x90>
			*nclst = fs->free_clst;
    2fde:	f1 01       	movw	r30, r2
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
    2fe8:	9e c0       	rjmp	.+316    	; 0x3126 <f_getfree+0x1cc>
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
    2fea:	80 81       	ld	r24, Z
    2fec:	81 30       	cpi	r24, 0x01	; 1
    2fee:	a1 f5       	brne	.+104    	; 0x3058 <f_getfree+0xfe>
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	48 2e       	mov	r4, r24
    2ff4:	51 2c       	mov	r5, r1
    2ff6:	61 2c       	mov	r6, r1
    2ff8:	71 2c       	mov	r7, r1
    2ffa:	c1 2c       	mov	r12, r1
    2ffc:	d1 2c       	mov	r13, r1
    2ffe:	76 01       	movw	r14, r12
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
    3000:	b3 01       	movw	r22, r6
    3002:	a2 01       	movw	r20, r4
    3004:	c8 01       	movw	r24, r16
    3006:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    300a:	6f 3f       	cpi	r22, 0xFF	; 255
    300c:	bf ef       	ldi	r27, 0xFF	; 255
    300e:	7b 07       	cpc	r23, r27
    3010:	8b 07       	cpc	r24, r27
    3012:	9b 07       	cpc	r25, r27
    3014:	09 f4       	brne	.+2      	; 0x3018 <f_getfree+0xbe>
    3016:	71 c0       	rjmp	.+226    	; 0x30fa <f_getfree+0x1a0>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3018:	61 30       	cpi	r22, 0x01	; 1
    301a:	71 05       	cpc	r23, r1
    301c:	81 05       	cpc	r24, r1
    301e:	91 05       	cpc	r25, r1
    3020:	09 f4       	brne	.+2      	; 0x3024 <f_getfree+0xca>
    3022:	6e c0       	rjmp	.+220    	; 0x3100 <f_getfree+0x1a6>
					if (stat == 0) nfree++;
    3024:	67 2b       	or	r22, r23
    3026:	68 2b       	or	r22, r24
    3028:	69 2b       	or	r22, r25
    302a:	29 f4       	brne	.+10     	; 0x3036 <f_getfree+0xdc>
    302c:	ef ef       	ldi	r30, 0xFF	; 255
    302e:	ce 1a       	sub	r12, r30
    3030:	de 0a       	sbc	r13, r30
    3032:	ee 0a       	sbc	r14, r30
    3034:	fe 0a       	sbc	r15, r30
				} while (++clst < fs->n_fatent);
    3036:	ff ef       	ldi	r31, 0xFF	; 255
    3038:	4f 1a       	sub	r4, r31
    303a:	5f 0a       	sbc	r5, r31
    303c:	6f 0a       	sbc	r6, r31
    303e:	7f 0a       	sbc	r7, r31
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	83 89       	ldd	r24, Z+19	; 0x13
    3046:	94 89       	ldd	r25, Z+20	; 0x14
    3048:	a5 89       	ldd	r26, Z+21	; 0x15
    304a:	b6 89       	ldd	r27, Z+22	; 0x16
    304c:	48 16       	cp	r4, r24
    304e:	59 06       	cpc	r5, r25
    3050:	6a 06       	cpc	r6, r26
    3052:	7b 06       	cpc	r7, r27
    3054:	a8 f2       	brcs	.-86     	; 0x3000 <f_getfree+0xa6>
    3056:	58 c0       	rjmp	.+176    	; 0x3108 <f_getfree+0x1ae>
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
    3058:	87 8c       	ldd	r8, Z+31	; 0x1f
    305a:	90 a0       	ldd	r9, Z+32	; 0x20
    305c:	a1 a0       	ldd	r10, Z+33	; 0x21
    305e:	b2 a0       	ldd	r11, Z+34	; 0x22
					i = 0;					/* Offset in the sector */
    3060:	00 e0       	ldi	r16, 0x00	; 0
    3062:	10 e0       	ldi	r17, 0x00	; 0
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Scan FAT to obtain number of free clusters */
			nfree = 0;
    3064:	c1 2c       	mov	r12, r1
    3066:	d1 2c       	mov	r13, r1
    3068:	76 01       	movw	r14, r12
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
    306a:	01 15       	cp	r16, r1
    306c:	11 05       	cpc	r17, r1
    306e:	a9 f4       	brne	.+42     	; 0x309a <f_getfree+0x140>
							res = move_window(fs, sect++);
    3070:	d5 01       	movw	r26, r10
    3072:	c4 01       	movw	r24, r8
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	a1 1d       	adc	r26, r1
    3078:	b1 1d       	adc	r27, r1
    307a:	8e 83       	std	Y+6, r24	; 0x06
    307c:	9f 83       	std	Y+7, r25	; 0x07
    307e:	a8 87       	std	Y+8, r26	; 0x08
    3080:	b9 87       	std	Y+9, r27	; 0x09
    3082:	b5 01       	movw	r22, r10
    3084:	a4 01       	movw	r20, r8
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	9a 81       	ldd	r25, Y+2	; 0x02
    308a:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
							if (res != FR_OK) break;
    308e:	81 11       	cpse	r24, r1
    3090:	3a c0       	rjmp	.+116    	; 0x3106 <f_getfree+0x1ac>
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
    3092:	8e 80       	ldd	r8, Y+6	; 0x06
    3094:	9f 80       	ldd	r9, Y+7	; 0x07
    3096:	a8 84       	ldd	r10, Y+8	; 0x08
    3098:	b9 84       	ldd	r11, Y+9	; 0x09
							if (res != FR_OK) break;
						}
						if (fs->fs_type == FS_FAT16) {
    309a:	e9 81       	ldd	r30, Y+1	; 0x01
    309c:	fa 81       	ldd	r31, Y+2	; 0x02
    309e:	80 81       	ld	r24, Z
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	71 f4       	brne	.+28     	; 0x30c0 <f_getfree+0x166>
static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    30a4:	e0 0f       	add	r30, r16
    30a6:	f1 1f       	adc	r31, r17
						if (i == 0) {
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(fs->win + i) == 0) nfree++;
    30a8:	87 a5       	ldd	r24, Z+47	; 0x2f
    30aa:	90 a9       	ldd	r25, Z+48	; 0x30
    30ac:	89 2b       	or	r24, r25
    30ae:	29 f4       	brne	.+10     	; 0x30ba <f_getfree+0x160>
    30b0:	9f ef       	ldi	r25, 0xFF	; 255
    30b2:	c9 1a       	sub	r12, r25
    30b4:	d9 0a       	sbc	r13, r25
    30b6:	e9 0a       	sbc	r14, r25
    30b8:	f9 0a       	sbc	r15, r25
							i += 2;
    30ba:	0e 5f       	subi	r16, 0xFE	; 254
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	14 c0       	rjmp	.+40     	; 0x30e8 <f_getfree+0x18e>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
    30c0:	cf 01       	movw	r24, r30
    30c2:	8f 96       	adiw	r24, 0x2f	; 47
    30c4:	80 0f       	add	r24, r16
    30c6:	91 1f       	adc	r25, r17
    30c8:	0e 94 a4 03 	call	0x748	; 0x748 <ld_dword>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	bf 70       	andi	r27, 0x0F	; 15
    30d2:	89 2b       	or	r24, r25
    30d4:	8a 2b       	or	r24, r26
    30d6:	8b 2b       	or	r24, r27
    30d8:	29 f4       	brne	.+10     	; 0x30e4 <f_getfree+0x18a>
    30da:	af ef       	ldi	r26, 0xFF	; 255
    30dc:	ca 1a       	sub	r12, r26
    30de:	da 0a       	sbc	r13, r26
    30e0:	ea 0a       	sbc	r14, r26
    30e2:	fa 0a       	sbc	r15, r26
							i += 4;
    30e4:	0c 5f       	subi	r16, 0xFC	; 252
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
						}
						i %= SS(fs);
    30e8:	11 70       	andi	r17, 0x01	; 1
					} while (--clst);
    30ea:	b1 e0       	ldi	r27, 0x01	; 1
    30ec:	4b 1a       	sub	r4, r27
    30ee:	51 08       	sbc	r5, r1
    30f0:	61 08       	sbc	r6, r1
    30f2:	71 08       	sbc	r7, r1
    30f4:	09 f0       	breq	.+2      	; 0x30f8 <f_getfree+0x19e>
    30f6:	b9 cf       	rjmp	.-142    	; 0x306a <f_getfree+0x110>
    30f8:	07 c0       	rjmp	.+14     	; 0x3108 <f_getfree+0x1ae>
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    30fa:	e1 e0       	ldi	r30, 0x01	; 1
    30fc:	ed 83       	std	Y+5, r30	; 0x05
    30fe:	04 c0       	rjmp	.+8      	; 0x3108 <f_getfree+0x1ae>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3100:	f2 e0       	ldi	r31, 0x02	; 2
    3102:	fd 83       	std	Y+5, r31	; 0x05
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <f_getfree+0x1ae>
					clst = fs->n_fatent;	/* Number of entries */
					sect = fs->fatbase;		/* Top of the FAT */
					i = 0;					/* Offset in the sector */
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {
							res = move_window(fs, sect++);
    3106:	8d 83       	std	Y+5, r24	; 0x05
						}
						i %= SS(fs);
					} while (--clst);
				}
			}
			*nclst = nfree;			/* Return the free clusters */
    3108:	d1 01       	movw	r26, r2
    310a:	cd 92       	st	X+, r12
    310c:	dd 92       	st	X+, r13
    310e:	ed 92       	st	X+, r14
    3110:	fc 92       	st	X, r15
    3112:	13 97       	sbiw	r26, 0x03	; 3
			fs->free_clst = nfree;	/* Now free_clst is valid */
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	c7 86       	std	Z+15, r12	; 0x0f
    311a:	d0 8a       	std	Z+16, r13	; 0x10
    311c:	e1 8a       	std	Z+17, r14	; 0x11
    311e:	f2 8a       	std	Z+18, r15	; 0x12
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
    3120:	84 81       	ldd	r24, Z+4	; 0x04
    3122:	81 60       	ori	r24, 0x01	; 1
    3124:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	LEAVE_FF(fs, res);
}
    3126:	8d 81       	ldd	r24, Y+5	; 0x05
    3128:	29 96       	adiw	r28, 0x09	; 9
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	df 90       	pop	r13
    3142:	cf 90       	pop	r12
    3144:	bf 90       	pop	r11
    3146:	af 90       	pop	r10
    3148:	9f 90       	pop	r9
    314a:	8f 90       	pop	r8
    314c:	7f 90       	pop	r7
    314e:	6f 90       	pop	r6
    3150:	5f 90       	pop	r5
    3152:	4f 90       	pop	r4
    3154:	3f 90       	pop	r3
    3156:	2f 90       	pop	r2
    3158:	08 95       	ret

0000315a <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	00 d0       	rcall	.+0      	; 0x3168 <f_truncate+0xe>
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	7c 01       	movw	r14, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    316e:	be 01       	movw	r22, r28
    3170:	6f 5f       	subi	r22, 0xFF	; 255
    3172:	7f 4f       	sbci	r23, 0xFF	; 255
    3174:	0e 94 08 04 	call	0x810	; 0x810 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
    3178:	81 11       	cpse	r24, r1
    317a:	6c c0       	rjmp	.+216    	; 0x3254 <f_truncate+0xfa>
    317c:	f7 01       	movw	r30, r14
    317e:	17 85       	ldd	r17, Z+15	; 0x0f
    3180:	11 11       	cpse	r17, r1
    3182:	63 c0       	rjmp	.+198    	; 0x324a <f_truncate+0xf0>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    3184:	86 85       	ldd	r24, Z+14	; 0x0e
    3186:	81 ff       	sbrs	r24, 1
    3188:	62 c0       	rjmp	.+196    	; 0x324e <f_truncate+0xf4>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
    318a:	80 89       	ldd	r24, Z+16	; 0x10
    318c:	91 89       	ldd	r25, Z+17	; 0x11
    318e:	a2 89       	ldd	r26, Z+18	; 0x12
    3190:	b3 89       	ldd	r27, Z+19	; 0x13
    3192:	42 85       	ldd	r20, Z+10	; 0x0a
    3194:	53 85       	ldd	r21, Z+11	; 0x0b
    3196:	64 85       	ldd	r22, Z+12	; 0x0c
    3198:	75 85       	ldd	r23, Z+13	; 0x0d
    319a:	84 17       	cp	r24, r20
    319c:	95 07       	cpc	r25, r21
    319e:	a6 07       	cpc	r26, r22
    31a0:	b7 07       	cpc	r27, r23
    31a2:	08 f0       	brcs	.+2      	; 0x31a6 <f_truncate+0x4c>
    31a4:	56 c0       	rjmp	.+172    	; 0x3252 <f_truncate+0xf8>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    31a6:	89 2b       	or	r24, r25
    31a8:	8a 2b       	or	r24, r26
    31aa:	8b 2b       	or	r24, r27
    31ac:	89 f4       	brne	.+34     	; 0x31d0 <f_truncate+0x76>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    31ae:	46 81       	ldd	r20, Z+6	; 0x06
    31b0:	57 81       	ldd	r21, Z+7	; 0x07
    31b2:	60 85       	ldd	r22, Z+8	; 0x08
    31b4:	71 85       	ldd	r23, Z+9	; 0x09
    31b6:	00 e0       	ldi	r16, 0x00	; 0
    31b8:	10 e0       	ldi	r17, 0x00	; 0
    31ba:	98 01       	movw	r18, r16
    31bc:	c7 01       	movw	r24, r14
    31be:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <remove_chain>
    31c2:	18 2f       	mov	r17, r24
			fp->obj.sclust = 0;
    31c4:	f7 01       	movw	r30, r14
    31c6:	16 82       	std	Z+6, r1	; 0x06
    31c8:	17 82       	std	Z+7, r1	; 0x07
    31ca:	10 86       	std	Z+8, r1	; 0x08
    31cc:	11 86       	std	Z+9, r1	; 0x09
    31ce:	2e c0       	rjmp	.+92     	; 0x322c <f_truncate+0xd2>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
    31d0:	f7 01       	movw	r30, r14
    31d2:	44 89       	ldd	r20, Z+20	; 0x14
    31d4:	55 89       	ldd	r21, Z+21	; 0x15
    31d6:	66 89       	ldd	r22, Z+22	; 0x16
    31d8:	77 89       	ldd	r23, Z+23	; 0x17
    31da:	80 81       	ld	r24, Z
    31dc:	91 81       	ldd	r25, Z+1	; 0x01
    31de:	0e 94 a5 05 	call	0xb4a	; 0xb4a <get_fat.isra.10>
    31e2:	ab 01       	movw	r20, r22
    31e4:	bc 01       	movw	r22, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    31e6:	4f 3f       	cpi	r20, 0xFF	; 255
    31e8:	ff ef       	ldi	r31, 0xFF	; 255
    31ea:	5f 07       	cpc	r21, r31
    31ec:	6f 07       	cpc	r22, r31
    31ee:	7f 07       	cpc	r23, r31
    31f0:	39 f0       	breq	.+14     	; 0x3200 <f_truncate+0xa6>
			if (ncl == 1) res = FR_INT_ERR;
    31f2:	41 30       	cpi	r20, 0x01	; 1
    31f4:	51 05       	cpc	r21, r1
    31f6:	61 05       	cpc	r22, r1
    31f8:	71 05       	cpc	r23, r1
    31fa:	21 f4       	brne	.+8      	; 0x3204 <f_truncate+0xaa>
    31fc:	12 e0       	ldi	r17, 0x02	; 2
    31fe:	16 c0       	rjmp	.+44     	; 0x322c <f_truncate+0xd2>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3200:	11 e0       	ldi	r17, 0x01	; 1
    3202:	14 c0       	rjmp	.+40     	; 0x322c <f_truncate+0xd2>
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
    3204:	e9 81       	ldd	r30, Y+1	; 0x01
    3206:	fa 81       	ldd	r31, Y+2	; 0x02
    3208:	83 89       	ldd	r24, Z+19	; 0x13
    320a:	94 89       	ldd	r25, Z+20	; 0x14
    320c:	a5 89       	ldd	r26, Z+21	; 0x15
    320e:	b6 89       	ldd	r27, Z+22	; 0x16
    3210:	48 17       	cp	r20, r24
    3212:	59 07       	cpc	r21, r25
    3214:	6a 07       	cpc	r22, r26
    3216:	7b 07       	cpc	r23, r27
    3218:	48 f4       	brcc	.+18     	; 0x322c <f_truncate+0xd2>
				res = remove_chain(&fp->obj, ncl, fp->clust);
    321a:	f7 01       	movw	r30, r14
    321c:	04 89       	ldd	r16, Z+20	; 0x14
    321e:	15 89       	ldd	r17, Z+21	; 0x15
    3220:	26 89       	ldd	r18, Z+22	; 0x16
    3222:	37 89       	ldd	r19, Z+23	; 0x17
    3224:	c7 01       	movw	r24, r14
    3226:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <remove_chain>
    322a:	18 2f       	mov	r17, r24
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
    322c:	f7 01       	movw	r30, r14
    322e:	80 89       	ldd	r24, Z+16	; 0x10
    3230:	91 89       	ldd	r25, Z+17	; 0x11
    3232:	a2 89       	ldd	r26, Z+18	; 0x12
    3234:	b3 89       	ldd	r27, Z+19	; 0x13
    3236:	82 87       	std	Z+10, r24	; 0x0a
    3238:	93 87       	std	Z+11, r25	; 0x0b
    323a:	a4 87       	std	Z+12, r26	; 0x0c
    323c:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    323e:	86 85       	ldd	r24, Z+14	; 0x0e
    3240:	80 64       	ori	r24, 0x40	; 64
    3242:	86 87       	std	Z+14, r24	; 0x0e
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
    3244:	11 23       	and	r17, r17
    3246:	29 f0       	breq	.+10     	; 0x3252 <f_truncate+0xf8>
    3248:	17 87       	std	Z+15, r17	; 0x0f
    324a:	81 2f       	mov	r24, r17
    324c:	03 c0       	rjmp	.+6      	; 0x3254 <f_truncate+0xfa>
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    324e:	87 e0       	ldi	r24, 0x07	; 7
    3250:	01 c0       	rjmp	.+2      	; 0x3254 <f_truncate+0xfa>
    3252:	80 e0       	ldi	r24, 0x00	; 0
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	1f 91       	pop	r17
    325e:	0f 91       	pop	r16
    3260:	ff 90       	pop	r15
    3262:	ef 90       	pop	r14
    3264:	08 95       	ret

00003266 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    3266:	bf 92       	push	r11
    3268:	cf 92       	push	r12
    326a:	df 92       	push	r13
    326c:	ef 92       	push	r14
    326e:	ff 92       	push	r15
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	c4 55       	subi	r28, 0x54	; 84
    327e:	d1 09       	sbc	r29, r1
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	65 96       	adiw	r28, 0x15	; 21
    328c:	9f af       	std	Y+63, r25	; 0x3f
    328e:	8e af       	std	Y+62, r24	; 0x3e
    3290:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    3292:	42 e0       	ldi	r20, 0x02	; 2
    3294:	be 01       	movw	r22, r28
    3296:	6f 5a       	subi	r22, 0xAF	; 175
    3298:	7f 4f       	sbci	r23, 0xFF	; 255
    329a:	ce 01       	movw	r24, r28
    329c:	8d 5a       	subi	r24, 0xAD	; 173
    329e:	9f 4f       	sbci	r25, 0xFF	; 255
    32a0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
	if (res == FR_OK) {
    32a4:	81 11       	cpse	r24, r1
    32a6:	6e c0       	rjmp	.+220    	; 0x3384 <f_unlink+0x11e>
		dj.obj.fs = fs;
    32a8:	63 96       	adiw	r28, 0x13	; 19
    32aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    32ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    32ae:	63 97       	sbiw	r28, 0x13	; 19
    32b0:	9a a7       	std	Y+42, r25	; 0x2a
    32b2:	89 a7       	std	Y+41, r24	; 0x29
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    32b4:	65 96       	adiw	r28, 0x15	; 21
    32b6:	6e ad       	ldd	r22, Y+62	; 0x3e
    32b8:	7f ad       	ldd	r23, Y+63	; 0x3f
    32ba:	65 97       	sbiw	r28, 0x15	; 21
    32bc:	ce 01       	movw	r24, r28
    32be:	89 96       	adiw	r24, 0x29	; 41
    32c0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    32c4:	81 11       	cpse	r24, r1
    32c6:	5e c0       	rjmp	.+188    	; 0x3384 <f_unlink+0x11e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    32c8:	61 96       	adiw	r28, 0x11	; 17
    32ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    32cc:	61 97       	sbiw	r28, 0x11	; 17
    32ce:	87 fd       	sbrc	r24, 7
    32d0:	28 c0       	rjmp	.+80     	; 0x3322 <f_unlink+0xbc>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    32d2:	bd a4       	ldd	r11, Y+45	; 0x2d
    32d4:	b0 fc       	sbrc	r11, 0
    32d6:	27 c0       	rjmp	.+78     	; 0x3326 <f_unlink+0xc0>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    32d8:	63 96       	adiw	r28, 0x13	; 19
    32da:	0e ad       	ldd	r16, Y+62	; 0x3e
    32dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    32de:	63 97       	sbiw	r28, 0x13	; 19
    32e0:	25 96       	adiw	r28, 0x05	; 5
    32e2:	6e ad       	ldd	r22, Y+62	; 0x3e
    32e4:	7f ad       	ldd	r23, Y+63	; 0x3f
    32e6:	25 97       	sbiw	r28, 0x05	; 5
    32e8:	f8 01       	movw	r30, r16
    32ea:	80 81       	ld	r24, Z
    32ec:	0e 94 3d 04 	call	0x87a	; 0x87a <ld_clust.isra.3>
    32f0:	6b 01       	movw	r12, r22
    32f2:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    32f4:	b4 fe       	sbrs	r11, 4
    32f6:	19 c0       	rjmp	.+50     	; 0x332a <f_unlink+0xc4>
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    32f8:	1a 83       	std	Y+2, r17	; 0x02
    32fa:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    32fc:	cf 82       	std	Y+7, r12	; 0x07
    32fe:	d8 86       	std	Y+8, r13	; 0x08
    3300:	e9 86       	std	Y+9, r14	; 0x09
    3302:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    3304:	ce 01       	movw	r24, r28
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	0e 94 65 06 	call	0xcca	; 0xcca <dir_sdi.constprop.15>
						if (res == FR_OK) {
    330c:	81 11       	cpse	r24, r1
    330e:	3a c0       	rjmp	.+116    	; 0x3384 <f_unlink+0x11e>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    3310:	ce 01       	movw	r24, r28
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <dir_read.constprop.13>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    3318:	88 23       	and	r24, r24
    331a:	29 f0       	breq	.+10     	; 0x3326 <f_unlink+0xc0>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    331c:	84 30       	cpi	r24, 0x04	; 4
    331e:	29 f0       	breq	.+10     	; 0x332a <f_unlink+0xc4>
    3320:	31 c0       	rjmp	.+98     	; 0x3384 <f_unlink+0x11e>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    3322:	86 e0       	ldi	r24, 0x06	; 6
    3324:	2f c0       	rjmp	.+94     	; 0x3384 <f_unlink+0x11e>
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    3326:	87 e0       	ldi	r24, 0x07	; 7
    3328:	2d c0       	rjmp	.+90     	; 0x3384 <f_unlink+0x11e>
static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    332a:	09 a5       	ldd	r16, Y+41	; 0x29
    332c:	1a a5       	ldd	r17, Y+42	; 0x2a
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    332e:	23 96       	adiw	r28, 0x03	; 3
    3330:	4c ad       	ldd	r20, Y+60	; 0x3c
    3332:	5d ad       	ldd	r21, Y+61	; 0x3d
    3334:	6e ad       	ldd	r22, Y+62	; 0x3e
    3336:	7f ad       	ldd	r23, Y+63	; 0x3f
    3338:	23 97       	sbiw	r28, 0x03	; 3
    333a:	c8 01       	movw	r24, r16
    333c:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
	if (res == FR_OK) {
    3340:	81 11       	cpse	r24, r1
    3342:	20 c0       	rjmp	.+64     	; 0x3384 <f_unlink+0x11e>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
    3344:	25 96       	adiw	r28, 0x05	; 5
    3346:	ee ad       	ldd	r30, Y+62	; 0x3e
    3348:	ff ad       	ldd	r31, Y+63	; 0x3f
    334a:	25 97       	sbiw	r28, 0x05	; 5
    334c:	85 ee       	ldi	r24, 0xE5	; 229
    334e:	80 83       	st	Z, r24
		fs->wflag = 1;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	f8 01       	movw	r30, r16
    3354:	83 83       	std	Z+3, r24	; 0x03
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    3356:	c1 14       	cp	r12, r1
    3358:	d1 04       	cpc	r13, r1
    335a:	e1 04       	cpc	r14, r1
    335c:	f1 04       	cpc	r15, r1
    335e:	39 f4       	brne	.+14     	; 0x336e <f_unlink+0x108>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    3360:	63 96       	adiw	r28, 0x13	; 19
    3362:	8e ad       	ldd	r24, Y+62	; 0x3e
    3364:	9f ad       	ldd	r25, Y+63	; 0x3f
    3366:	63 97       	sbiw	r28, 0x13	; 19
    3368:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sync_fs>
    336c:	0b c0       	rjmp	.+22     	; 0x3384 <f_unlink+0x11e>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    336e:	00 e0       	ldi	r16, 0x00	; 0
    3370:	10 e0       	ldi	r17, 0x00	; 0
    3372:	98 01       	movw	r18, r16
    3374:	b7 01       	movw	r22, r14
    3376:	a6 01       	movw	r20, r12
    3378:	ce 01       	movw	r24, r28
    337a:	89 96       	adiw	r24, 0x29	; 41
    337c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    3380:	88 23       	and	r24, r24
    3382:	71 f3       	breq	.-36     	; 0x3360 <f_unlink+0xfa>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3384:	cc 5a       	subi	r28, 0xAC	; 172
    3386:	df 4f       	sbci	r29, 0xFF	; 255
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	ff 90       	pop	r15
    339c:	ef 90       	pop	r14
    339e:	df 90       	pop	r13
    33a0:	cf 90       	pop	r12
    33a2:	bf 90       	pop	r11
    33a4:	08 95       	ret

000033a6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    33a6:	8f 92       	push	r8
    33a8:	9f 92       	push	r9
    33aa:	af 92       	push	r10
    33ac:	bf 92       	push	r11
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	ea 97       	sbiw	r28, 0x3a	; 58
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	9a af       	std	Y+58, r25	; 0x3a
    33ce:	89 af       	std	Y+57, r24	; 0x39
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    33d0:	42 e0       	ldi	r20, 0x02	; 2
    33d2:	be 01       	movw	r22, r28
    33d4:	69 5c       	subi	r22, 0xC9	; 201
    33d6:	7f 4f       	sbci	r23, 0xFF	; 255
    33d8:	ce 01       	movw	r24, r28
    33da:	c9 96       	adiw	r24, 0x39	; 57
    33dc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
    33e0:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    33e2:	81 11       	cpse	r24, r1
    33e4:	ae c0       	rjmp	.+348    	; 0x3542 <f_mkdir+0x19c>
		dj.obj.fs = fs;
    33e6:	8f a9       	ldd	r24, Y+55	; 0x37
    33e8:	98 ad       	ldd	r25, Y+56	; 0x38
    33ea:	9a 83       	std	Y+2, r25	; 0x02
    33ec:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    33ee:	69 ad       	ldd	r22, Y+57	; 0x39
    33f0:	7a ad       	ldd	r23, Y+58	; 0x3a
    33f2:	ce 01       	movw	r24, r28
    33f4:	01 96       	adiw	r24, 0x01	; 1
    33f6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
    33fa:	f8 2e       	mov	r15, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    33fc:	88 23       	and	r24, r24
    33fe:	31 f1       	breq	.+76     	; 0x344c <f_mkdir+0xa6>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
    3400:	84 e0       	ldi	r24, 0x04	; 4
    3402:	f8 12       	cpse	r15, r24
    3404:	9e c0       	rjmp	.+316    	; 0x3542 <f_mkdir+0x19c>
			sobj.fs = fs;						/* New object id to create a new chain */
    3406:	8f a9       	ldd	r24, Y+55	; 0x37
    3408:	98 ad       	ldd	r25, Y+56	; 0x38
    340a:	9a a7       	std	Y+42, r25	; 0x2a
    340c:	89 a7       	std	Y+41, r24	; 0x29
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    340e:	40 e0       	ldi	r20, 0x00	; 0
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	ba 01       	movw	r22, r20
    3414:	ce 01       	movw	r24, r28
    3416:	89 96       	adiw	r24, 0x29	; 41
    3418:	0e 94 ef 0a 	call	0x15de	; 0x15de <create_chain>
    341c:	4b 01       	movw	r8, r22
    341e:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    3420:	61 15       	cp	r22, r1
    3422:	71 05       	cpc	r23, r1
    3424:	81 05       	cpc	r24, r1
    3426:	91 05       	cpc	r25, r1
    3428:	a1 f0       	breq	.+40     	; 0x3452 <f_mkdir+0xac>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    342a:	61 30       	cpi	r22, 0x01	; 1
    342c:	71 05       	cpc	r23, r1
    342e:	81 05       	cpc	r24, r1
    3430:	91 05       	cpc	r25, r1
    3432:	91 f4       	brne	.+36     	; 0x3458 <f_mkdir+0xb2>
    3434:	82 e0       	ldi	r24, 0x02	; 2
    3436:	f8 2e       	mov	r15, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    3438:	00 e0       	ldi	r16, 0x00	; 0
    343a:	10 e0       	ldi	r17, 0x00	; 0
    343c:	98 01       	movw	r18, r16
    343e:	b5 01       	movw	r22, r10
    3440:	a4 01       	movw	r20, r8
    3442:	ce 01       	movw	r24, r28
    3444:	89 96       	adiw	r24, 0x29	; 41
    3446:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <remove_chain>
    344a:	7b c0       	rjmp	.+246    	; 0x3542 <f_mkdir+0x19c>
	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    344c:	28 e0       	ldi	r18, 0x08	; 8
    344e:	f2 2e       	mov	r15, r18
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
    3450:	78 c0       	rjmp	.+240    	; 0x3542 <f_mkdir+0x19c>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    3452:	97 e0       	ldi	r25, 0x07	; 7
    3454:	f9 2e       	mov	r15, r25
    3456:	f0 cf       	rjmp	.-32     	; 0x3438 <f_mkdir+0x92>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    3458:	6f 3f       	cpi	r22, 0xFF	; 255
    345a:	7f 4f       	sbci	r23, 0xFF	; 255
    345c:	8f 4f       	sbci	r24, 0xFF	; 255
    345e:	9f 4f       	sbci	r25, 0xFF	; 255
    3460:	09 f4       	brne	.+2      	; 0x3464 <f_mkdir+0xbe>
    3462:	6c c0       	rjmp	.+216    	; 0x353c <f_mkdir+0x196>
			tm = GET_FATTIME();
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    3464:	b5 01       	movw	r22, r10
    3466:	a4 01       	movw	r20, r8
    3468:	8f a9       	ldd	r24, Y+55	; 0x37
    346a:	98 ad       	ldd	r25, Y+56	; 0x38
    346c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <dir_clear>
    3470:	f8 2e       	mov	r15, r24
				if (res == FR_OK) {
    3472:	81 11       	cpse	r24, r1
    3474:	e1 cf       	rjmp	.-62     	; 0x3438 <f_mkdir+0x92>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    3476:	8f a9       	ldd	r24, Y+55	; 0x37
    3478:	98 ad       	ldd	r25, Y+56	; 0x38
    347a:	fc 01       	movw	r30, r24
    347c:	bf 96       	adiw	r30, 0x2f	; 47
    347e:	ca 96       	adiw	r24, 0x3a	; 58
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
    3480:	20 e2       	ldi	r18, 0x20	; 32
    3482:	21 93       	st	Z+, r18
	} while (--cnt);
    3484:	e8 17       	cp	r30, r24
    3486:	f9 07       	cpc	r31, r25
    3488:	e1 f7       	brne	.-8      	; 0x3482 <f_mkdir+0xdc>
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
				if (res == FR_OK) {
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
						fs->win[DIR_Name] = '.';
    348a:	8f a9       	ldd	r24, Y+55	; 0x37
    348c:	98 ad       	ldd	r25, Y+56	; 0x38
    348e:	1e e2       	ldi	r17, 0x2E	; 46
    3490:	fc 01       	movw	r30, r24
    3492:	17 a7       	std	Z+47, r17	; 0x2f
						fs->win[DIR_Attr] = AM_DIR;
    3494:	00 e1       	ldi	r16, 0x10	; 16
    3496:	02 af       	std	Z+58, r16	; 0x3a
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3498:	eb 5b       	subi	r30, 0xBB	; 187
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    349e:	31 96       	adiw	r30, 0x01	; 1
    34a0:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    34a2:	31 96       	adiw	r30, 0x01	; 1
    34a4:	32 e3       	ldi	r19, 0x32	; 50
    34a6:	d3 2e       	mov	r13, r19
    34a8:	d0 82       	st	Z, r13
	*ptr++ = (BYTE)val;
    34aa:	31 96       	adiw	r30, 0x01	; 1
    34ac:	40 e5       	ldi	r20, 0x50	; 80
    34ae:	e4 2e       	mov	r14, r20
    34b0:	e0 82       	st	Z, r14
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
						fs->win[DIR_Name] = '.';
						fs->win[DIR_Attr] = AM_DIR;
						st_dword(fs->win + DIR_ModTime, tm);
						st_clust(fs, fs->win, dcl);
    34b2:	bc 01       	movw	r22, r24
    34b4:	61 5d       	subi	r22, 0xD1	; 209
    34b6:	7f 4f       	sbci	r23, 0xFF	; 255
    34b8:	a5 01       	movw	r20, r10
    34ba:	94 01       	movw	r18, r8
    34bc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    34c0:	8f a9       	ldd	r24, Y+55	; 0x37
    34c2:	98 ad       	ldd	r25, Y+56	; 0x38
    34c4:	bc 01       	movw	r22, r24
    34c6:	61 5d       	subi	r22, 0xD1	; 209
    34c8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ca:	40 e2       	ldi	r20, 0x20	; 32
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	81 5b       	subi	r24, 0xB1	; 177
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    34d6:	8f a9       	ldd	r24, Y+55	; 0x37
    34d8:	98 ad       	ldd	r25, Y+56	; 0x38
    34da:	fc 01       	movw	r30, r24
    34dc:	e0 5b       	subi	r30, 0xB0	; 176
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    34e2:	2f 81       	ldd	r18, Y+7	; 0x07
    34e4:	38 85       	ldd	r19, Y+8	; 0x08
    34e6:	49 85       	ldd	r20, Y+9	; 0x09
    34e8:	5a 85       	ldd	r21, Y+10	; 0x0a
    34ea:	bc 01       	movw	r22, r24
    34ec:	61 5b       	subi	r22, 0xB1	; 177
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255
    34f0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <st_clust.isra.4>
						fs->wflag = 1;
    34f4:	ef a9       	ldd	r30, Y+55	; 0x37
    34f6:	f8 ad       	ldd	r31, Y+56	; 0x38
    34f8:	11 e0       	ldi	r17, 0x01	; 1
    34fa:	13 83       	std	Z+3, r17	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    34fc:	ce 01       	movw	r24, r28
    34fe:	01 96       	adiw	r24, 0x01	; 1
    3500:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <dir_register>
    3504:	f8 2e       	mov	r15, r24
				}
			}
			if (res == FR_OK) {
    3506:	81 11       	cpse	r24, r1
    3508:	97 cf       	rjmp	.-210    	; 0x3438 <f_mkdir+0x92>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    350a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    350c:	fc 8d       	ldd	r31, Y+28	; 0x1c
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    350e:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    3510:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    3512:	d0 8e       	std	Z+24, r13	; 0x18
	*ptr++ = (BYTE)val;
    3514:	e1 8e       	std	Z+25, r14	; 0x19
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    3516:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3518:	7c 8d       	ldd	r23, Y+28	; 0x1c
    351a:	a5 01       	movw	r20, r10
    351c:	94 01       	movw	r18, r8
    351e:	8f a9       	ldd	r24, Y+55	; 0x37
    3520:	98 ad       	ldd	r25, Y+56	; 0x38
    3522:	0e 94 52 04 	call	0x8a4	; 0x8a4 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    3526:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3528:	fc 8d       	ldd	r31, Y+28	; 0x1c
    352a:	03 87       	std	Z+11, r16	; 0x0b
					fs->wflag = 1;
    352c:	8f a9       	ldd	r24, Y+55	; 0x37
    352e:	98 ad       	ldd	r25, Y+56	; 0x38
    3530:	fc 01       	movw	r30, r24
    3532:	13 83       	std	Z+3, r17	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    3534:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sync_fs>
    3538:	f8 2e       	mov	r15, r24
    353a:	03 c0       	rjmp	.+6      	; 0x3542 <f_mkdir+0x19c>
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    353c:	ff 24       	eor	r15, r15
    353e:	f3 94       	inc	r15
    3540:	7b cf       	rjmp	.-266    	; 0x3438 <f_mkdir+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3542:	8f 2d       	mov	r24, r15
    3544:	ea 96       	adiw	r28, 0x3a	; 58
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	0f 91       	pop	r16
    3558:	ff 90       	pop	r15
    355a:	ef 90       	pop	r14
    355c:	df 90       	pop	r13
    355e:	bf 90       	pop	r11
    3560:	af 90       	pop	r10
    3562:	9f 90       	pop	r9
    3564:	8f 90       	pop	r8
    3566:	08 95       	ret

00003568 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    3568:	df 92       	push	r13
    356a:	ef 92       	push	r14
    356c:	ff 92       	push	r15
    356e:	0f 93       	push	r16
    3570:	1f 93       	push	r17
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	c6 57       	subi	r28, 0x76	; 118
    357c:	d1 09       	sbc	r29, r1
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	e5 96       	adiw	r28, 0x35	; 53
    358a:	9f af       	std	Y+63, r25	; 0x3f
    358c:	8e af       	std	Y+62, r24	; 0x3e
    358e:	e5 97       	sbiw	r28, 0x35	; 53
    3590:	e7 96       	adiw	r28, 0x37	; 55
    3592:	7f af       	std	Y+63, r23	; 0x3f
    3594:	6e af       	std	Y+62, r22	; 0x3e
    3596:	e7 97       	sbiw	r28, 0x37	; 55
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    3598:	ce 01       	movw	r24, r28
    359a:	8b 58       	subi	r24, 0x8B	; 139
    359c:	9f 4f       	sbci	r25, 0xFF	; 255
    359e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    35a2:	42 e0       	ldi	r20, 0x02	; 2
    35a4:	be 01       	movw	r22, r28
    35a6:	6f 58       	subi	r22, 0x8F	; 143
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	ce 01       	movw	r24, r28
    35ac:	8d 58       	subi	r24, 0x8D	; 141
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mount_volume>
	if (res == FR_OK) {
    35b4:	81 11       	cpse	r24, r1
    35b6:	da c0       	rjmp	.+436    	; 0x376c <f_rename+0x204>
		djo.obj.fs = fs;
    35b8:	e3 96       	adiw	r28, 0x33	; 51
    35ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    35bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    35be:	e3 97       	sbiw	r28, 0x33	; 51
    35c0:	9a a7       	std	Y+42, r25	; 0x2a
    35c2:	89 a7       	std	Y+41, r24	; 0x29
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
    35c4:	e5 96       	adiw	r28, 0x35	; 53
    35c6:	6e ad       	ldd	r22, Y+62	; 0x3e
    35c8:	7f ad       	ldd	r23, Y+63	; 0x3f
    35ca:	e5 97       	sbiw	r28, 0x35	; 53
    35cc:	ce 01       	movw	r24, r28
    35ce:	89 96       	adiw	r24, 0x29	; 41
    35d0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    35d4:	81 11       	cpse	r24, r1
    35d6:	ca c0       	rjmp	.+404    	; 0x376c <f_rename+0x204>
    35d8:	61 96       	adiw	r28, 0x11	; 17
    35da:	8f ad       	ldd	r24, Y+63	; 0x3f
    35dc:	61 97       	sbiw	r28, 0x11	; 17
    35de:	80 7a       	andi	r24, 0xA0	; 160
    35e0:	09 f0       	breq	.+2      	; 0x35e4 <f_rename+0x7c>
    35e2:	a2 c0       	rjmp	.+324    	; 0x3728 <f_rename+0x1c0>
    35e4:	25 96       	adiw	r28, 0x05	; 5
    35e6:	6e ad       	ldd	r22, Y+62	; 0x3e
    35e8:	7f ad       	ldd	r23, Y+63	; 0x3f
    35ea:	25 97       	sbiw	r28, 0x05	; 5
    35ec:	40 e2       	ldi	r20, 0x20	; 32
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	ce 01       	movw	r24, r28
    35f2:	8f 5a       	subi	r24, 0xAF	; 175
    35f4:	9f 4f       	sbci	r25, 0xFF	; 255
    35f6:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
    35fa:	48 e2       	ldi	r20, 0x28	; 40
    35fc:	50 e0       	ldi	r21, 0x00	; 0
    35fe:	be 01       	movw	r22, r28
    3600:	67 5d       	subi	r22, 0xD7	; 215
    3602:	7f 4f       	sbci	r23, 0xFF	; 255
    3604:	ce 01       	movw	r24, r28
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    360c:	e7 96       	adiw	r28, 0x37	; 55
    360e:	6e ad       	ldd	r22, Y+62	; 0x3e
    3610:	7f ad       	ldd	r23, Y+63	; 0x3f
    3612:	e7 97       	sbiw	r28, 0x37	; 55
    3614:	ce 01       	movw	r24, r28
    3616:	01 96       	adiw	r24, 0x01	; 1
    3618:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    361c:	81 11       	cpse	r24, r1
    361e:	1d c0       	rjmp	.+58     	; 0x365a <f_rename+0xf2>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    3620:	4f 81       	ldd	r20, Y+7	; 0x07
    3622:	58 85       	ldd	r21, Y+8	; 0x08
    3624:	69 85       	ldd	r22, Y+9	; 0x09
    3626:	7a 85       	ldd	r23, Y+10	; 0x0a
    3628:	8f a5       	ldd	r24, Y+47	; 0x2f
    362a:	98 a9       	ldd	r25, Y+48	; 0x30
    362c:	a9 a9       	ldd	r26, Y+49	; 0x31
    362e:	ba a9       	ldd	r27, Y+50	; 0x32
    3630:	48 17       	cp	r20, r24
    3632:	59 07       	cpc	r21, r25
    3634:	6a 07       	cpc	r22, r26
    3636:	7b 07       	cpc	r23, r27
    3638:	09 f0       	breq	.+2      	; 0x363c <f_rename+0xd4>
    363a:	95 c0       	rjmp	.+298    	; 0x3766 <f_rename+0x1fe>
    363c:	4f 85       	ldd	r20, Y+15	; 0x0f
    363e:	58 89       	ldd	r21, Y+16	; 0x10
    3640:	69 89       	ldd	r22, Y+17	; 0x11
    3642:	7a 89       	ldd	r23, Y+18	; 0x12
    3644:	8f a9       	ldd	r24, Y+55	; 0x37
    3646:	98 ad       	ldd	r25, Y+56	; 0x38
    3648:	a9 ad       	ldd	r26, Y+57	; 0x39
    364a:	ba ad       	ldd	r27, Y+58	; 0x3a
    364c:	48 17       	cp	r20, r24
    364e:	59 07       	cpc	r21, r25
    3650:	6a 07       	cpc	r22, r26
    3652:	7b 07       	cpc	r23, r27
    3654:	09 f0       	breq	.+2      	; 0x3658 <f_rename+0xf0>
    3656:	87 c0       	rjmp	.+270    	; 0x3766 <f_rename+0x1fe>
    3658:	03 c0       	rjmp	.+6      	; 0x3660 <f_rename+0xf8>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    365a:	84 30       	cpi	r24, 0x04	; 4
    365c:	09 f0       	breq	.+2      	; 0x3660 <f_rename+0xf8>
    365e:	86 c0       	rjmp	.+268    	; 0x376c <f_rename+0x204>
					res = dir_register(&djn);			/* Register the new entry */
    3660:	ce 01       	movw	r24, r28
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <dir_register>
					if (res == FR_OK) {
    3668:	81 11       	cpse	r24, r1
    366a:	80 c0       	rjmp	.+256    	; 0x376c <f_rename+0x204>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    366c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    366e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3670:	61 e5       	ldi	r22, 0x51	; 81
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	6c 0f       	add	r22, r28
    3676:	7d 1f       	adc	r23, r29
    3678:	63 5f       	subi	r22, 0xF3	; 243
    367a:	7f 4f       	sbci	r23, 0xFF	; 255
    367c:	43 e1       	ldi	r20, 0x13	; 19
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	c8 01       	movw	r24, r16
    3682:	0d 96       	adiw	r24, 0x0d	; 13
    3684:	0e 94 32 04 	call	0x864	; 0x864 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    3688:	6d 96       	adiw	r28, 0x1d	; 29
    368a:	8f ad       	ldd	r24, Y+63	; 0x3f
    368c:	6d 97       	sbiw	r28, 0x1d	; 29
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    368e:	84 ff       	sbrs	r24, 4
    3690:	80 62       	ori	r24, 0x20	; 32
    3692:	f8 01       	movw	r30, r16
    3694:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    3696:	e3 96       	adiw	r28, 0x33	; 51
    3698:	ee ac       	ldd	r14, Y+62	; 0x3e
    369a:	ff ac       	ldd	r15, Y+63	; 0x3f
    369c:	e3 97       	sbiw	r28, 0x33	; 51
    369e:	dd 24       	eor	r13, r13
    36a0:	d3 94       	inc	r13
    36a2:	f7 01       	movw	r30, r14
    36a4:	d3 82       	std	Z+3, r13	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    36a6:	f8 01       	movw	r30, r16
    36a8:	83 85       	ldd	r24, Z+11	; 0x0b
    36aa:	84 ff       	sbrs	r24, 4
    36ac:	3f c0       	rjmp	.+126    	; 0x372c <f_rename+0x1c4>
    36ae:	4f a5       	ldd	r20, Y+47	; 0x2f
    36b0:	58 a9       	ldd	r21, Y+48	; 0x30
    36b2:	69 a9       	ldd	r22, Y+49	; 0x31
    36b4:	7a a9       	ldd	r23, Y+50	; 0x32
    36b6:	8f 81       	ldd	r24, Y+7	; 0x07
    36b8:	98 85       	ldd	r25, Y+8	; 0x08
    36ba:	a9 85       	ldd	r26, Y+9	; 0x09
    36bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    36be:	48 17       	cp	r20, r24
    36c0:	59 07       	cpc	r21, r25
    36c2:	6a 07       	cpc	r22, r26
    36c4:	7b 07       	cpc	r23, r27
    36c6:	91 f1       	breq	.+100    	; 0x372c <f_rename+0x1c4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    36c8:	b8 01       	movw	r22, r16
    36ca:	f7 01       	movw	r30, r14
    36cc:	80 81       	ld	r24, Z
    36ce:	0e 94 3d 04 	call	0x87a	; 0x87a <ld_clust.isra.3>
    36d2:	ab 01       	movw	r20, r22
    36d4:	bc 01       	movw	r22, r24
    36d6:	c7 01       	movw	r24, r14
    36d8:	0e 94 b9 03 	call	0x772	; 0x772 <clst2sect>
    36dc:	ab 01       	movw	r20, r22
    36de:	bc 01       	movw	r22, r24
							if (sect == 0) {
    36e0:	41 15       	cp	r20, r1
    36e2:	51 05       	cpc	r21, r1
    36e4:	61 05       	cpc	r22, r1
    36e6:	71 05       	cpc	r23, r1
    36e8:	09 f4       	brne	.+2      	; 0x36ec <f_rename+0x184>
    36ea:	3f c0       	rjmp	.+126    	; 0x376a <f_rename+0x202>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    36ec:	c7 01       	movw	r24, r14
    36ee:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    36f2:	81 11       	cpse	r24, r1
    36f4:	3b c0       	rjmp	.+118    	; 0x376c <f_rename+0x204>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    36f6:	e3 96       	adiw	r28, 0x33	; 51
    36f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    36fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    36fc:	e3 97       	sbiw	r28, 0x33	; 51
								if (res == FR_OK && dir[1] == '.') {
    36fe:	fc 01       	movw	r30, r24
    3700:	e0 5b       	subi	r30, 0xB0	; 176
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	20 81       	ld	r18, Z
    3706:	2e 32       	cpi	r18, 0x2E	; 46
    3708:	89 f4       	brne	.+34     	; 0x372c <f_rename+0x1c4>
									st_clust(fs, dir, djn.obj.sclust);
    370a:	2f 81       	ldd	r18, Y+7	; 0x07
    370c:	38 85       	ldd	r19, Y+8	; 0x08
    370e:	49 85       	ldd	r20, Y+9	; 0x09
    3710:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    3712:	bc 01       	movw	r22, r24
    3714:	61 5b       	subi	r22, 0xB1	; 177
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    3718:	0e 94 52 04 	call	0x8a4	; 0x8a4 <st_clust.isra.4>
									fs->wflag = 1;
    371c:	e3 96       	adiw	r28, 0x33	; 51
    371e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3720:	ff ad       	ldd	r31, Y+63	; 0x3f
    3722:	e3 97       	sbiw	r28, 0x33	; 51
    3724:	d3 82       	std	Z+3, r13	; 0x03
    3726:	02 c0       	rjmp	.+4      	; 0x372c <f_rename+0x1c4>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    3728:	86 e0       	ldi	r24, 0x06	; 6
    372a:	20 c0       	rjmp	.+64     	; 0x376c <f_rename+0x204>
static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    372c:	09 a5       	ldd	r16, Y+41	; 0x29
    372e:	1a a5       	ldd	r17, Y+42	; 0x2a
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    3730:	23 96       	adiw	r28, 0x03	; 3
    3732:	4c ad       	ldd	r20, Y+60	; 0x3c
    3734:	5d ad       	ldd	r21, Y+61	; 0x3d
    3736:	6e ad       	ldd	r22, Y+62	; 0x3e
    3738:	7f ad       	ldd	r23, Y+63	; 0x3f
    373a:	23 97       	sbiw	r28, 0x03	; 3
    373c:	c8 01       	movw	r24, r16
    373e:	0e 94 34 05 	call	0xa68	; 0xa68 <move_window>
	if (res == FR_OK) {
    3742:	81 11       	cpse	r24, r1
    3744:	13 c0       	rjmp	.+38     	; 0x376c <f_rename+0x204>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
    3746:	25 96       	adiw	r28, 0x05	; 5
    3748:	ee ad       	ldd	r30, Y+62	; 0x3e
    374a:	ff ad       	ldd	r31, Y+63	; 0x3f
    374c:	25 97       	sbiw	r28, 0x05	; 5
    374e:	85 ee       	ldi	r24, 0xE5	; 229
    3750:	80 83       	st	Z, r24
		fs->wflag = 1;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	f8 01       	movw	r30, r16
    3756:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
    3758:	e3 96       	adiw	r28, 0x33	; 51
    375a:	8e ad       	ldd	r24, Y+62	; 0x3e
    375c:	9f ad       	ldd	r25, Y+63	; 0x3f
    375e:	e3 97       	sbiw	r28, 0x33	; 51
    3760:	0e 94 57 0f 	call	0x1eae	; 0x1eae <sync_fs>
    3764:	03 c0       	rjmp	.+6      	; 0x376c <f_rename+0x204>
    3766:	88 e0       	ldi	r24, 0x08	; 8
    3768:	01 c0       	rjmp	.+2      	; 0x376c <f_rename+0x204>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    376a:	82 e0       	ldi	r24, 0x02	; 2
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    376c:	ca 58       	subi	r28, 0x8A	; 138
    376e:	df 4f       	sbci	r29, 0xFF	; 255
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	ff 90       	pop	r15
    3784:	ef 90       	pop	r14
    3786:	df 90       	pop	r13
    3788:	08 95       	ret

0000378a <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;
    378a:	1d b8       	out	0x0d, r1	; 13
	DDRB &=~((1<<SS)|(1<<MOSI)|(1<<SCK));
    378c:	87 b3       	in	r24, 0x17	; 23
    378e:	8f 74       	andi	r24, 0x4F	; 79
    3790:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<SS);
    3792:	c4 98       	cbi	0x18, 4	; 24
    3794:	08 95       	ret

00003796 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    3796:	8f b9       	out	0x0f, r24	; 15
	 while(! (SPSR & (1<<SPIF))); //SPIF=1 transmisja zakonczona
    3798:	77 9b       	sbis	0x0e, 7	; 14
    379a:	fe cf       	rjmp	.-4      	; 0x3798 <xchg_spi+0x2>
	return SPDR;
    379c:	8f b1       	in	r24, 0x0f	; 15
}
    379e:	08 95       	ret

000037a0 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    37a0:	c4 9a       	sbi	0x18, 4	; 24
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    37a2:	8f ef       	ldi	r24, 0xFF	; 255
    37a4:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <xchg_spi>

000037a8 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	8c 01       	movw	r16, r24
    37b2:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    37b4:	84 e1       	ldi	r24, 0x14	; 20
    37b6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    37ba:	8f ef       	ldi	r24, 0xFF	; 255
    37bc:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    37c0:	8f 3f       	cpi	r24, 0xFF	; 255
    37c2:	29 f4       	brne	.+10     	; 0x37ce <rcvr_datablock+0x26>
    37c4:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Timer1>
    37c8:	81 11       	cpse	r24, r1
    37ca:	f7 cf       	rjmp	.-18     	; 0x37ba <rcvr_datablock+0x12>
    37cc:	1b c0       	rjmp	.+54     	; 0x3804 <rcvr_datablock+0x5c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    37ce:	8e 3f       	cpi	r24, 0xFE	; 254
    37d0:	c9 f4       	brne	.+50     	; 0x3804 <rcvr_datablock+0x5c>
    37d2:	f8 01       	movw	r30, r16
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF;  while(! (SPSR & (1<<SPIF))); *p++ = SPDR;
    37d4:	8f ef       	ldi	r24, 0xFF	; 255
    37d6:	8f b9       	out	0x0f, r24	; 15
    37d8:	77 9b       	sbis	0x0e, 7	; 14
    37da:	fe cf       	rjmp	.-4      	; 0x37d8 <rcvr_datablock+0x30>
    37dc:	9f b1       	in	r25, 0x0f	; 15
    37de:	90 83       	st	Z, r25
		SPDR = 0xFF;  while(! (SPSR & (1<<SPIF))); *p++ = SPDR;
    37e0:	8f b9       	out	0x0f, r24	; 15
    37e2:	77 9b       	sbis	0x0e, 7	; 14
    37e4:	fe cf       	rjmp	.-4      	; 0x37e2 <rcvr_datablock+0x3a>
    37e6:	9f b1       	in	r25, 0x0f	; 15
    37e8:	91 83       	std	Z+1, r25	; 0x01
	} while (cnt -= 2);
    37ea:	22 97       	sbiw	r28, 0x02	; 2
    37ec:	32 96       	adiw	r30, 0x02	; 2
    37ee:	20 97       	sbiw	r28, 0x00	; 0
    37f0:	91 f7       	brne	.-28     	; 0x37d6 <rcvr_datablock+0x2e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    37f2:	8f ef       	ldi	r24, 0xFF	; 255
    37f4:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	xchg_spi(0xFF);
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <rcvr_datablock+0x60>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    3808:	df 91       	pop	r29
    380a:	cf 91       	pop	r28
    380c:	1f 91       	pop	r17
    380e:	0f 91       	pop	r16
    3810:	08 95       	ret

00003812 <wait_ready.constprop.2>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    3812:	82 e3       	ldi	r24, 0x32	; 50
    3814:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Timer2>
	do
		d = xchg_spi(0xFF);
    3818:	8f ef       	ldi	r24, 0xFF	; 255
    381a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    381e:	28 2f       	mov	r18, r24
	while (d != 0xFF && Timer2);
    3820:	8f 3f       	cpi	r24, 0xFF	; 255
    3822:	21 f0       	breq	.+8      	; 0x382c <wait_ready.constprop.2+0x1a>
    3824:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Timer2>
    3828:	81 11       	cpse	r24, r1
    382a:	f6 cf       	rjmp	.-20     	; 0x3818 <wait_ready.constprop.2+0x6>

	return (d == 0xFF) ? 1 : 0;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	2f 3f       	cpi	r18, 0xFF	; 255
    3832:	11 f0       	breq	.+4      	; 0x3838 <wait_ready.constprop.2+0x26>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e0       	ldi	r25, 0x00	; 0
}
    3838:	08 95       	ret

0000383a <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
	CS_LOW();		/* Set CS# low */
    383e:	c4 98       	cbi	0x18, 4	; 24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    3840:	8f ef       	ldi	r24, 0xFF	; 255
    3842:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    3846:	0e 94 09 1c 	call	0x3812	; 0x3812 <wait_ready.constprop.2>
    384a:	ec 01       	movw	r28, r24
    384c:	89 2b       	or	r24, r25
    384e:	19 f4       	brne	.+6      	; 0x3856 <select+0x1c>

	deselect();
    3850:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <deselect>
	return 0;	/* Timeout */
    3854:	02 c0       	rjmp	.+4      	; 0x385a <select+0x20>
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    3856:	c1 e0       	ldi	r28, 0x01	; 1
    3858:	d0 e0       	ldi	r29, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    385a:	ce 01       	movw	r24, r28
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	08 95       	ret

00003862 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    3862:	ff 92       	push	r15
    3864:	0f 93       	push	r16
    3866:	1f 93       	push	r17
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	c8 2f       	mov	r28, r24
    386e:	d4 2f       	mov	r29, r20
    3870:	15 2f       	mov	r17, r21
    3872:	06 2f       	mov	r16, r22
    3874:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3876:	87 ff       	sbrs	r24, 7
    3878:	09 c0       	rjmp	.+18     	; 0x388c <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    387a:	40 e0       	ldi	r20, 0x00	; 0
    387c:	50 e0       	ldi	r21, 0x00	; 0
    387e:	ba 01       	movw	r22, r20
    3880:	87 e3       	ldi	r24, 0x37	; 55
    3882:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
		if (res > 1) return res;
    3886:	82 30       	cpi	r24, 0x02	; 2
    3888:	a8 f5       	brcc	.+106    	; 0x38f4 <send_cmd+0x92>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    388a:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    388c:	cc 30       	cpi	r28, 0x0C	; 12
    388e:	99 f4       	brne	.+38     	; 0x38b6 <send_cmd+0x54>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    3890:	8c 2f       	mov	r24, r28
    3892:	80 64       	ori	r24, 0x40	; 64
    3894:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    3898:	8f 2d       	mov	r24, r15
    389a:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    389e:	80 2f       	mov	r24, r16
    38a0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    38a4:	81 2f       	mov	r24, r17
    38a6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    38aa:	8d 2f       	mov	r24, r29
    38ac:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    38b0:	cc 23       	and	r28, r28
    38b2:	f1 f0       	breq	.+60     	; 0x38f0 <send_cmd+0x8e>
    38b4:	08 c0       	rjmp	.+16     	; 0x38c6 <send_cmd+0x64>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    38b6:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <deselect>
		if (!select()) return 0xFF;
    38ba:	0e 94 1d 1c 	call	0x383a	; 0x383a <select>
    38be:	89 2b       	or	r24, r25
    38c0:	39 f7       	brne	.-50     	; 0x3890 <send_cmd+0x2e>
    38c2:	8f ef       	ldi	r24, 0xFF	; 255
    38c4:	17 c0       	rjmp	.+46     	; 0x38f4 <send_cmd+0x92>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    38c6:	c8 30       	cpi	r28, 0x08	; 8
    38c8:	11 f4       	brne	.+4      	; 0x38ce <send_cmd+0x6c>
    38ca:	87 e8       	ldi	r24, 0x87	; 135
    38cc:	01 c0       	rjmp	.+2      	; 0x38d0 <send_cmd+0x6e>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    38ce:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    38d0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    38d4:	cc 30       	cpi	r28, 0x0C	; 12
    38d6:	19 f4       	brne	.+6      	; 0x38de <send_cmd+0x7c>
    38d8:	8f ef       	ldi	r24, 0xFF	; 255
    38da:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    38de:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    38e0:	8f ef       	ldi	r24, 0xFF	; 255
    38e2:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	while ((res & 0x80) && --n);
    38e6:	87 ff       	sbrs	r24, 7
    38e8:	05 c0       	rjmp	.+10     	; 0x38f4 <send_cmd+0x92>
    38ea:	c1 50       	subi	r28, 0x01	; 1
    38ec:	c9 f7       	brne	.-14     	; 0x38e0 <send_cmd+0x7e>
    38ee:	02 c0       	rjmp	.+4      	; 0x38f4 <send_cmd+0x92>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    38f0:	85 e9       	ldi	r24, 0x95	; 149
    38f2:	f3 cf       	rjmp	.-26     	; 0x38da <send_cmd+0x78>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    38f4:	df 91       	pop	r29
    38f6:	cf 91       	pop	r28
    38f8:	1f 91       	pop	r17
    38fa:	0f 91       	pop	r16
    38fc:	ff 90       	pop	r15
    38fe:	08 95       	ret

00003900 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3900:	1f 93       	push	r17
    3902:	cf 93       	push	r28
    3904:	df 93       	push	r29
    3906:	18 2f       	mov	r17, r24
    3908:	d9 2f       	mov	r29, r25
    390a:	c6 2f       	mov	r28, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;
    390c:	0e 94 09 1c 	call	0x3812	; 0x3812 <wait_ready.constprop.2>
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	49 f1       	breq	.+82     	; 0x3966 <xmit_datablock+0x66>

	xchg_spi(token);					/* Xmit data token */
    3914:	8c 2f       	mov	r24, r28
    3916:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    391a:	cd 3f       	cpi	r28, 0xFD	; 253
    391c:	11 f1       	breq	.+68     	; 0x3962 <xmit_datablock+0x62>
    391e:	e1 2f       	mov	r30, r17
    3920:	fd 2f       	mov	r31, r29
    3922:	cf 01       	movw	r24, r30
    3924:	9e 5f       	subi	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++;  while(! (SPSR & (1<<SPIF)));
    3926:	20 81       	ld	r18, Z
    3928:	2f b9       	out	0x0f, r18	; 15
    392a:	77 9b       	sbis	0x0e, 7	; 14
    392c:	fe cf       	rjmp	.-4      	; 0x392a <xmit_datablock+0x2a>
		SPDR = *p++;  while(! (SPSR & (1<<SPIF)));
    392e:	21 81       	ldd	r18, Z+1	; 0x01
    3930:	2f b9       	out	0x0f, r18	; 15
    3932:	77 9b       	sbis	0x0e, 7	; 14
    3934:	fe cf       	rjmp	.-4      	; 0x3932 <xmit_datablock+0x32>
    3936:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    3938:	e8 17       	cp	r30, r24
    393a:	f9 07       	cpc	r31, r25
    393c:	a1 f7       	brne	.-24     	; 0x3926 <xmit_datablock+0x26>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    393e:	8f ef       	ldi	r24, 0xFF	; 255
    3940:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
		xchg_spi(0xFF);
    3944:	8f ef       	ldi	r24, 0xFF	; 255
    3946:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    394a:	8f ef       	ldi	r24, 0xFF	; 255
    394c:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    3950:	8f 71       	andi	r24, 0x1F	; 31
    3952:	31 e0       	ldi	r19, 0x01	; 1
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	85 30       	cpi	r24, 0x05	; 5
    3958:	09 f0       	breq	.+2      	; 0x395c <xmit_datablock+0x5c>
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	83 2f       	mov	r24, r19
    395e:	92 2f       	mov	r25, r18
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <xmit_datablock+0x66>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
}
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	1f 91       	pop	r17
    396c:	08 95       	ret

0000396e <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    396e:	cf 92       	push	r12
    3970:	df 92       	push	r13
    3972:	ef 92       	push	r14
    3974:	ff 92       	push	r15
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	00 d0       	rcall	.+0      	; 0x3980 <disk_initialize+0x12>
    3980:	00 d0       	rcall	.+0      	; 0x3982 <disk_initialize+0x14>
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    3986:	81 11       	cpse	r24, r1
    3988:	b6 c0       	rjmp	.+364    	; 0x3af6 <disk_initialize+0x188>
	power_off();						/* Turn off the socket power to reset the card */
    398a:	0e 94 c5 1b 	call	0x378a	; 0x378a <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    398e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3992:	81 fd       	sbrc	r24, 1
    3994:	ad c0       	rjmp	.+346    	; 0x3af0 <disk_initialize+0x182>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
  DDRB|=(1<<SS)|(1<<MOSI)|(1<<SCK);
    3996:	87 b3       	in	r24, 0x17	; 23
    3998:	80 6b       	ori	r24, 0xB0	; 176
    399a:	87 bb       	out	0x17, r24	; 23
  PORTB|=(1<<SS);
    399c:	c4 9a       	sbi	0x18, 4	; 24
  DDRB&=~(MISO);	
    399e:	87 b3       	in	r24, 0x17	; 23
    39a0:	89 7f       	andi	r24, 0xF9	; 249
    39a2:	87 bb       	out	0x17, r24	; 23
  SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
    39a4:	81 e5       	ldi	r24, 0x51	; 81
    39a6:	8d b9       	out	0x0d, r24	; 13
  
	/* Start 100Hz system timer (TC2.OC) */
	OCR2 = F_CPU / 1024 / 100 - 1;
    39a8:	8b e9       	ldi	r24, 0x9B	; 155
    39aa:	83 bd       	out	0x23, r24	; 35
	
	TCCR2 = (1<<WGM21)|(1<<CS22)|(1<<CS21)|(1<<CS20);
    39ac:	8f e0       	ldi	r24, 0x0F	; 15
    39ae:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);
    39b0:	89 b7       	in	r24, 0x39	; 57
    39b2:	80 68       	ori	r24, 0x80	; 128
    39b4:	89 bf       	out	0x39, r24	; 57

	sei();
    39b6:	78 94       	sei

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    39b8:	82 e5       	ldi	r24, 0x52	; 82
    39ba:	8d b9       	out	0x0d, r24	; 13
    39bc:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    39be:	8f ef       	ldi	r24, 0xFF	; 255
    39c0:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    39c4:	11 50       	subi	r17, 0x01	; 1
    39c6:	d9 f7       	brne	.-10     	; 0x39be <disk_initialize+0x50>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    39c8:	40 e0       	ldi	r20, 0x00	; 0
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	ba 01       	movw	r22, r20
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	09 f0       	breq	.+2      	; 0x39da <disk_initialize+0x6c>
    39d8:	78 c0       	rjmp	.+240    	; 0x3aca <disk_initialize+0x15c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    39da:	84 e6       	ldi	r24, 0x64	; 100
    39dc:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    39e0:	4a ea       	ldi	r20, 0xAA	; 170
    39e2:	51 e0       	ldi	r21, 0x01	; 1
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	88 e0       	ldi	r24, 0x08	; 8
    39ea:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	09 f0       	breq	.+2      	; 0x39f4 <disk_initialize+0x86>
    39f2:	43 c0       	rjmp	.+134    	; 0x3a7a <disk_initialize+0x10c>
    39f4:	8e 01       	movw	r16, r28
    39f6:	0f 5f       	subi	r16, 0xFF	; 255
    39f8:	1f 4f       	sbci	r17, 0xFF	; 255
    39fa:	6e 01       	movw	r12, r28
    39fc:	85 e0       	ldi	r24, 0x05	; 5
    39fe:	c8 0e       	add	r12, r24
    3a00:	d1 1c       	adc	r13, r1
    3a02:	78 01       	movw	r14, r16
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    3a04:	8f ef       	ldi	r24, 0xFF	; 255
    3a06:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    3a0a:	f7 01       	movw	r30, r14
    3a0c:	81 93       	st	Z+, r24
    3a0e:	7f 01       	movw	r14, r30
    3a10:	ce 16       	cp	r12, r30
    3a12:	df 06       	cpc	r13, r31
    3a14:	b9 f7       	brne	.-18     	; 0x3a04 <disk_initialize+0x96>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	81 30       	cpi	r24, 0x01	; 1
    3a1a:	09 f0       	breq	.+2      	; 0x3a1e <disk_initialize+0xb0>
    3a1c:	56 c0       	rjmp	.+172    	; 0x3aca <disk_initialize+0x15c>
    3a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a20:	8a 3a       	cpi	r24, 0xAA	; 170
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <disk_initialize+0xb8>
    3a24:	52 c0       	rjmp	.+164    	; 0x3aca <disk_initialize+0x15c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3a26:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Timer1>
    3a2a:	81 11       	cpse	r24, r1
    3a2c:	06 c0       	rjmp	.+12     	; 0x3a3a <disk_initialize+0xcc>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    3a2e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Timer1>
    3a32:	88 23       	and	r24, r24
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <disk_initialize+0xca>
    3a36:	49 c0       	rjmp	.+146    	; 0x3aca <disk_initialize+0x15c>
    3a38:	0a c0       	rjmp	.+20     	; 0x3a4e <disk_initialize+0xe0>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	50 e0       	ldi	r21, 0x00	; 0
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	70 e4       	ldi	r23, 0x40	; 64
    3a42:	89 ea       	ldi	r24, 0xA9	; 169
    3a44:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3a48:	81 11       	cpse	r24, r1
    3a4a:	ed cf       	rjmp	.-38     	; 0x3a26 <disk_initialize+0xb8>
    3a4c:	f0 cf       	rjmp	.-32     	; 0x3a2e <disk_initialize+0xc0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	ba 01       	movw	r22, r20
    3a54:	8a e3       	ldi	r24, 0x3A	; 58
    3a56:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3a5a:	81 11       	cpse	r24, r1
    3a5c:	36 c0       	rjmp	.+108    	; 0x3aca <disk_initialize+0x15c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    3a5e:	8f ef       	ldi	r24, 0xFF	; 255
    3a60:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    3a64:	f8 01       	movw	r30, r16
    3a66:	81 93       	st	Z+, r24
    3a68:	8f 01       	movw	r16, r30
    3a6a:	ce 16       	cp	r12, r30
    3a6c:	df 06       	cpc	r13, r31
    3a6e:	b9 f7       	brne	.-18     	; 0x3a5e <disk_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	86 fd       	sbrc	r24, 6
    3a74:	2c c0       	rjmp	.+88     	; 0x3ace <disk_initialize+0x160>
    3a76:	14 e0       	ldi	r17, 0x04	; 4
    3a78:	2b c0       	rjmp	.+86     	; 0x3ad0 <disk_initialize+0x162>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3a7a:	40 e0       	ldi	r20, 0x00	; 0
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	ba 01       	movw	r22, r20
    3a80:	89 ea       	ldi	r24, 0xA9	; 169
    3a82:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3a86:	82 30       	cpi	r24, 0x02	; 2
    3a88:	18 f0       	brcs	.+6      	; 0x3a90 <disk_initialize+0x122>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3a8a:	11 e0       	ldi	r17, 0x01	; 1
    3a8c:	01 e0       	ldi	r16, 0x01	; 1
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <disk_initialize+0x126>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3a90:	12 e0       	ldi	r17, 0x02	; 2
    3a92:	09 ea       	ldi	r16, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3a94:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Timer1>
    3a98:	81 11       	cpse	r24, r1
    3a9a:	05 c0       	rjmp	.+10     	; 0x3aa6 <disk_initialize+0x138>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3a9c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Timer1>
    3aa0:	88 23       	and	r24, r24
    3aa2:	99 f0       	breq	.+38     	; 0x3aca <disk_initialize+0x15c>
    3aa4:	09 c0       	rjmp	.+18     	; 0x3ab8 <disk_initialize+0x14a>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	ba 01       	movw	r22, r20
    3aac:	80 2f       	mov	r24, r16
    3aae:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3ab2:	81 11       	cpse	r24, r1
    3ab4:	ef cf       	rjmp	.-34     	; 0x3a94 <disk_initialize+0x126>
    3ab6:	f2 cf       	rjmp	.-28     	; 0x3a9c <disk_initialize+0x12e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	52 e0       	ldi	r21, 0x02	; 2
    3abc:	60 e0       	ldi	r22, 0x00	; 0
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	80 e1       	ldi	r24, 0x10	; 16
    3ac2:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3ac6:	88 23       	and	r24, r24
    3ac8:	19 f0       	breq	.+6      	; 0x3ad0 <disk_initialize+0x162>
				ty = 0;
    3aca:	10 e0       	ldi	r17, 0x00	; 0
    3acc:	01 c0       	rjmp	.+2      	; 0x3ad0 <disk_initialize+0x162>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3ace:	1c e0       	ldi	r17, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    3ad0:	10 93 e4 01 	sts	0x01E4, r17	; 0x8001e4 <CardType>
	deselect();
    3ad4:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <deselect>

	if (ty) {			/* Initialization succeded */
    3ad8:	11 23       	and	r17, r17
    3ada:	41 f0       	breq	.+16     	; 0x3aec <disk_initialize+0x17e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3adc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3ae0:	8e 7f       	andi	r24, 0xFE	; 254
    3ae2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Stat>
		FCLK_FAST();
    3ae6:	80 e5       	ldi	r24, 0x50	; 80
    3ae8:	8d b9       	out	0x0d, r24	; 13
    3aea:	02 c0       	rjmp	.+4      	; 0x3af0 <disk_initialize+0x182>
	} else {			/* Initialization failed */
		power_off();
    3aec:	0e 94 c5 1b 	call	0x378a	; 0x378a <power_off>
	}

	return Stat;
    3af0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3af4:	01 c0       	rjmp	.+2      	; 0x3af8 <disk_initialize+0x18a>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    3af6:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	ff 90       	pop	r15
    3b0a:	ef 90       	pop	r14
    3b0c:	df 90       	pop	r13
    3b0e:	cf 90       	pop	r12
    3b10:	08 95       	ret

00003b12 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    3b12:	81 11       	cpse	r24, r1
    3b14:	03 c0       	rjmp	.+6      	; 0x3b1c <disk_status+0xa>
	return Stat;
    3b16:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3b1a:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    3b1e:	08 95       	ret

00003b20 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3b20:	ef 92       	push	r14
    3b22:	ff 92       	push	r15
    3b24:	0f 93       	push	r16
    3b26:	1f 93       	push	r17
    3b28:	cf 93       	push	r28
    3b2a:	7b 01       	movw	r14, r22
    3b2c:	ba 01       	movw	r22, r20
    3b2e:	a9 01       	movw	r20, r18
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    3b30:	81 11       	cpse	r24, r1
    3b32:	38 c0       	rjmp	.+112    	; 0x3ba4 <disk_read+0x84>
    3b34:	01 15       	cp	r16, r1
    3b36:	11 05       	cpc	r17, r1
    3b38:	a9 f1       	breq	.+106    	; 0x3ba4 <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3b3a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3b3e:	80 fd       	sbrc	r24, 0
    3b40:	33 c0       	rjmp	.+102    	; 0x3ba8 <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    3b42:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <CardType>
    3b46:	83 fd       	sbrc	r24, 3
    3b48:	07 c0       	rjmp	.+14     	; 0x3b58 <disk_read+0x38>
    3b4a:	89 e0       	ldi	r24, 0x09	; 9
    3b4c:	44 0f       	add	r20, r20
    3b4e:	55 1f       	adc	r21, r21
    3b50:	66 1f       	adc	r22, r22
    3b52:	77 1f       	adc	r23, r23
    3b54:	8a 95       	dec	r24
    3b56:	d1 f7       	brne	.-12     	; 0x3b4c <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3b58:	02 30       	cpi	r16, 0x02	; 2
    3b5a:	11 05       	cpc	r17, r1
    3b5c:	10 f4       	brcc	.+4      	; 0x3b62 <disk_read+0x42>
    3b5e:	c1 e1       	ldi	r28, 0x11	; 17
    3b60:	01 c0       	rjmp	.+2      	; 0x3b64 <disk_read+0x44>
    3b62:	c2 e1       	ldi	r28, 0x12	; 18
	if (send_cmd(cmd, sector) == 0) {
    3b64:	8c 2f       	mov	r24, r28
    3b66:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3b6a:	81 11       	cpse	r24, r1
    3b6c:	14 c0       	rjmp	.+40     	; 0x3b96 <disk_read+0x76>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	72 e0       	ldi	r23, 0x02	; 2
    3b72:	c7 01       	movw	r24, r14
    3b74:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <rcvr_datablock>
    3b78:	89 2b       	or	r24, r25
    3b7a:	29 f0       	breq	.+10     	; 0x3b86 <disk_read+0x66>
			buff += 512;
    3b7c:	8e ef       	ldi	r24, 0xFE	; 254
    3b7e:	f8 1a       	sub	r15, r24
		} while (--count);
    3b80:	01 50       	subi	r16, 0x01	; 1
    3b82:	11 09       	sbc	r17, r1
    3b84:	a1 f7       	brne	.-24     	; 0x3b6e <disk_read+0x4e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3b86:	c2 31       	cpi	r28, 0x12	; 18
    3b88:	31 f4       	brne	.+12     	; 0x3b96 <disk_read+0x76>
    3b8a:	40 e0       	ldi	r20, 0x00	; 0
    3b8c:	50 e0       	ldi	r21, 0x00	; 0
    3b8e:	ba 01       	movw	r22, r20
    3b90:	8c e0       	ldi	r24, 0x0C	; 12
    3b92:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
	}
	deselect();
    3b96:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <deselect>

	return count ? RES_ERROR : RES_OK;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	01 2b       	or	r16, r17
    3b9e:	29 f4       	brne	.+10     	; 0x3baa <disk_read+0x8a>
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	03 c0       	rjmp	.+6      	; 0x3baa <disk_read+0x8a>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    3ba4:	84 e0       	ldi	r24, 0x04	; 4
    3ba6:	01 c0       	rjmp	.+2      	; 0x3baa <disk_read+0x8a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3ba8:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	08 95       	ret

00003bb6 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3bb6:	cf 92       	push	r12
    3bb8:	df 92       	push	r13
    3bba:	ef 92       	push	r14
    3bbc:	ff 92       	push	r15
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	eb 01       	movw	r28, r22
    3bc8:	69 01       	movw	r12, r18
    3bca:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    3bcc:	81 11       	cpse	r24, r1
    3bce:	56 c0       	rjmp	.+172    	; 0x3c7c <disk_write+0xc6>
    3bd0:	01 15       	cp	r16, r1
    3bd2:	11 05       	cpc	r17, r1
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <disk_write+0x22>
    3bd6:	52 c0       	rjmp	.+164    	; 0x3c7c <disk_write+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3bd8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3bdc:	80 fd       	sbrc	r24, 0
    3bde:	50 c0       	rjmp	.+160    	; 0x3c80 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3be0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3be4:	82 fd       	sbrc	r24, 2
    3be6:	4e c0       	rjmp	.+156    	; 0x3c84 <disk_write+0xce>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    3be8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <CardType>
    3bec:	83 fd       	sbrc	r24, 3
    3bee:	07 c0       	rjmp	.+14     	; 0x3bfe <disk_write+0x48>
    3bf0:	99 e0       	ldi	r25, 0x09	; 9
    3bf2:	cc 0c       	add	r12, r12
    3bf4:	dd 1c       	adc	r13, r13
    3bf6:	ee 1c       	adc	r14, r14
    3bf8:	ff 1c       	adc	r15, r15
    3bfa:	9a 95       	dec	r25
    3bfc:	d1 f7       	brne	.-12     	; 0x3bf2 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    3bfe:	01 30       	cpi	r16, 0x01	; 1
    3c00:	11 05       	cpc	r17, r1
    3c02:	99 f4       	brne	.+38     	; 0x3c2a <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3c04:	b7 01       	movw	r22, r14
    3c06:	a6 01       	movw	r20, r12
    3c08:	88 e1       	ldi	r24, 0x18	; 24
    3c0a:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3c0e:	81 11       	cpse	r24, r1
    3c10:	2c c0       	rjmp	.+88     	; 0x3c6a <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    3c12:	6e ef       	ldi	r22, 0xFE	; 254
    3c14:	ce 01       	movw	r24, r28
    3c16:	0e 94 80 1c 	call	0x3900	; 0x3900 <xmit_datablock>
    3c1a:	31 e0       	ldi	r19, 0x01	; 1
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	89 2b       	or	r24, r25
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <disk_write+0x6e>
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	03 2f       	mov	r16, r19
    3c26:	12 2f       	mov	r17, r18
    3c28:	22 c0       	rjmp	.+68     	; 0x3c6e <disk_write+0xb8>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3c2a:	86 70       	andi	r24, 0x06	; 6
    3c2c:	31 f0       	breq	.+12     	; 0x3c3a <disk_write+0x84>
    3c2e:	a8 01       	movw	r20, r16
    3c30:	60 e0       	ldi	r22, 0x00	; 0
    3c32:	70 e0       	ldi	r23, 0x00	; 0
    3c34:	87 e9       	ldi	r24, 0x97	; 151
    3c36:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3c3a:	b7 01       	movw	r22, r14
    3c3c:	a6 01       	movw	r20, r12
    3c3e:	89 e1       	ldi	r24, 0x19	; 25
    3c40:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3c44:	81 11       	cpse	r24, r1
    3c46:	13 c0       	rjmp	.+38     	; 0x3c6e <disk_write+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3c48:	6c ef       	ldi	r22, 0xFC	; 252
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	0e 94 80 1c 	call	0x3900	; 0x3900 <xmit_datablock>
    3c50:	89 2b       	or	r24, r25
    3c52:	21 f0       	breq	.+8      	; 0x3c5c <disk_write+0xa6>
				buff += 512;
    3c54:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    3c56:	01 50       	subi	r16, 0x01	; 1
    3c58:	11 09       	sbc	r17, r1
    3c5a:	b1 f7       	brne	.-20     	; 0x3c48 <disk_write+0x92>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3c5c:	6d ef       	ldi	r22, 0xFD	; 253
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	0e 94 80 1c 	call	0x3900	; 0x3900 <xmit_datablock>
    3c66:	89 2b       	or	r24, r25
    3c68:	11 f4       	brne	.+4      	; 0x3c6e <disk_write+0xb8>
				count = 1;
    3c6a:	01 e0       	ldi	r16, 0x01	; 1
    3c6c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    3c6e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <deselect>

	return count ? RES_ERROR : RES_OK;
    3c72:	81 e0       	ldi	r24, 0x01	; 1
    3c74:	01 2b       	or	r16, r17
    3c76:	39 f4       	brne	.+14     	; 0x3c86 <disk_write+0xd0>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	05 c0       	rjmp	.+10     	; 0x3c86 <disk_write+0xd0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    3c7c:	84 e0       	ldi	r24, 0x04	; 4
    3c7e:	03 c0       	rjmp	.+6      	; 0x3c86 <disk_write+0xd0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3c80:	83 e0       	ldi	r24, 0x03	; 3
    3c82:	01 c0       	rjmp	.+2      	; 0x3c86 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3c84:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	df 90       	pop	r13
    3c94:	cf 90       	pop	r12
    3c96:	08 95       	ret

00003c98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	60 97       	sbiw	r28, 0x10	; 16
    3caa:	0f b6       	in	r0, 0x3f	; 63
    3cac:	f8 94       	cli
    3cae:	de bf       	out	0x3e, r29	; 62
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    3cb4:	81 11       	cpse	r24, r1
    3cb6:	34 c1       	rjmp	.+616    	; 0x3f20 <disk_ioctl+0x288>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3cb8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
    3cbc:	80 fd       	sbrc	r24, 0
    3cbe:	32 c1       	rjmp	.+612    	; 0x3f24 <disk_ioctl+0x28c>
    3cc0:	8a 01       	movw	r16, r20

	switch (cmd) {
    3cc2:	86 2f       	mov	r24, r22
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	8f 30       	cpi	r24, 0x0F	; 15
    3cc8:	91 05       	cpc	r25, r1
    3cca:	08 f0       	brcs	.+2      	; 0x3cce <disk_ioctl+0x36>
    3ccc:	24 c1       	rjmp	.+584    	; 0x3f16 <disk_ioctl+0x27e>
    3cce:	fc 01       	movw	r30, r24
    3cd0:	e6 5d       	subi	r30, 0xD6	; 214
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3cd8:	0e 94 1d 1c 	call	0x383a	; 0x383a <select>
    3cdc:	18 c1       	rjmp	.+560    	; 0x3f0e <disk_ioctl+0x276>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	ba 01       	movw	r22, r20
    3ce4:	89 e0       	ldi	r24, 0x09	; 9
    3ce6:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3cea:	88 23       	and	r24, r24
    3cec:	11 f0       	breq	.+4      	; 0x3cf2 <disk_ioctl+0x5a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    3cee:	11 e0       	ldi	r17, 0x01	; 1
    3cf0:	13 c1       	rjmp	.+550    	; 0x3f18 <disk_ioctl+0x280>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3cf2:	60 e1       	ldi	r22, 0x10	; 16
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	01 96       	adiw	r24, 0x01	; 1
    3cfa:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <rcvr_datablock>
    3cfe:	89 2b       	or	r24, r25
    3d00:	b1 f3       	breq	.-20     	; 0x3cee <disk_ioctl+0x56>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3d02:	99 81       	ldd	r25, Y+1	; 0x01
    3d04:	92 95       	swap	r25
    3d06:	96 95       	lsr	r25
    3d08:	96 95       	lsr	r25
    3d0a:	93 70       	andi	r25, 0x03	; 3
    3d0c:	29 85       	ldd	r18, Y+9	; 0x09
    3d0e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3d10:	88 85       	ldd	r24, Y+8	; 0x08
    3d12:	91 30       	cpi	r25, 0x01	; 1
    3d14:	d9 f4       	brne	.+54     	; 0x3d4c <disk_ioctl+0xb4>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	32 2f       	mov	r19, r18
    3d1a:	22 27       	eor	r18, r18
    3d1c:	24 0f       	add	r18, r20
    3d1e:	31 1d       	adc	r19, r1
    3d20:	8f 73       	andi	r24, 0x3F	; 63
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	a0 e0       	ldi	r26, 0x00	; 0
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	dc 01       	movw	r26, r24
    3d2a:	99 27       	eor	r25, r25
    3d2c:	88 27       	eor	r24, r24
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	a1 1d       	adc	r26, r1
    3d32:	b1 1d       	adc	r27, r1
    3d34:	82 0f       	add	r24, r18
    3d36:	93 1f       	adc	r25, r19
    3d38:	a1 1d       	adc	r26, r1
    3d3a:	b1 1d       	adc	r27, r1
    3d3c:	fa e0       	ldi	r31, 0x0A	; 10
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	aa 1f       	adc	r26, r26
    3d44:	bb 1f       	adc	r27, r27
    3d46:	fa 95       	dec	r31
    3d48:	d1 f7       	brne	.-12     	; 0x3d3e <disk_ioctl+0xa6>
    3d4a:	58 c0       	rjmp	.+176    	; 0x3dfc <disk_ioctl+0x164>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    3d4c:	22 95       	swap	r18
    3d4e:	26 95       	lsr	r18
    3d50:	26 95       	lsr	r18
    3d52:	23 70       	andi	r18, 0x03	; 3
    3d54:	f4 e0       	ldi	r31, 0x04	; 4
    3d56:	8f 9f       	mul	r24, r31
    3d58:	c0 01       	movw	r24, r0
    3d5a:	11 24       	eor	r1, r1
    3d5c:	82 0f       	add	r24, r18
    3d5e:	91 1d       	adc	r25, r1
    3d60:	01 96       	adiw	r24, 0x01	; 1
    3d62:	2f 81       	ldd	r18, Y+7	; 0x07
    3d64:	23 70       	andi	r18, 0x03	; 3
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	32 2f       	mov	r19, r18
    3d6a:	22 27       	eor	r18, r18
    3d6c:	33 0f       	add	r19, r19
    3d6e:	33 0f       	add	r19, r19
    3d70:	82 0f       	add	r24, r18
    3d72:	93 1f       	adc	r25, r19
    3d74:	a0 e0       	ldi	r26, 0x00	; 0
    3d76:	b0 e0       	ldi	r27, 0x00	; 0
    3d78:	2e 81       	ldd	r18, Y+6	; 0x06
    3d7a:	32 2f       	mov	r19, r18
    3d7c:	3f 70       	andi	r19, 0x0F	; 15
    3d7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d80:	22 1f       	adc	r18, r18
    3d82:	22 27       	eor	r18, r18
    3d84:	22 1f       	adc	r18, r18
    3d86:	23 0f       	add	r18, r19
    3d88:	43 70       	andi	r20, 0x03	; 3
    3d8a:	44 0f       	add	r20, r20
    3d8c:	42 0f       	add	r20, r18
    3d8e:	47 50       	subi	r20, 0x07	; 7
    3d90:	04 c0       	rjmp	.+8      	; 0x3d9a <disk_ioctl+0x102>
    3d92:	88 0f       	add	r24, r24
    3d94:	99 1f       	adc	r25, r25
    3d96:	aa 1f       	adc	r26, r26
    3d98:	bb 1f       	adc	r27, r27
    3d9a:	4a 95       	dec	r20
    3d9c:	d2 f7       	brpl	.-12     	; 0x3d92 <disk_ioctl+0xfa>
    3d9e:	2e c0       	rjmp	.+92     	; 0x3dfc <disk_ioctl+0x164>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    3da0:	f0 90 e4 01 	lds	r15, 0x01E4	; 0x8001e4 <CardType>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	50 e0       	ldi	r21, 0x00	; 0
    3da8:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    3daa:	f2 fe       	sbrs	r15, 2
    3dac:	2e c0       	rjmp	.+92     	; 0x3e0a <disk_ioctl+0x172>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3dae:	8d e8       	ldi	r24, 0x8D	; 141
    3db0:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3db4:	81 11       	cpse	r24, r1
    3db6:	9b cf       	rjmp	.-202    	; 0x3cee <disk_ioctl+0x56>
				xchg_spi(0xFF);
    3db8:	8f ef       	ldi	r24, 0xFF	; 255
    3dba:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    3dbe:	60 e1       	ldi	r22, 0x10	; 16
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	01 96       	adiw	r24, 0x01	; 1
    3dc6:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <rcvr_datablock>
    3dca:	89 2b       	or	r24, r25
    3dcc:	09 f4       	brne	.+2      	; 0x3dd0 <disk_ioctl+0x138>
    3dce:	8f cf       	rjmp	.-226    	; 0x3cee <disk_ioctl+0x56>
    3dd0:	50 e3       	ldi	r21, 0x30	; 48
    3dd2:	f5 2e       	mov	r15, r21
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    3dd4:	8f ef       	ldi	r24, 0xFF	; 255
    3dd6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    3dda:	fa 94       	dec	r15
    3ddc:	f1 10       	cpse	r15, r1
    3dde:	fa cf       	rjmp	.-12     	; 0x3dd4 <disk_ioctl+0x13c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3de0:	2b 85       	ldd	r18, Y+11	; 0x0b
    3de2:	22 95       	swap	r18
    3de4:	2f 70       	andi	r18, 0x0F	; 15
    3de6:	80 e1       	ldi	r24, 0x10	; 16
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	a0 e0       	ldi	r26, 0x00	; 0
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	04 c0       	rjmp	.+8      	; 0x3df8 <disk_ioctl+0x160>
    3df0:	88 0f       	add	r24, r24
    3df2:	99 1f       	adc	r25, r25
    3df4:	aa 1f       	adc	r26, r26
    3df6:	bb 1f       	adc	r27, r27
    3df8:	2a 95       	dec	r18
    3dfa:	d2 f7       	brpl	.-12     	; 0x3df0 <disk_ioctl+0x158>
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	80 83       	st	Z, r24
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	a2 83       	std	Z+2, r26	; 0x02
    3e04:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	87 c0       	rjmp	.+270    	; 0x3f18 <disk_ioctl+0x280>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3e0a:	89 e0       	ldi	r24, 0x09	; 9
    3e0c:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3e10:	81 11       	cpse	r24, r1
    3e12:	6d cf       	rjmp	.-294    	; 0x3cee <disk_ioctl+0x56>
    3e14:	60 e1       	ldi	r22, 0x10	; 16
    3e16:	70 e0       	ldi	r23, 0x00	; 0
    3e18:	ce 01       	movw	r24, r28
    3e1a:	01 96       	adiw	r24, 0x01	; 1
    3e1c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <rcvr_datablock>
    3e20:	89 2b       	or	r24, r25
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <disk_ioctl+0x18e>
    3e24:	64 cf       	rjmp	.-312    	; 0x3cee <disk_ioctl+0x56>
    3e26:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e28:	8c 85       	ldd	r24, Y+12	; 0x0c
				if (CardType & CT_SD1) {	/* SDv1 */
    3e2a:	f1 fe       	sbrs	r15, 1
    3e2c:	16 c0       	rjmp	.+44     	; 0x3e5a <disk_ioctl+0x1c2>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3e2e:	88 1f       	adc	r24, r24
    3e30:	88 27       	eor	r24, r24
    3e32:	88 1f       	adc	r24, r24
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	01 96       	adiw	r24, 0x01	; 1
    3e38:	2f 73       	andi	r18, 0x3F	; 63
    3e3a:	82 0f       	add	r24, r18
    3e3c:	91 1d       	adc	r25, r1
    3e3e:	82 0f       	add	r24, r18
    3e40:	91 1d       	adc	r25, r1
    3e42:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e44:	22 95       	swap	r18
    3e46:	26 95       	lsr	r18
    3e48:	26 95       	lsr	r18
    3e4a:	23 70       	andi	r18, 0x03	; 3
    3e4c:	21 50       	subi	r18, 0x01	; 1
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <disk_ioctl+0x1bc>
    3e50:	88 0f       	add	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	2a 95       	dec	r18
    3e56:	e2 f7       	brpl	.-8      	; 0x3e50 <disk_ioctl+0x1b8>
    3e58:	1c c0       	rjmp	.+56     	; 0x3e92 <disk_ioctl+0x1fa>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3e5a:	38 2f       	mov	r19, r24
    3e5c:	33 70       	andi	r19, 0x03	; 3
    3e5e:	82 95       	swap	r24
    3e60:	86 95       	lsr	r24
    3e62:	87 70       	andi	r24, 0x07	; 7
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	f8 e0       	ldi	r31, 0x08	; 8
    3e68:	3f 9f       	mul	r19, r31
    3e6a:	80 0d       	add	r24, r0
    3e6c:	91 1d       	adc	r25, r1
    3e6e:	11 24       	eor	r1, r1
    3e70:	01 96       	adiw	r24, 0x01	; 1
    3e72:	2c 77       	andi	r18, 0x7C	; 124
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	35 95       	asr	r19
    3e78:	27 95       	ror	r18
    3e7a:	35 95       	asr	r19
    3e7c:	27 95       	ror	r18
    3e7e:	2f 5f       	subi	r18, 0xFF	; 255
    3e80:	3f 4f       	sbci	r19, 0xFF	; 255
    3e82:	82 9f       	mul	r24, r18
    3e84:	a0 01       	movw	r20, r0
    3e86:	83 9f       	mul	r24, r19
    3e88:	50 0d       	add	r21, r0
    3e8a:	92 9f       	mul	r25, r18
    3e8c:	50 0d       	add	r21, r0
    3e8e:	11 24       	eor	r1, r1
    3e90:	ca 01       	movw	r24, r20
    3e92:	a0 e0       	ldi	r26, 0x00	; 0
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	b2 cf       	rjmp	.-156    	; 0x3dfc <disk_ioctl+0x164>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    3e98:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <CardType>
    3e9c:	fa 01       	movw	r30, r20
    3e9e:	80 83       	st	Z, r24
    3ea0:	b2 cf       	rjmp	.-156    	; 0x3e06 <disk_ioctl+0x16e>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	ba 01       	movw	r22, r20
    3ea8:	89 e0       	ldi	r24, 0x09	; 9
    3eaa:	04 c0       	rjmp	.+8      	; 0x3eb4 <disk_ioctl+0x21c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    3eac:	40 e0       	ldi	r20, 0x00	; 0
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	ba 01       	movw	r22, r20
    3eb2:	8a e0       	ldi	r24, 0x0A	; 10
    3eb4:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3eb8:	81 11       	cpse	r24, r1
    3eba:	19 cf       	rjmp	.-462    	; 0x3cee <disk_ioctl+0x56>
			&& rcvr_datablock(ptr, 16))
    3ebc:	60 e1       	ldi	r22, 0x10	; 16
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	23 c0       	rjmp	.+70     	; 0x3f08 <disk_ioctl+0x270>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	ba 01       	movw	r22, r20
    3ec8:	8a e3       	ldi	r24, 0x3A	; 58
    3eca:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3ece:	81 11       	cpse	r24, r1
    3ed0:	0e cf       	rjmp	.-484    	; 0x3cee <disk_ioctl+0x56>
    3ed2:	78 01       	movw	r14, r16
    3ed4:	f4 e0       	ldi	r31, 0x04	; 4
    3ed6:	ef 0e       	add	r14, r31
    3ed8:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    3eda:	8f ef       	ldi	r24, 0xFF	; 255
    3edc:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
    3ee0:	f8 01       	movw	r30, r16
    3ee2:	81 93       	st	Z+, r24
    3ee4:	8f 01       	movw	r16, r30
    3ee6:	ee 15       	cp	r30, r14
    3ee8:	ff 05       	cpc	r31, r15
    3eea:	b9 f7       	brne	.-18     	; 0x3eda <disk_ioctl+0x242>
    3eec:	8c cf       	rjmp	.-232    	; 0x3e06 <disk_ioctl+0x16e>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	ba 01       	movw	r22, r20
    3ef4:	8d e8       	ldi	r24, 0x8D	; 141
    3ef6:	0e 94 31 1c 	call	0x3862	; 0x3862 <send_cmd>
    3efa:	81 11       	cpse	r24, r1
    3efc:	f8 ce       	rjmp	.-528    	; 0x3cee <disk_ioctl+0x56>
			xchg_spi(0xFF);
    3efe:	8f ef       	ldi	r24, 0xFF	; 255
    3f00:	0e 94 cb 1b 	call	0x3796	; 0x3796 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    3f04:	60 e4       	ldi	r22, 0x40	; 64
    3f06:	70 e0       	ldi	r23, 0x00	; 0
    3f08:	c8 01       	movw	r24, r16
    3f0a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3f0e:	11 e0       	ldi	r17, 0x01	; 1
    3f10:	89 2b       	or	r24, r25
    3f12:	11 f0       	breq	.+4      	; 0x3f18 <disk_ioctl+0x280>
    3f14:	78 cf       	rjmp	.-272    	; 0x3e06 <disk_ioctl+0x16e>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;
*/
	default:
		res = RES_PARERR;
    3f16:	14 e0       	ldi	r17, 0x04	; 4
	}

	deselect();
    3f18:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <deselect>

	return res;
    3f1c:	81 2f       	mov	r24, r17
    3f1e:	03 c0       	rjmp	.+6      	; 0x3f26 <disk_ioctl+0x28e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    3f20:	84 e0       	ldi	r24, 0x04	; 4
    3f22:	01 c0       	rjmp	.+2      	; 0x3f26 <disk_ioctl+0x28e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3f24:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    3f26:	60 96       	adiw	r28, 0x10	; 16
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	cd bf       	out	0x3d, r28	; 61
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
    3f36:	1f 91       	pop	r17
    3f38:	0f 91       	pop	r16
    3f3a:	ff 90       	pop	r15
    3f3c:	ef 90       	pop	r14
    3f3e:	08 95       	ret

00003f40 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    3f40:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Timer1>
	if (n) Timer1 = --n;
    3f44:	88 23       	and	r24, r24
    3f46:	19 f0       	breq	.+6      	; 0x3f4e <disk_timerproc+0xe>
    3f48:	81 50       	subi	r24, 0x01	; 1
    3f4a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Timer1>
	n = Timer2;
    3f4e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Timer2>
	if (n) Timer2 = --n;
    3f52:	88 23       	and	r24, r24
    3f54:	19 f0       	breq	.+6      	; 0x3f5c <disk_timerproc+0x1c>
    3f56:	81 50       	subi	r24, 0x01	; 1
    3f58:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Timer2>

	s = Stat;
    3f5c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Stat>
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    3f60:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    3f62:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Stat>
    3f66:	08 95       	ret

00003f68 <__vector_4>:
}

ISR(TIMER2_COMP_vect)
{
    3f68:	1f 92       	push	r1
    3f6a:	0f 92       	push	r0
    3f6c:	0f b6       	in	r0, 0x3f	; 63
    3f6e:	0f 92       	push	r0
    3f70:	11 24       	eor	r1, r1
    3f72:	2f 93       	push	r18
    3f74:	3f 93       	push	r19
    3f76:	4f 93       	push	r20
    3f78:	5f 93       	push	r21
    3f7a:	6f 93       	push	r22
    3f7c:	7f 93       	push	r23
    3f7e:	8f 93       	push	r24
    3f80:	9f 93       	push	r25
    3f82:	af 93       	push	r26
    3f84:	bf 93       	push	r27
    3f86:	ef 93       	push	r30
    3f88:	ff 93       	push	r31
	//Timer++;			/* Performance counter for this module */
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    3f8a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <disk_timerproc>
}
    3f8e:	ff 91       	pop	r31
    3f90:	ef 91       	pop	r30
    3f92:	bf 91       	pop	r27
    3f94:	af 91       	pop	r26
    3f96:	9f 91       	pop	r25
    3f98:	8f 91       	pop	r24
    3f9a:	7f 91       	pop	r23
    3f9c:	6f 91       	pop	r22
    3f9e:	5f 91       	pop	r21
    3fa0:	4f 91       	pop	r20
    3fa2:	3f 91       	pop	r19
    3fa4:	2f 91       	pop	r18
    3fa6:	0f 90       	pop	r0
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	0f 90       	pop	r0
    3fac:	1f 90       	pop	r1
    3fae:	18 95       	reti

00003fb0 <main>:
int main(void)
{
	uint16_t num2=0;
	uint8_t position=0;
	
	SWITCH_DIR&= ~(1<<SWITCH);
    3fb0:	8f 98       	cbi	0x11, 7	; 17
	SWITCH_PORT|=(1<<SWITCH);
    3fb2:	97 9a       	sbi	0x12, 7	; 18
	
	lcdinit();
    3fb4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcdinit>
	printf("Logger temp");
    3fb8:	8a e5       	ldi	r24, 0x5A	; 90
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	9f 93       	push	r25
    3fbe:	8f 93       	push	r24
    3fc0:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
	
	DS18B20_init();
    3fc4:	0e 94 c3 02 	call	0x586	; 0x586 <DS18B20_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3fc8:	2f ef       	ldi	r18, 0xFF	; 255
    3fca:	83 ed       	ldi	r24, 0xD3	; 211
    3fcc:	90 e3       	ldi	r25, 0x30	; 48
    3fce:	21 50       	subi	r18, 0x01	; 1
    3fd0:	80 40       	sbci	r24, 0x00	; 0
    3fd2:	90 40       	sbci	r25, 0x00	; 0
    3fd4:	e1 f7       	brne	.-8      	; 0x3fce <main+0x1e>
    3fd6:	00 c0       	rjmp	.+0      	; 0x3fd8 <main+0x28>
    3fd8:	00 00       	nop
	_delay_ms(1000);
	
	DS18B20_start();
    3fda:	0e 94 c7 02 	call	0x58e	; 0x58e <DS18B20_start>
	while (!OW_check);
    3fde:	0f 90       	pop	r0
    3fe0:	0f 90       	pop	r0
    3fe2:	b3 9b       	sbis	0x16, 3	; 22
    3fe4:	fe cf       	rjmp	.-4      	; 0x3fe2 <main+0x32>
	DS18B20_read();
    3fe6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <DS18B20_read>
	
	lcd_clear();
    3fea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_clear>
	lcd_set_xy(0,0);
    3fee:	60 e0       	ldi	r22, 0x00	; 0
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
	
	fresult = f_mount(&fs, "", 0);
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	6b e2       	ldi	r22, 0x2B	; 43
    3ffa:	71 e0       	ldi	r23, 0x01	; 1
    3ffc:	87 ee       	ldi	r24, 0xE7	; 231
    3ffe:	91 e0       	ldi	r25, 0x01	; 1
    4000:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <f_mount>
    4004:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <fresult>
	if(fresult!=FR_OK) stop("mount error");
    4008:	88 23       	and	r24, r24
    400a:	19 f0       	breq	.+6      	; 0x4012 <main+0x62>
    400c:	86 e6       	ldi	r24, 0x66	; 102
    400e:	91 e0       	ldi	r25, 0x01	; 1
    4010:	97 c0       	rjmp	.+302    	; 0x4140 <main+0x190>
	else printf ("mounted");
    4012:	82 e7       	ldi	r24, 0x72	; 114
    4014:	91 e0       	ldi	r25, 0x01	; 1
    4016:	9f 93       	push	r25
    4018:	8f 93       	push	r24
    401a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
    401e:	2f ef       	ldi	r18, 0xFF	; 255
    4020:	83 ed       	ldi	r24, 0xD3	; 211
    4022:	90 e3       	ldi	r25, 0x30	; 48
    4024:	21 50       	subi	r18, 0x01	; 1
    4026:	80 40       	sbci	r24, 0x00	; 0
    4028:	90 40       	sbci	r25, 0x00	; 0
    402a:	e1 f7       	brne	.-8      	; 0x4024 <main+0x74>
    402c:	00 c0       	rjmp	.+0      	; 0x402e <main+0x7e>
    402e:	00 00       	nop
	_delay_ms(1000);
	
	lcd_clear();
    4030:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_clear>
	lcd_set_xy(0,0);
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
	while(1);
}

int main(void)
{
	uint16_t num2=0;
    4040:	00 e0       	ldi	r16, 0x00	; 0
    4042:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		strcpy(buf, prefix);
		position = strlen(buf);
		sprintf(&buf[position], "%d", num2);
    4044:	8a e7       	ldi	r24, 0x7A	; 122
    4046:	e8 2e       	mov	r14, r24
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	f8 2e       	mov	r15, r24
	lcd_clear();
	lcd_set_xy(0,0);
	
	while(1)
	{
		strcpy(buf, prefix);
    404c:	65 e6       	ldi	r22, 0x65	; 101
    404e:	70 e0       	ldi	r23, 0x00	; 0
    4050:	8a e1       	ldi	r24, 0x1A	; 26
    4052:	94 e0       	ldi	r25, 0x04	; 4
    4054:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <strcpy>
		position = strlen(buf);
    4058:	ca e1       	ldi	r28, 0x1A	; 26
    405a:	d4 e0       	ldi	r29, 0x04	; 4
    405c:	fe 01       	movw	r30, r28
    405e:	01 90       	ld	r0, Z+
    4060:	00 20       	and	r0, r0
    4062:	e9 f7       	brne	.-6      	; 0x405e <main+0xae>
    4064:	31 97       	sbiw	r30, 0x01	; 1
    4066:	ea 51       	subi	r30, 0x1A	; 26
    4068:	f4 40       	sbci	r31, 0x04	; 4
		sprintf(&buf[position], "%d", num2);
    406a:	1f 93       	push	r17
    406c:	0f 93       	push	r16
    406e:	ff 92       	push	r15
    4070:	ef 92       	push	r14
    4072:	ff 27       	eor	r31, r31
    4074:	e6 5e       	subi	r30, 0xE6	; 230
    4076:	fb 4f       	sbci	r31, 0xFB	; 251
    4078:	ff 93       	push	r31
    407a:	ef 93       	push	r30
    407c:	0e 94 ef 26 	call	0x4dde	; 0x4dde <sprintf>
		position= strlen(buf);
    4080:	fe 01       	movw	r30, r28
    4082:	01 90       	ld	r0, Z+
    4084:	00 20       	and	r0, r0
    4086:	e9 f7       	brne	.-6      	; 0x4082 <main+0xd2>
    4088:	31 97       	sbiw	r30, 0x01	; 1
    408a:	cf 01       	movw	r24, r30
    408c:	8a 51       	subi	r24, 0x1A	; 26
    408e:	94 40       	sbci	r25, 0x04	; 4
		strcpy(&buf[position], suffix);
    4090:	99 27       	eor	r25, r25
    4092:	60 e6       	ldi	r22, 0x60	; 96
    4094:	70 e0       	ldi	r23, 0x00	; 0
    4096:	86 5e       	subi	r24, 0xE6	; 230
    4098:	9b 4f       	sbci	r25, 0xFB	; 251
    409a:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <strcpy>
		num2++;
    409e:	0f 5f       	subi	r16, 0xFF	; 255
    40a0:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if(f_stat(buf, NULL)==FR_NO_FILE)
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	ce 01       	movw	r24, r28
    40a8:	0e 94 65 17 	call	0x2eca	; 0x2eca <f_stat>
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	84 30       	cpi	r24, 0x04	; 4
    40ba:	41 f6       	brne	.-112    	; 0x404c <main+0x9c>
		{
			if(f_open(&fil, buf, FA_WRITE | FA_CREATE_ALWAYS)==FR_OK) 
    40bc:	4a e0       	ldi	r20, 0x0A	; 10
    40be:	be 01       	movw	r22, r28
    40c0:	8b e6       	ldi	r24, 0x6B	; 107
    40c2:	94 e0       	ldi	r25, 0x04	; 4
    40c4:	0e 94 0a 10 	call	0x2014	; 0x2014 <f_open>
    40c8:	81 11       	cpse	r24, r1
    40ca:	38 c0       	rjmp	.+112    	; 0x413c <main+0x18c>
			{
				printf("file created");
    40cc:	8d e7       	ldi	r24, 0x7D	; 125
    40ce:	91 e0       	ldi	r25, 0x01	; 1
    40d0:	9f 93       	push	r25
    40d2:	8f 93       	push	r24
    40d4:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
				lcd_set_xy(0,1);
    40d8:	61 e0       	ldi	r22, 0x01	; 1
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_set_xy>
				printf("%s",buf);
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	8f e0       	ldi	r24, 0x0F	; 15
    40e6:	91 e0       	ldi	r25, 0x01	; 1
    40e8:	9f 93       	push	r25
    40ea:	8f 93       	push	r24
    40ec:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <printf>
    40f0:	9f ef       	ldi	r25, 0xFF	; 255
    40f2:	23 ed       	ldi	r18, 0xD3	; 211
    40f4:	80 e3       	ldi	r24, 0x30	; 48
    40f6:	91 50       	subi	r25, 0x01	; 1
    40f8:	20 40       	sbci	r18, 0x00	; 0
    40fa:	80 40       	sbci	r24, 0x00	; 0
    40fc:	e1 f7       	brne	.-8      	; 0x40f6 <main+0x146>
    40fe:	00 c0       	rjmp	.+0      	; 0x4100 <main+0x150>
    4100:	00 00       	nop
		
	}
	
	_delay_ms(1000);
	
	lcd_clear();
    4102:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <lcd_clear>
    4106:	9f ef       	ldi	r25, 0xFF	; 255
    4108:	23 ed       	ldi	r18, 0xD3	; 211
    410a:	80 e3       	ldi	r24, 0x30	; 48
    410c:	91 50       	subi	r25, 0x01	; 1
    410e:	20 40       	sbci	r18, 0x00	; 0
    4110:	80 40       	sbci	r24, 0x00	; 0
    4112:	e1 f7       	brne	.-8      	; 0x410c <main+0x15c>
    4114:	00 c0       	rjmp	.+0      	; 0x4116 <main+0x166>
    4116:	00 00       	nop
	_delay_ms(1000);
	
	cli();
    4118:	f8 94       	cli
	TIMSK |= (1<<OCIE1A);
    411a:	89 b7       	in	r24, 0x39	; 57
    411c:	80 61       	ori	r24, 0x10	; 16
    411e:	89 bf       	out	0x39, r24	; 57
	OCR1A=62499;
    4120:	83 e2       	ldi	r24, 0x23	; 35
    4122:	94 ef       	ldi	r25, 0xF4	; 244
    4124:	9b bd       	out	0x2b, r25	; 43
    4126:	8a bd       	out	0x2a, r24	; 42
	TCCR1B = (1<<WGM12) | (1<<CS12);
    4128:	8c e0       	ldi	r24, 0x0C	; 12
    412a:	8e bd       	out	0x2e, r24	; 46
	sei();
    412c:	78 94       	sei
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	04 c0       	rjmp	.+8      	; 0x4144 <main+0x194>
				printf("file created");
				lcd_set_xy(0,1);
				printf("%s",buf);
				break;
			}
			else stop ("Error creat. file");
    413c:	8a e8       	ldi	r24, 0x8A	; 138
    413e:	91 e0       	ldi	r25, 0x01	; 1
    4140:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <stop>
	OCR1A=62499;
	TCCR1B = (1<<WGM12) | (1<<CS12);
	sei();
	while(1)
	{
		if(!(SWITCH_PIN & (1<<SWITCH)))
    4144:	87 99       	sbic	0x10, 7	; 16
    4146:	fe cf       	rjmp	.-4      	; 0x4144 <main+0x194>
		{
			TIMSK&=!(1<<OCIE1A);
    4148:	89 b7       	in	r24, 0x39	; 57
    414a:	19 be       	out	0x39, r1	; 57
			TCCR1B=0;
    414c:	1e bc       	out	0x2e, r1	; 46
    414e:	9f ef       	ldi	r25, 0xFF	; 255
    4150:	23 ed       	ldi	r18, 0xD3	; 211
    4152:	80 e3       	ldi	r24, 0x30	; 48
    4154:	91 50       	subi	r25, 0x01	; 1
    4156:	20 40       	sbci	r18, 0x00	; 0
    4158:	80 40       	sbci	r24, 0x00	; 0
    415a:	e1 f7       	brne	.-8      	; 0x4154 <main+0x1a4>
    415c:	00 c0       	rjmp	.+0      	; 0x415e <main+0x1ae>
    415e:	00 00       	nop
			_delay_ms(1000);
			f_close(&fil);
    4160:	8b e6       	ldi	r24, 0x6B	; 107
    4162:	94 e0       	ldi	r25, 0x04	; 4
    4164:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <f_close>
			stop("OK File closed");
    4168:	8c e9       	ldi	r24, 0x9C	; 156
    416a:	91 e0       	ldi	r25, 0x01	; 1
    416c:	e9 cf       	rjmp	.-46     	; 0x4140 <main+0x190>

0000416e <vfprintf>:
    416e:	a0 e1       	ldi	r26, 0x10	; 16
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	ed eb       	ldi	r30, 0xBD	; 189
    4174:	f0 e2       	ldi	r31, 0x20	; 32
    4176:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <__prologue_saves__>
    417a:	7c 01       	movw	r14, r24
    417c:	1b 01       	movw	r2, r22
    417e:	6a 01       	movw	r12, r20
    4180:	fc 01       	movw	r30, r24
    4182:	17 82       	std	Z+7, r1	; 0x07
    4184:	16 82       	std	Z+6, r1	; 0x06
    4186:	83 81       	ldd	r24, Z+3	; 0x03
    4188:	81 ff       	sbrs	r24, 1
    418a:	44 c3       	rjmp	.+1672   	; 0x4814 <vfprintf+0x6a6>
    418c:	9e 01       	movw	r18, r28
    418e:	2f 5f       	subi	r18, 0xFF	; 255
    4190:	3f 4f       	sbci	r19, 0xFF	; 255
    4192:	39 01       	movw	r6, r18
    4194:	f7 01       	movw	r30, r14
    4196:	93 81       	ldd	r25, Z+3	; 0x03
    4198:	f1 01       	movw	r30, r2
    419a:	93 fd       	sbrc	r25, 3
    419c:	85 91       	lpm	r24, Z+
    419e:	93 ff       	sbrs	r25, 3
    41a0:	81 91       	ld	r24, Z+
    41a2:	1f 01       	movw	r2, r30
    41a4:	88 23       	and	r24, r24
    41a6:	09 f4       	brne	.+2      	; 0x41aa <vfprintf+0x3c>
    41a8:	31 c3       	rjmp	.+1634   	; 0x480c <vfprintf+0x69e>
    41aa:	85 32       	cpi	r24, 0x25	; 37
    41ac:	39 f4       	brne	.+14     	; 0x41bc <vfprintf+0x4e>
    41ae:	93 fd       	sbrc	r25, 3
    41b0:	85 91       	lpm	r24, Z+
    41b2:	93 ff       	sbrs	r25, 3
    41b4:	81 91       	ld	r24, Z+
    41b6:	1f 01       	movw	r2, r30
    41b8:	85 32       	cpi	r24, 0x25	; 37
    41ba:	39 f4       	brne	.+14     	; 0x41ca <vfprintf+0x5c>
    41bc:	b7 01       	movw	r22, r14
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    41c4:	56 01       	movw	r10, r12
    41c6:	65 01       	movw	r12, r10
    41c8:	e5 cf       	rjmp	.-54     	; 0x4194 <vfprintf+0x26>
    41ca:	10 e0       	ldi	r17, 0x00	; 0
    41cc:	51 2c       	mov	r5, r1
    41ce:	91 2c       	mov	r9, r1
    41d0:	ff e1       	ldi	r31, 0x1F	; 31
    41d2:	f9 15       	cp	r31, r9
    41d4:	d8 f0       	brcs	.+54     	; 0x420c <vfprintf+0x9e>
    41d6:	8b 32       	cpi	r24, 0x2B	; 43
    41d8:	79 f0       	breq	.+30     	; 0x41f8 <vfprintf+0x8a>
    41da:	38 f4       	brcc	.+14     	; 0x41ea <vfprintf+0x7c>
    41dc:	80 32       	cpi	r24, 0x20	; 32
    41de:	79 f0       	breq	.+30     	; 0x41fe <vfprintf+0x90>
    41e0:	83 32       	cpi	r24, 0x23	; 35
    41e2:	a1 f4       	brne	.+40     	; 0x420c <vfprintf+0x9e>
    41e4:	f9 2d       	mov	r31, r9
    41e6:	f0 61       	ori	r31, 0x10	; 16
    41e8:	2e c0       	rjmp	.+92     	; 0x4246 <vfprintf+0xd8>
    41ea:	8d 32       	cpi	r24, 0x2D	; 45
    41ec:	61 f0       	breq	.+24     	; 0x4206 <vfprintf+0x98>
    41ee:	80 33       	cpi	r24, 0x30	; 48
    41f0:	69 f4       	brne	.+26     	; 0x420c <vfprintf+0x9e>
    41f2:	29 2d       	mov	r18, r9
    41f4:	21 60       	ori	r18, 0x01	; 1
    41f6:	2d c0       	rjmp	.+90     	; 0x4252 <vfprintf+0xe4>
    41f8:	39 2d       	mov	r19, r9
    41fa:	32 60       	ori	r19, 0x02	; 2
    41fc:	93 2e       	mov	r9, r19
    41fe:	89 2d       	mov	r24, r9
    4200:	84 60       	ori	r24, 0x04	; 4
    4202:	98 2e       	mov	r9, r24
    4204:	2a c0       	rjmp	.+84     	; 0x425a <vfprintf+0xec>
    4206:	e9 2d       	mov	r30, r9
    4208:	e8 60       	ori	r30, 0x08	; 8
    420a:	15 c0       	rjmp	.+42     	; 0x4236 <vfprintf+0xc8>
    420c:	97 fc       	sbrc	r9, 7
    420e:	2d c0       	rjmp	.+90     	; 0x426a <vfprintf+0xfc>
    4210:	20 ed       	ldi	r18, 0xD0	; 208
    4212:	28 0f       	add	r18, r24
    4214:	2a 30       	cpi	r18, 0x0A	; 10
    4216:	88 f4       	brcc	.+34     	; 0x423a <vfprintf+0xcc>
    4218:	96 fe       	sbrs	r9, 6
    421a:	06 c0       	rjmp	.+12     	; 0x4228 <vfprintf+0xba>
    421c:	3a e0       	ldi	r19, 0x0A	; 10
    421e:	13 9f       	mul	r17, r19
    4220:	20 0d       	add	r18, r0
    4222:	11 24       	eor	r1, r1
    4224:	12 2f       	mov	r17, r18
    4226:	19 c0       	rjmp	.+50     	; 0x425a <vfprintf+0xec>
    4228:	8a e0       	ldi	r24, 0x0A	; 10
    422a:	58 9e       	mul	r5, r24
    422c:	20 0d       	add	r18, r0
    422e:	11 24       	eor	r1, r1
    4230:	52 2e       	mov	r5, r18
    4232:	e9 2d       	mov	r30, r9
    4234:	e0 62       	ori	r30, 0x20	; 32
    4236:	9e 2e       	mov	r9, r30
    4238:	10 c0       	rjmp	.+32     	; 0x425a <vfprintf+0xec>
    423a:	8e 32       	cpi	r24, 0x2E	; 46
    423c:	31 f4       	brne	.+12     	; 0x424a <vfprintf+0xdc>
    423e:	96 fc       	sbrc	r9, 6
    4240:	e5 c2       	rjmp	.+1482   	; 0x480c <vfprintf+0x69e>
    4242:	f9 2d       	mov	r31, r9
    4244:	f0 64       	ori	r31, 0x40	; 64
    4246:	9f 2e       	mov	r9, r31
    4248:	08 c0       	rjmp	.+16     	; 0x425a <vfprintf+0xec>
    424a:	8c 36       	cpi	r24, 0x6C	; 108
    424c:	21 f4       	brne	.+8      	; 0x4256 <vfprintf+0xe8>
    424e:	29 2d       	mov	r18, r9
    4250:	20 68       	ori	r18, 0x80	; 128
    4252:	92 2e       	mov	r9, r18
    4254:	02 c0       	rjmp	.+4      	; 0x425a <vfprintf+0xec>
    4256:	88 36       	cpi	r24, 0x68	; 104
    4258:	41 f4       	brne	.+16     	; 0x426a <vfprintf+0xfc>
    425a:	f1 01       	movw	r30, r2
    425c:	93 fd       	sbrc	r25, 3
    425e:	85 91       	lpm	r24, Z+
    4260:	93 ff       	sbrs	r25, 3
    4262:	81 91       	ld	r24, Z+
    4264:	1f 01       	movw	r2, r30
    4266:	81 11       	cpse	r24, r1
    4268:	b3 cf       	rjmp	.-154    	; 0x41d0 <vfprintf+0x62>
    426a:	9b eb       	ldi	r25, 0xBB	; 187
    426c:	98 0f       	add	r25, r24
    426e:	93 30       	cpi	r25, 0x03	; 3
    4270:	20 f4       	brcc	.+8      	; 0x427a <vfprintf+0x10c>
    4272:	99 2d       	mov	r25, r9
    4274:	90 61       	ori	r25, 0x10	; 16
    4276:	80 5e       	subi	r24, 0xE0	; 224
    4278:	07 c0       	rjmp	.+14     	; 0x4288 <vfprintf+0x11a>
    427a:	9b e9       	ldi	r25, 0x9B	; 155
    427c:	98 0f       	add	r25, r24
    427e:	93 30       	cpi	r25, 0x03	; 3
    4280:	08 f0       	brcs	.+2      	; 0x4284 <vfprintf+0x116>
    4282:	66 c1       	rjmp	.+716    	; 0x4550 <vfprintf+0x3e2>
    4284:	99 2d       	mov	r25, r9
    4286:	9f 7e       	andi	r25, 0xEF	; 239
    4288:	96 ff       	sbrs	r25, 6
    428a:	16 e0       	ldi	r17, 0x06	; 6
    428c:	9f 73       	andi	r25, 0x3F	; 63
    428e:	99 2e       	mov	r9, r25
    4290:	85 36       	cpi	r24, 0x65	; 101
    4292:	19 f4       	brne	.+6      	; 0x429a <vfprintf+0x12c>
    4294:	90 64       	ori	r25, 0x40	; 64
    4296:	99 2e       	mov	r9, r25
    4298:	08 c0       	rjmp	.+16     	; 0x42aa <vfprintf+0x13c>
    429a:	86 36       	cpi	r24, 0x66	; 102
    429c:	21 f4       	brne	.+8      	; 0x42a6 <vfprintf+0x138>
    429e:	39 2f       	mov	r19, r25
    42a0:	30 68       	ori	r19, 0x80	; 128
    42a2:	93 2e       	mov	r9, r19
    42a4:	02 c0       	rjmp	.+4      	; 0x42aa <vfprintf+0x13c>
    42a6:	11 11       	cpse	r17, r1
    42a8:	11 50       	subi	r17, 0x01	; 1
    42aa:	97 fe       	sbrs	r9, 7
    42ac:	07 c0       	rjmp	.+14     	; 0x42bc <vfprintf+0x14e>
    42ae:	1c 33       	cpi	r17, 0x3C	; 60
    42b0:	50 f4       	brcc	.+20     	; 0x42c6 <vfprintf+0x158>
    42b2:	44 24       	eor	r4, r4
    42b4:	43 94       	inc	r4
    42b6:	41 0e       	add	r4, r17
    42b8:	27 e0       	ldi	r18, 0x07	; 7
    42ba:	0b c0       	rjmp	.+22     	; 0x42d2 <vfprintf+0x164>
    42bc:	18 30       	cpi	r17, 0x08	; 8
    42be:	38 f0       	brcs	.+14     	; 0x42ce <vfprintf+0x160>
    42c0:	27 e0       	ldi	r18, 0x07	; 7
    42c2:	17 e0       	ldi	r17, 0x07	; 7
    42c4:	05 c0       	rjmp	.+10     	; 0x42d0 <vfprintf+0x162>
    42c6:	27 e0       	ldi	r18, 0x07	; 7
    42c8:	9c e3       	ldi	r25, 0x3C	; 60
    42ca:	49 2e       	mov	r4, r25
    42cc:	02 c0       	rjmp	.+4      	; 0x42d2 <vfprintf+0x164>
    42ce:	21 2f       	mov	r18, r17
    42d0:	41 2c       	mov	r4, r1
    42d2:	56 01       	movw	r10, r12
    42d4:	84 e0       	ldi	r24, 0x04	; 4
    42d6:	a8 0e       	add	r10, r24
    42d8:	b1 1c       	adc	r11, r1
    42da:	f6 01       	movw	r30, r12
    42dc:	60 81       	ld	r22, Z
    42de:	71 81       	ldd	r23, Z+1	; 0x01
    42e0:	82 81       	ldd	r24, Z+2	; 0x02
    42e2:	93 81       	ldd	r25, Z+3	; 0x03
    42e4:	04 2d       	mov	r16, r4
    42e6:	a3 01       	movw	r20, r6
    42e8:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__ftoa_engine>
    42ec:	6c 01       	movw	r12, r24
    42ee:	f9 81       	ldd	r31, Y+1	; 0x01
    42f0:	fc 87       	std	Y+12, r31	; 0x0c
    42f2:	f0 ff       	sbrs	r31, 0
    42f4:	02 c0       	rjmp	.+4      	; 0x42fa <vfprintf+0x18c>
    42f6:	f3 ff       	sbrs	r31, 3
    42f8:	06 c0       	rjmp	.+12     	; 0x4306 <vfprintf+0x198>
    42fa:	91 fc       	sbrc	r9, 1
    42fc:	06 c0       	rjmp	.+12     	; 0x430a <vfprintf+0x19c>
    42fe:	92 fe       	sbrs	r9, 2
    4300:	06 c0       	rjmp	.+12     	; 0x430e <vfprintf+0x1a0>
    4302:	00 e2       	ldi	r16, 0x20	; 32
    4304:	05 c0       	rjmp	.+10     	; 0x4310 <vfprintf+0x1a2>
    4306:	0d e2       	ldi	r16, 0x2D	; 45
    4308:	03 c0       	rjmp	.+6      	; 0x4310 <vfprintf+0x1a2>
    430a:	0b e2       	ldi	r16, 0x2B	; 43
    430c:	01 c0       	rjmp	.+2      	; 0x4310 <vfprintf+0x1a2>
    430e:	00 e0       	ldi	r16, 0x00	; 0
    4310:	8c 85       	ldd	r24, Y+12	; 0x0c
    4312:	8c 70       	andi	r24, 0x0C	; 12
    4314:	19 f0       	breq	.+6      	; 0x431c <vfprintf+0x1ae>
    4316:	01 11       	cpse	r16, r1
    4318:	5a c2       	rjmp	.+1204   	; 0x47ce <vfprintf+0x660>
    431a:	9b c2       	rjmp	.+1334   	; 0x4852 <vfprintf+0x6e4>
    431c:	97 fe       	sbrs	r9, 7
    431e:	10 c0       	rjmp	.+32     	; 0x4340 <vfprintf+0x1d2>
    4320:	4c 0c       	add	r4, r12
    4322:	fc 85       	ldd	r31, Y+12	; 0x0c
    4324:	f4 ff       	sbrs	r31, 4
    4326:	04 c0       	rjmp	.+8      	; 0x4330 <vfprintf+0x1c2>
    4328:	8a 81       	ldd	r24, Y+2	; 0x02
    432a:	81 33       	cpi	r24, 0x31	; 49
    432c:	09 f4       	brne	.+2      	; 0x4330 <vfprintf+0x1c2>
    432e:	4a 94       	dec	r4
    4330:	14 14       	cp	r1, r4
    4332:	74 f5       	brge	.+92     	; 0x4390 <vfprintf+0x222>
    4334:	28 e0       	ldi	r18, 0x08	; 8
    4336:	24 15       	cp	r18, r4
    4338:	78 f5       	brcc	.+94     	; 0x4398 <vfprintf+0x22a>
    433a:	88 e0       	ldi	r24, 0x08	; 8
    433c:	48 2e       	mov	r4, r24
    433e:	2c c0       	rjmp	.+88     	; 0x4398 <vfprintf+0x22a>
    4340:	96 fc       	sbrc	r9, 6
    4342:	2a c0       	rjmp	.+84     	; 0x4398 <vfprintf+0x22a>
    4344:	81 2f       	mov	r24, r17
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	8c 15       	cp	r24, r12
    434a:	9d 05       	cpc	r25, r13
    434c:	9c f0       	brlt	.+38     	; 0x4374 <vfprintf+0x206>
    434e:	3c ef       	ldi	r19, 0xFC	; 252
    4350:	c3 16       	cp	r12, r19
    4352:	3f ef       	ldi	r19, 0xFF	; 255
    4354:	d3 06       	cpc	r13, r19
    4356:	74 f0       	brlt	.+28     	; 0x4374 <vfprintf+0x206>
    4358:	89 2d       	mov	r24, r9
    435a:	80 68       	ori	r24, 0x80	; 128
    435c:	98 2e       	mov	r9, r24
    435e:	0a c0       	rjmp	.+20     	; 0x4374 <vfprintf+0x206>
    4360:	e2 e0       	ldi	r30, 0x02	; 2
    4362:	f0 e0       	ldi	r31, 0x00	; 0
    4364:	ec 0f       	add	r30, r28
    4366:	fd 1f       	adc	r31, r29
    4368:	e1 0f       	add	r30, r17
    436a:	f1 1d       	adc	r31, r1
    436c:	80 81       	ld	r24, Z
    436e:	80 33       	cpi	r24, 0x30	; 48
    4370:	19 f4       	brne	.+6      	; 0x4378 <vfprintf+0x20a>
    4372:	11 50       	subi	r17, 0x01	; 1
    4374:	11 11       	cpse	r17, r1
    4376:	f4 cf       	rjmp	.-24     	; 0x4360 <vfprintf+0x1f2>
    4378:	97 fe       	sbrs	r9, 7
    437a:	0e c0       	rjmp	.+28     	; 0x4398 <vfprintf+0x22a>
    437c:	44 24       	eor	r4, r4
    437e:	43 94       	inc	r4
    4380:	41 0e       	add	r4, r17
    4382:	81 2f       	mov	r24, r17
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	c8 16       	cp	r12, r24
    4388:	d9 06       	cpc	r13, r25
    438a:	2c f4       	brge	.+10     	; 0x4396 <vfprintf+0x228>
    438c:	1c 19       	sub	r17, r12
    438e:	04 c0       	rjmp	.+8      	; 0x4398 <vfprintf+0x22a>
    4390:	44 24       	eor	r4, r4
    4392:	43 94       	inc	r4
    4394:	01 c0       	rjmp	.+2      	; 0x4398 <vfprintf+0x22a>
    4396:	10 e0       	ldi	r17, 0x00	; 0
    4398:	97 fe       	sbrs	r9, 7
    439a:	06 c0       	rjmp	.+12     	; 0x43a8 <vfprintf+0x23a>
    439c:	1c 14       	cp	r1, r12
    439e:	1d 04       	cpc	r1, r13
    43a0:	34 f4       	brge	.+12     	; 0x43ae <vfprintf+0x240>
    43a2:	c6 01       	movw	r24, r12
    43a4:	01 96       	adiw	r24, 0x01	; 1
    43a6:	05 c0       	rjmp	.+10     	; 0x43b2 <vfprintf+0x244>
    43a8:	85 e0       	ldi	r24, 0x05	; 5
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	02 c0       	rjmp	.+4      	; 0x43b2 <vfprintf+0x244>
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	01 11       	cpse	r16, r1
    43b4:	01 96       	adiw	r24, 0x01	; 1
    43b6:	11 23       	and	r17, r17
    43b8:	31 f0       	breq	.+12     	; 0x43c6 <vfprintf+0x258>
    43ba:	21 2f       	mov	r18, r17
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	2f 5f       	subi	r18, 0xFF	; 255
    43c0:	3f 4f       	sbci	r19, 0xFF	; 255
    43c2:	82 0f       	add	r24, r18
    43c4:	93 1f       	adc	r25, r19
    43c6:	25 2d       	mov	r18, r5
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	82 17       	cp	r24, r18
    43cc:	93 07       	cpc	r25, r19
    43ce:	14 f4       	brge	.+4      	; 0x43d4 <vfprintf+0x266>
    43d0:	58 1a       	sub	r5, r24
    43d2:	01 c0       	rjmp	.+2      	; 0x43d6 <vfprintf+0x268>
    43d4:	51 2c       	mov	r5, r1
    43d6:	89 2d       	mov	r24, r9
    43d8:	89 70       	andi	r24, 0x09	; 9
    43da:	49 f4       	brne	.+18     	; 0x43ee <vfprintf+0x280>
    43dc:	55 20       	and	r5, r5
    43de:	39 f0       	breq	.+14     	; 0x43ee <vfprintf+0x280>
    43e0:	b7 01       	movw	r22, r14
    43e2:	80 e2       	ldi	r24, 0x20	; 32
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    43ea:	5a 94       	dec	r5
    43ec:	f7 cf       	rjmp	.-18     	; 0x43dc <vfprintf+0x26e>
    43ee:	00 23       	and	r16, r16
    43f0:	29 f0       	breq	.+10     	; 0x43fc <vfprintf+0x28e>
    43f2:	b7 01       	movw	r22, r14
    43f4:	80 2f       	mov	r24, r16
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    43fc:	93 fc       	sbrc	r9, 3
    43fe:	09 c0       	rjmp	.+18     	; 0x4412 <vfprintf+0x2a4>
    4400:	55 20       	and	r5, r5
    4402:	39 f0       	breq	.+14     	; 0x4412 <vfprintf+0x2a4>
    4404:	b7 01       	movw	r22, r14
    4406:	80 e3       	ldi	r24, 0x30	; 48
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    440e:	5a 94       	dec	r5
    4410:	f7 cf       	rjmp	.-18     	; 0x4400 <vfprintf+0x292>
    4412:	97 fe       	sbrs	r9, 7
    4414:	4c c0       	rjmp	.+152    	; 0x44ae <vfprintf+0x340>
    4416:	46 01       	movw	r8, r12
    4418:	d7 fe       	sbrs	r13, 7
    441a:	02 c0       	rjmp	.+4      	; 0x4420 <vfprintf+0x2b2>
    441c:	81 2c       	mov	r8, r1
    441e:	91 2c       	mov	r9, r1
    4420:	c6 01       	movw	r24, r12
    4422:	88 19       	sub	r24, r8
    4424:	99 09       	sbc	r25, r9
    4426:	f3 01       	movw	r30, r6
    4428:	e8 0f       	add	r30, r24
    442a:	f9 1f       	adc	r31, r25
    442c:	fe 87       	std	Y+14, r31	; 0x0e
    442e:	ed 87       	std	Y+13, r30	; 0x0d
    4430:	96 01       	movw	r18, r12
    4432:	24 19       	sub	r18, r4
    4434:	31 09       	sbc	r19, r1
    4436:	38 8b       	std	Y+16, r19	; 0x10
    4438:	2f 87       	std	Y+15, r18	; 0x0f
    443a:	01 2f       	mov	r16, r17
    443c:	10 e0       	ldi	r17, 0x00	; 0
    443e:	11 95       	neg	r17
    4440:	01 95       	neg	r16
    4442:	11 09       	sbc	r17, r1
    4444:	3f ef       	ldi	r19, 0xFF	; 255
    4446:	83 16       	cp	r8, r19
    4448:	93 06       	cpc	r9, r19
    444a:	29 f4       	brne	.+10     	; 0x4456 <vfprintf+0x2e8>
    444c:	b7 01       	movw	r22, r14
    444e:	8e e2       	ldi	r24, 0x2E	; 46
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4456:	c8 14       	cp	r12, r8
    4458:	d9 04       	cpc	r13, r9
    445a:	4c f0       	brlt	.+18     	; 0x446e <vfprintf+0x300>
    445c:	8f 85       	ldd	r24, Y+15	; 0x0f
    445e:	98 89       	ldd	r25, Y+16	; 0x10
    4460:	88 15       	cp	r24, r8
    4462:	99 05       	cpc	r25, r9
    4464:	24 f4       	brge	.+8      	; 0x446e <vfprintf+0x300>
    4466:	ed 85       	ldd	r30, Y+13	; 0x0d
    4468:	fe 85       	ldd	r31, Y+14	; 0x0e
    446a:	81 81       	ldd	r24, Z+1	; 0x01
    446c:	01 c0       	rjmp	.+2      	; 0x4470 <vfprintf+0x302>
    446e:	80 e3       	ldi	r24, 0x30	; 48
    4470:	f1 e0       	ldi	r31, 0x01	; 1
    4472:	8f 1a       	sub	r8, r31
    4474:	91 08       	sbc	r9, r1
    4476:	2d 85       	ldd	r18, Y+13	; 0x0d
    4478:	3e 85       	ldd	r19, Y+14	; 0x0e
    447a:	2f 5f       	subi	r18, 0xFF	; 255
    447c:	3f 4f       	sbci	r19, 0xFF	; 255
    447e:	3e 87       	std	Y+14, r19	; 0x0e
    4480:	2d 87       	std	Y+13, r18	; 0x0d
    4482:	80 16       	cp	r8, r16
    4484:	91 06       	cpc	r9, r17
    4486:	2c f0       	brlt	.+10     	; 0x4492 <vfprintf+0x324>
    4488:	b7 01       	movw	r22, r14
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4490:	d9 cf       	rjmp	.-78     	; 0x4444 <vfprintf+0x2d6>
    4492:	c8 14       	cp	r12, r8
    4494:	d9 04       	cpc	r13, r9
    4496:	41 f4       	brne	.+16     	; 0x44a8 <vfprintf+0x33a>
    4498:	9a 81       	ldd	r25, Y+2	; 0x02
    449a:	96 33       	cpi	r25, 0x36	; 54
    449c:	20 f4       	brcc	.+8      	; 0x44a6 <vfprintf+0x338>
    449e:	95 33       	cpi	r25, 0x35	; 53
    44a0:	19 f4       	brne	.+6      	; 0x44a8 <vfprintf+0x33a>
    44a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    44a4:	34 ff       	sbrs	r19, 4
    44a6:	81 e3       	ldi	r24, 0x31	; 49
    44a8:	b7 01       	movw	r22, r14
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	4e c0       	rjmp	.+156    	; 0x454a <vfprintf+0x3dc>
    44ae:	8a 81       	ldd	r24, Y+2	; 0x02
    44b0:	81 33       	cpi	r24, 0x31	; 49
    44b2:	19 f0       	breq	.+6      	; 0x44ba <vfprintf+0x34c>
    44b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    44b6:	9f 7e       	andi	r25, 0xEF	; 239
    44b8:	9c 87       	std	Y+12, r25	; 0x0c
    44ba:	b7 01       	movw	r22, r14
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    44c2:	11 11       	cpse	r17, r1
    44c4:	05 c0       	rjmp	.+10     	; 0x44d0 <vfprintf+0x362>
    44c6:	94 fc       	sbrc	r9, 4
    44c8:	18 c0       	rjmp	.+48     	; 0x44fa <vfprintf+0x38c>
    44ca:	85 e6       	ldi	r24, 0x65	; 101
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	17 c0       	rjmp	.+46     	; 0x44fe <vfprintf+0x390>
    44d0:	b7 01       	movw	r22, r14
    44d2:	8e e2       	ldi	r24, 0x2E	; 46
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    44da:	1e 5f       	subi	r17, 0xFE	; 254
    44dc:	82 e0       	ldi	r24, 0x02	; 2
    44de:	01 e0       	ldi	r16, 0x01	; 1
    44e0:	08 0f       	add	r16, r24
    44e2:	f3 01       	movw	r30, r6
    44e4:	e8 0f       	add	r30, r24
    44e6:	f1 1d       	adc	r31, r1
    44e8:	80 81       	ld	r24, Z
    44ea:	b7 01       	movw	r22, r14
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    44f2:	80 2f       	mov	r24, r16
    44f4:	01 13       	cpse	r16, r17
    44f6:	f3 cf       	rjmp	.-26     	; 0x44de <vfprintf+0x370>
    44f8:	e6 cf       	rjmp	.-52     	; 0x44c6 <vfprintf+0x358>
    44fa:	85 e4       	ldi	r24, 0x45	; 69
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	b7 01       	movw	r22, r14
    4500:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4504:	d7 fc       	sbrc	r13, 7
    4506:	06 c0       	rjmp	.+12     	; 0x4514 <vfprintf+0x3a6>
    4508:	c1 14       	cp	r12, r1
    450a:	d1 04       	cpc	r13, r1
    450c:	41 f4       	brne	.+16     	; 0x451e <vfprintf+0x3b0>
    450e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4510:	e4 ff       	sbrs	r30, 4
    4512:	05 c0       	rjmp	.+10     	; 0x451e <vfprintf+0x3b0>
    4514:	d1 94       	neg	r13
    4516:	c1 94       	neg	r12
    4518:	d1 08       	sbc	r13, r1
    451a:	8d e2       	ldi	r24, 0x2D	; 45
    451c:	01 c0       	rjmp	.+2      	; 0x4520 <vfprintf+0x3b2>
    451e:	8b e2       	ldi	r24, 0x2B	; 43
    4520:	b7 01       	movw	r22, r14
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4528:	80 e3       	ldi	r24, 0x30	; 48
    452a:	2a e0       	ldi	r18, 0x0A	; 10
    452c:	c2 16       	cp	r12, r18
    452e:	d1 04       	cpc	r13, r1
    4530:	2c f0       	brlt	.+10     	; 0x453c <vfprintf+0x3ce>
    4532:	8f 5f       	subi	r24, 0xFF	; 255
    4534:	fa e0       	ldi	r31, 0x0A	; 10
    4536:	cf 1a       	sub	r12, r31
    4538:	d1 08       	sbc	r13, r1
    453a:	f7 cf       	rjmp	.-18     	; 0x452a <vfprintf+0x3bc>
    453c:	b7 01       	movw	r22, r14
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4544:	b7 01       	movw	r22, r14
    4546:	c6 01       	movw	r24, r12
    4548:	c0 96       	adiw	r24, 0x30	; 48
    454a:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    454e:	54 c1       	rjmp	.+680    	; 0x47f8 <vfprintf+0x68a>
    4550:	83 36       	cpi	r24, 0x63	; 99
    4552:	31 f0       	breq	.+12     	; 0x4560 <vfprintf+0x3f2>
    4554:	83 37       	cpi	r24, 0x73	; 115
    4556:	79 f0       	breq	.+30     	; 0x4576 <vfprintf+0x408>
    4558:	83 35       	cpi	r24, 0x53	; 83
    455a:	09 f0       	breq	.+2      	; 0x455e <vfprintf+0x3f0>
    455c:	56 c0       	rjmp	.+172    	; 0x460a <vfprintf+0x49c>
    455e:	20 c0       	rjmp	.+64     	; 0x45a0 <vfprintf+0x432>
    4560:	56 01       	movw	r10, r12
    4562:	32 e0       	ldi	r19, 0x02	; 2
    4564:	a3 0e       	add	r10, r19
    4566:	b1 1c       	adc	r11, r1
    4568:	f6 01       	movw	r30, r12
    456a:	80 81       	ld	r24, Z
    456c:	89 83       	std	Y+1, r24	; 0x01
    456e:	01 e0       	ldi	r16, 0x01	; 1
    4570:	10 e0       	ldi	r17, 0x00	; 0
    4572:	63 01       	movw	r12, r6
    4574:	12 c0       	rjmp	.+36     	; 0x459a <vfprintf+0x42c>
    4576:	56 01       	movw	r10, r12
    4578:	f2 e0       	ldi	r31, 0x02	; 2
    457a:	af 0e       	add	r10, r31
    457c:	b1 1c       	adc	r11, r1
    457e:	f6 01       	movw	r30, r12
    4580:	c0 80       	ld	r12, Z
    4582:	d1 80       	ldd	r13, Z+1	; 0x01
    4584:	96 fe       	sbrs	r9, 6
    4586:	03 c0       	rjmp	.+6      	; 0x458e <vfprintf+0x420>
    4588:	61 2f       	mov	r22, r17
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <vfprintf+0x424>
    458e:	6f ef       	ldi	r22, 0xFF	; 255
    4590:	7f ef       	ldi	r23, 0xFF	; 255
    4592:	c6 01       	movw	r24, r12
    4594:	0e 94 92 26 	call	0x4d24	; 0x4d24 <strnlen>
    4598:	8c 01       	movw	r16, r24
    459a:	f9 2d       	mov	r31, r9
    459c:	ff 77       	andi	r31, 0x7F	; 127
    459e:	14 c0       	rjmp	.+40     	; 0x45c8 <vfprintf+0x45a>
    45a0:	56 01       	movw	r10, r12
    45a2:	22 e0       	ldi	r18, 0x02	; 2
    45a4:	a2 0e       	add	r10, r18
    45a6:	b1 1c       	adc	r11, r1
    45a8:	f6 01       	movw	r30, r12
    45aa:	c0 80       	ld	r12, Z
    45ac:	d1 80       	ldd	r13, Z+1	; 0x01
    45ae:	96 fe       	sbrs	r9, 6
    45b0:	03 c0       	rjmp	.+6      	; 0x45b8 <vfprintf+0x44a>
    45b2:	61 2f       	mov	r22, r17
    45b4:	70 e0       	ldi	r23, 0x00	; 0
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <vfprintf+0x44e>
    45b8:	6f ef       	ldi	r22, 0xFF	; 255
    45ba:	7f ef       	ldi	r23, 0xFF	; 255
    45bc:	c6 01       	movw	r24, r12
    45be:	0e 94 80 26 	call	0x4d00	; 0x4d00 <strnlen_P>
    45c2:	8c 01       	movw	r16, r24
    45c4:	f9 2d       	mov	r31, r9
    45c6:	f0 68       	ori	r31, 0x80	; 128
    45c8:	9f 2e       	mov	r9, r31
    45ca:	f3 fd       	sbrc	r31, 3
    45cc:	1a c0       	rjmp	.+52     	; 0x4602 <vfprintf+0x494>
    45ce:	85 2d       	mov	r24, r5
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	08 17       	cp	r16, r24
    45d4:	19 07       	cpc	r17, r25
    45d6:	a8 f4       	brcc	.+42     	; 0x4602 <vfprintf+0x494>
    45d8:	b7 01       	movw	r22, r14
    45da:	80 e2       	ldi	r24, 0x20	; 32
    45dc:	90 e0       	ldi	r25, 0x00	; 0
    45de:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    45e2:	5a 94       	dec	r5
    45e4:	f4 cf       	rjmp	.-24     	; 0x45ce <vfprintf+0x460>
    45e6:	f6 01       	movw	r30, r12
    45e8:	97 fc       	sbrc	r9, 7
    45ea:	85 91       	lpm	r24, Z+
    45ec:	97 fe       	sbrs	r9, 7
    45ee:	81 91       	ld	r24, Z+
    45f0:	6f 01       	movw	r12, r30
    45f2:	b7 01       	movw	r22, r14
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    45fa:	51 10       	cpse	r5, r1
    45fc:	5a 94       	dec	r5
    45fe:	01 50       	subi	r16, 0x01	; 1
    4600:	11 09       	sbc	r17, r1
    4602:	01 15       	cp	r16, r1
    4604:	11 05       	cpc	r17, r1
    4606:	79 f7       	brne	.-34     	; 0x45e6 <vfprintf+0x478>
    4608:	f7 c0       	rjmp	.+494    	; 0x47f8 <vfprintf+0x68a>
    460a:	84 36       	cpi	r24, 0x64	; 100
    460c:	11 f0       	breq	.+4      	; 0x4612 <vfprintf+0x4a4>
    460e:	89 36       	cpi	r24, 0x69	; 105
    4610:	61 f5       	brne	.+88     	; 0x466a <vfprintf+0x4fc>
    4612:	56 01       	movw	r10, r12
    4614:	97 fe       	sbrs	r9, 7
    4616:	09 c0       	rjmp	.+18     	; 0x462a <vfprintf+0x4bc>
    4618:	24 e0       	ldi	r18, 0x04	; 4
    461a:	a2 0e       	add	r10, r18
    461c:	b1 1c       	adc	r11, r1
    461e:	f6 01       	movw	r30, r12
    4620:	60 81       	ld	r22, Z
    4622:	71 81       	ldd	r23, Z+1	; 0x01
    4624:	82 81       	ldd	r24, Z+2	; 0x02
    4626:	93 81       	ldd	r25, Z+3	; 0x03
    4628:	0a c0       	rjmp	.+20     	; 0x463e <vfprintf+0x4d0>
    462a:	f2 e0       	ldi	r31, 0x02	; 2
    462c:	af 0e       	add	r10, r31
    462e:	b1 1c       	adc	r11, r1
    4630:	f6 01       	movw	r30, r12
    4632:	60 81       	ld	r22, Z
    4634:	71 81       	ldd	r23, Z+1	; 0x01
    4636:	07 2e       	mov	r0, r23
    4638:	00 0c       	add	r0, r0
    463a:	88 0b       	sbc	r24, r24
    463c:	99 0b       	sbc	r25, r25
    463e:	f9 2d       	mov	r31, r9
    4640:	ff 76       	andi	r31, 0x6F	; 111
    4642:	9f 2e       	mov	r9, r31
    4644:	97 ff       	sbrs	r25, 7
    4646:	09 c0       	rjmp	.+18     	; 0x465a <vfprintf+0x4ec>
    4648:	90 95       	com	r25
    464a:	80 95       	com	r24
    464c:	70 95       	com	r23
    464e:	61 95       	neg	r22
    4650:	7f 4f       	sbci	r23, 0xFF	; 255
    4652:	8f 4f       	sbci	r24, 0xFF	; 255
    4654:	9f 4f       	sbci	r25, 0xFF	; 255
    4656:	f0 68       	ori	r31, 0x80	; 128
    4658:	9f 2e       	mov	r9, r31
    465a:	2a e0       	ldi	r18, 0x0A	; 10
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	a3 01       	movw	r20, r6
    4660:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__ultoa_invert>
    4664:	c8 2e       	mov	r12, r24
    4666:	c6 18       	sub	r12, r6
    4668:	3f c0       	rjmp	.+126    	; 0x46e8 <vfprintf+0x57a>
    466a:	09 2d       	mov	r16, r9
    466c:	85 37       	cpi	r24, 0x75	; 117
    466e:	21 f4       	brne	.+8      	; 0x4678 <vfprintf+0x50a>
    4670:	0f 7e       	andi	r16, 0xEF	; 239
    4672:	2a e0       	ldi	r18, 0x0A	; 10
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	1d c0       	rjmp	.+58     	; 0x46b2 <vfprintf+0x544>
    4678:	09 7f       	andi	r16, 0xF9	; 249
    467a:	8f 36       	cpi	r24, 0x6F	; 111
    467c:	91 f0       	breq	.+36     	; 0x46a2 <vfprintf+0x534>
    467e:	18 f4       	brcc	.+6      	; 0x4686 <vfprintf+0x518>
    4680:	88 35       	cpi	r24, 0x58	; 88
    4682:	59 f0       	breq	.+22     	; 0x469a <vfprintf+0x52c>
    4684:	c3 c0       	rjmp	.+390    	; 0x480c <vfprintf+0x69e>
    4686:	80 37       	cpi	r24, 0x70	; 112
    4688:	19 f0       	breq	.+6      	; 0x4690 <vfprintf+0x522>
    468a:	88 37       	cpi	r24, 0x78	; 120
    468c:	11 f0       	breq	.+4      	; 0x4692 <vfprintf+0x524>
    468e:	be c0       	rjmp	.+380    	; 0x480c <vfprintf+0x69e>
    4690:	00 61       	ori	r16, 0x10	; 16
    4692:	04 ff       	sbrs	r16, 4
    4694:	09 c0       	rjmp	.+18     	; 0x46a8 <vfprintf+0x53a>
    4696:	04 60       	ori	r16, 0x04	; 4
    4698:	07 c0       	rjmp	.+14     	; 0x46a8 <vfprintf+0x53a>
    469a:	94 fe       	sbrs	r9, 4
    469c:	08 c0       	rjmp	.+16     	; 0x46ae <vfprintf+0x540>
    469e:	06 60       	ori	r16, 0x06	; 6
    46a0:	06 c0       	rjmp	.+12     	; 0x46ae <vfprintf+0x540>
    46a2:	28 e0       	ldi	r18, 0x08	; 8
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	05 c0       	rjmp	.+10     	; 0x46b2 <vfprintf+0x544>
    46a8:	20 e1       	ldi	r18, 0x10	; 16
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	02 c0       	rjmp	.+4      	; 0x46b2 <vfprintf+0x544>
    46ae:	20 e1       	ldi	r18, 0x10	; 16
    46b0:	32 e0       	ldi	r19, 0x02	; 2
    46b2:	56 01       	movw	r10, r12
    46b4:	07 ff       	sbrs	r16, 7
    46b6:	09 c0       	rjmp	.+18     	; 0x46ca <vfprintf+0x55c>
    46b8:	84 e0       	ldi	r24, 0x04	; 4
    46ba:	a8 0e       	add	r10, r24
    46bc:	b1 1c       	adc	r11, r1
    46be:	f6 01       	movw	r30, r12
    46c0:	60 81       	ld	r22, Z
    46c2:	71 81       	ldd	r23, Z+1	; 0x01
    46c4:	82 81       	ldd	r24, Z+2	; 0x02
    46c6:	93 81       	ldd	r25, Z+3	; 0x03
    46c8:	08 c0       	rjmp	.+16     	; 0x46da <vfprintf+0x56c>
    46ca:	f2 e0       	ldi	r31, 0x02	; 2
    46cc:	af 0e       	add	r10, r31
    46ce:	b1 1c       	adc	r11, r1
    46d0:	f6 01       	movw	r30, r12
    46d2:	60 81       	ld	r22, Z
    46d4:	71 81       	ldd	r23, Z+1	; 0x01
    46d6:	80 e0       	ldi	r24, 0x00	; 0
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	a3 01       	movw	r20, r6
    46dc:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__ultoa_invert>
    46e0:	c8 2e       	mov	r12, r24
    46e2:	c6 18       	sub	r12, r6
    46e4:	0f 77       	andi	r16, 0x7F	; 127
    46e6:	90 2e       	mov	r9, r16
    46e8:	96 fe       	sbrs	r9, 6
    46ea:	0b c0       	rjmp	.+22     	; 0x4702 <vfprintf+0x594>
    46ec:	09 2d       	mov	r16, r9
    46ee:	0e 7f       	andi	r16, 0xFE	; 254
    46f0:	c1 16       	cp	r12, r17
    46f2:	50 f4       	brcc	.+20     	; 0x4708 <vfprintf+0x59a>
    46f4:	94 fe       	sbrs	r9, 4
    46f6:	0a c0       	rjmp	.+20     	; 0x470c <vfprintf+0x59e>
    46f8:	92 fc       	sbrc	r9, 2
    46fa:	08 c0       	rjmp	.+16     	; 0x470c <vfprintf+0x59e>
    46fc:	09 2d       	mov	r16, r9
    46fe:	0e 7e       	andi	r16, 0xEE	; 238
    4700:	05 c0       	rjmp	.+10     	; 0x470c <vfprintf+0x59e>
    4702:	dc 2c       	mov	r13, r12
    4704:	09 2d       	mov	r16, r9
    4706:	03 c0       	rjmp	.+6      	; 0x470e <vfprintf+0x5a0>
    4708:	dc 2c       	mov	r13, r12
    470a:	01 c0       	rjmp	.+2      	; 0x470e <vfprintf+0x5a0>
    470c:	d1 2e       	mov	r13, r17
    470e:	04 ff       	sbrs	r16, 4
    4710:	0d c0       	rjmp	.+26     	; 0x472c <vfprintf+0x5be>
    4712:	fe 01       	movw	r30, r28
    4714:	ec 0d       	add	r30, r12
    4716:	f1 1d       	adc	r31, r1
    4718:	80 81       	ld	r24, Z
    471a:	80 33       	cpi	r24, 0x30	; 48
    471c:	11 f4       	brne	.+4      	; 0x4722 <vfprintf+0x5b4>
    471e:	09 7e       	andi	r16, 0xE9	; 233
    4720:	09 c0       	rjmp	.+18     	; 0x4734 <vfprintf+0x5c6>
    4722:	02 ff       	sbrs	r16, 2
    4724:	06 c0       	rjmp	.+12     	; 0x4732 <vfprintf+0x5c4>
    4726:	d3 94       	inc	r13
    4728:	d3 94       	inc	r13
    472a:	04 c0       	rjmp	.+8      	; 0x4734 <vfprintf+0x5c6>
    472c:	80 2f       	mov	r24, r16
    472e:	86 78       	andi	r24, 0x86	; 134
    4730:	09 f0       	breq	.+2      	; 0x4734 <vfprintf+0x5c6>
    4732:	d3 94       	inc	r13
    4734:	03 fd       	sbrc	r16, 3
    4736:	11 c0       	rjmp	.+34     	; 0x475a <vfprintf+0x5ec>
    4738:	00 ff       	sbrs	r16, 0
    473a:	06 c0       	rjmp	.+12     	; 0x4748 <vfprintf+0x5da>
    473c:	1c 2d       	mov	r17, r12
    473e:	d5 14       	cp	r13, r5
    4740:	80 f4       	brcc	.+32     	; 0x4762 <vfprintf+0x5f4>
    4742:	15 0d       	add	r17, r5
    4744:	1d 19       	sub	r17, r13
    4746:	0d c0       	rjmp	.+26     	; 0x4762 <vfprintf+0x5f4>
    4748:	d5 14       	cp	r13, r5
    474a:	58 f4       	brcc	.+22     	; 0x4762 <vfprintf+0x5f4>
    474c:	b7 01       	movw	r22, r14
    474e:	80 e2       	ldi	r24, 0x20	; 32
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4756:	d3 94       	inc	r13
    4758:	f7 cf       	rjmp	.-18     	; 0x4748 <vfprintf+0x5da>
    475a:	d5 14       	cp	r13, r5
    475c:	10 f4       	brcc	.+4      	; 0x4762 <vfprintf+0x5f4>
    475e:	5d 18       	sub	r5, r13
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <vfprintf+0x5f6>
    4762:	51 2c       	mov	r5, r1
    4764:	04 ff       	sbrs	r16, 4
    4766:	10 c0       	rjmp	.+32     	; 0x4788 <vfprintf+0x61a>
    4768:	b7 01       	movw	r22, r14
    476a:	80 e3       	ldi	r24, 0x30	; 48
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4772:	02 ff       	sbrs	r16, 2
    4774:	17 c0       	rjmp	.+46     	; 0x47a4 <vfprintf+0x636>
    4776:	01 fd       	sbrc	r16, 1
    4778:	03 c0       	rjmp	.+6      	; 0x4780 <vfprintf+0x612>
    477a:	88 e7       	ldi	r24, 0x78	; 120
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	02 c0       	rjmp	.+4      	; 0x4784 <vfprintf+0x616>
    4780:	88 e5       	ldi	r24, 0x58	; 88
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	b7 01       	movw	r22, r14
    4786:	0c c0       	rjmp	.+24     	; 0x47a0 <vfprintf+0x632>
    4788:	80 2f       	mov	r24, r16
    478a:	86 78       	andi	r24, 0x86	; 134
    478c:	59 f0       	breq	.+22     	; 0x47a4 <vfprintf+0x636>
    478e:	01 ff       	sbrs	r16, 1
    4790:	02 c0       	rjmp	.+4      	; 0x4796 <vfprintf+0x628>
    4792:	8b e2       	ldi	r24, 0x2B	; 43
    4794:	01 c0       	rjmp	.+2      	; 0x4798 <vfprintf+0x62a>
    4796:	80 e2       	ldi	r24, 0x20	; 32
    4798:	07 fd       	sbrc	r16, 7
    479a:	8d e2       	ldi	r24, 0x2D	; 45
    479c:	b7 01       	movw	r22, r14
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    47a4:	c1 16       	cp	r12, r17
    47a6:	38 f4       	brcc	.+14     	; 0x47b6 <vfprintf+0x648>
    47a8:	b7 01       	movw	r22, r14
    47aa:	80 e3       	ldi	r24, 0x30	; 48
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    47b2:	11 50       	subi	r17, 0x01	; 1
    47b4:	f7 cf       	rjmp	.-18     	; 0x47a4 <vfprintf+0x636>
    47b6:	ca 94       	dec	r12
    47b8:	f3 01       	movw	r30, r6
    47ba:	ec 0d       	add	r30, r12
    47bc:	f1 1d       	adc	r31, r1
    47be:	80 81       	ld	r24, Z
    47c0:	b7 01       	movw	r22, r14
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    47c8:	c1 10       	cpse	r12, r1
    47ca:	f5 cf       	rjmp	.-22     	; 0x47b6 <vfprintf+0x648>
    47cc:	15 c0       	rjmp	.+42     	; 0x47f8 <vfprintf+0x68a>
    47ce:	f4 e0       	ldi	r31, 0x04	; 4
    47d0:	f5 15       	cp	r31, r5
    47d2:	60 f5       	brcc	.+88     	; 0x482c <vfprintf+0x6be>
    47d4:	84 e0       	ldi	r24, 0x04	; 4
    47d6:	58 1a       	sub	r5, r24
    47d8:	93 fe       	sbrs	r9, 3
    47da:	1f c0       	rjmp	.+62     	; 0x481a <vfprintf+0x6ac>
    47dc:	01 11       	cpse	r16, r1
    47de:	27 c0       	rjmp	.+78     	; 0x482e <vfprintf+0x6c0>
    47e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    47e2:	23 ff       	sbrs	r18, 3
    47e4:	2a c0       	rjmp	.+84     	; 0x483a <vfprintf+0x6cc>
    47e6:	02 e7       	ldi	r16, 0x72	; 114
    47e8:	10 e0       	ldi	r17, 0x00	; 0
    47ea:	39 2d       	mov	r19, r9
    47ec:	30 71       	andi	r19, 0x10	; 16
    47ee:	93 2e       	mov	r9, r19
    47f0:	f8 01       	movw	r30, r16
    47f2:	84 91       	lpm	r24, Z
    47f4:	81 11       	cpse	r24, r1
    47f6:	24 c0       	rjmp	.+72     	; 0x4840 <vfprintf+0x6d2>
    47f8:	55 20       	and	r5, r5
    47fa:	09 f4       	brne	.+2      	; 0x47fe <vfprintf+0x690>
    47fc:	e4 cc       	rjmp	.-1592   	; 0x41c6 <vfprintf+0x58>
    47fe:	b7 01       	movw	r22, r14
    4800:	80 e2       	ldi	r24, 0x20	; 32
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4808:	5a 94       	dec	r5
    480a:	f6 cf       	rjmp	.-20     	; 0x47f8 <vfprintf+0x68a>
    480c:	f7 01       	movw	r30, r14
    480e:	86 81       	ldd	r24, Z+6	; 0x06
    4810:	97 81       	ldd	r25, Z+7	; 0x07
    4812:	26 c0       	rjmp	.+76     	; 0x4860 <vfprintf+0x6f2>
    4814:	8f ef       	ldi	r24, 0xFF	; 255
    4816:	9f ef       	ldi	r25, 0xFF	; 255
    4818:	23 c0       	rjmp	.+70     	; 0x4860 <vfprintf+0x6f2>
    481a:	b7 01       	movw	r22, r14
    481c:	80 e2       	ldi	r24, 0x20	; 32
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4824:	5a 94       	dec	r5
    4826:	51 10       	cpse	r5, r1
    4828:	f8 cf       	rjmp	.-16     	; 0x481a <vfprintf+0x6ac>
    482a:	d8 cf       	rjmp	.-80     	; 0x47dc <vfprintf+0x66e>
    482c:	51 2c       	mov	r5, r1
    482e:	b7 01       	movw	r22, r14
    4830:	80 2f       	mov	r24, r16
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    4838:	d3 cf       	rjmp	.-90     	; 0x47e0 <vfprintf+0x672>
    483a:	06 e7       	ldi	r16, 0x76	; 118
    483c:	10 e0       	ldi	r17, 0x00	; 0
    483e:	d5 cf       	rjmp	.-86     	; 0x47ea <vfprintf+0x67c>
    4840:	91 10       	cpse	r9, r1
    4842:	80 52       	subi	r24, 0x20	; 32
    4844:	b7 01       	movw	r22, r14
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <fputc>
    484c:	0f 5f       	subi	r16, 0xFF	; 255
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
    4850:	cf cf       	rjmp	.-98     	; 0x47f0 <vfprintf+0x682>
    4852:	23 e0       	ldi	r18, 0x03	; 3
    4854:	25 15       	cp	r18, r5
    4856:	10 f4       	brcc	.+4      	; 0x485c <vfprintf+0x6ee>
    4858:	83 e0       	ldi	r24, 0x03	; 3
    485a:	bd cf       	rjmp	.-134    	; 0x47d6 <vfprintf+0x668>
    485c:	51 2c       	mov	r5, r1
    485e:	c0 cf       	rjmp	.-128    	; 0x47e0 <vfprintf+0x672>
    4860:	60 96       	adiw	r28, 0x10	; 16
    4862:	e2 e1       	ldi	r30, 0x12	; 18
    4864:	0c 94 7e 25 	jmp	0x4afc	; 0x4afc <__epilogue_restores__>

00004868 <__floatunsisf>:
    4868:	e8 94       	clt
    486a:	09 c0       	rjmp	.+18     	; 0x487e <__floatsisf+0x12>

0000486c <__floatsisf>:
    486c:	97 fb       	bst	r25, 7
    486e:	3e f4       	brtc	.+14     	; 0x487e <__floatsisf+0x12>
    4870:	90 95       	com	r25
    4872:	80 95       	com	r24
    4874:	70 95       	com	r23
    4876:	61 95       	neg	r22
    4878:	7f 4f       	sbci	r23, 0xFF	; 255
    487a:	8f 4f       	sbci	r24, 0xFF	; 255
    487c:	9f 4f       	sbci	r25, 0xFF	; 255
    487e:	99 23       	and	r25, r25
    4880:	a9 f0       	breq	.+42     	; 0x48ac <__floatsisf+0x40>
    4882:	f9 2f       	mov	r31, r25
    4884:	96 e9       	ldi	r25, 0x96	; 150
    4886:	bb 27       	eor	r27, r27
    4888:	93 95       	inc	r25
    488a:	f6 95       	lsr	r31
    488c:	87 95       	ror	r24
    488e:	77 95       	ror	r23
    4890:	67 95       	ror	r22
    4892:	b7 95       	ror	r27
    4894:	f1 11       	cpse	r31, r1
    4896:	f8 cf       	rjmp	.-16     	; 0x4888 <__floatsisf+0x1c>
    4898:	fa f4       	brpl	.+62     	; 0x48d8 <__floatsisf+0x6c>
    489a:	bb 0f       	add	r27, r27
    489c:	11 f4       	brne	.+4      	; 0x48a2 <__floatsisf+0x36>
    489e:	60 ff       	sbrs	r22, 0
    48a0:	1b c0       	rjmp	.+54     	; 0x48d8 <__floatsisf+0x6c>
    48a2:	6f 5f       	subi	r22, 0xFF	; 255
    48a4:	7f 4f       	sbci	r23, 0xFF	; 255
    48a6:	8f 4f       	sbci	r24, 0xFF	; 255
    48a8:	9f 4f       	sbci	r25, 0xFF	; 255
    48aa:	16 c0       	rjmp	.+44     	; 0x48d8 <__floatsisf+0x6c>
    48ac:	88 23       	and	r24, r24
    48ae:	11 f0       	breq	.+4      	; 0x48b4 <__floatsisf+0x48>
    48b0:	96 e9       	ldi	r25, 0x96	; 150
    48b2:	11 c0       	rjmp	.+34     	; 0x48d6 <__floatsisf+0x6a>
    48b4:	77 23       	and	r23, r23
    48b6:	21 f0       	breq	.+8      	; 0x48c0 <__floatsisf+0x54>
    48b8:	9e e8       	ldi	r25, 0x8E	; 142
    48ba:	87 2f       	mov	r24, r23
    48bc:	76 2f       	mov	r23, r22
    48be:	05 c0       	rjmp	.+10     	; 0x48ca <__floatsisf+0x5e>
    48c0:	66 23       	and	r22, r22
    48c2:	71 f0       	breq	.+28     	; 0x48e0 <__floatsisf+0x74>
    48c4:	96 e8       	ldi	r25, 0x86	; 134
    48c6:	86 2f       	mov	r24, r22
    48c8:	70 e0       	ldi	r23, 0x00	; 0
    48ca:	60 e0       	ldi	r22, 0x00	; 0
    48cc:	2a f0       	brmi	.+10     	; 0x48d8 <__floatsisf+0x6c>
    48ce:	9a 95       	dec	r25
    48d0:	66 0f       	add	r22, r22
    48d2:	77 1f       	adc	r23, r23
    48d4:	88 1f       	adc	r24, r24
    48d6:	da f7       	brpl	.-10     	; 0x48ce <__floatsisf+0x62>
    48d8:	88 0f       	add	r24, r24
    48da:	96 95       	lsr	r25
    48dc:	87 95       	ror	r24
    48de:	97 f9       	bld	r25, 7
    48e0:	08 95       	ret

000048e2 <__mulsf3>:
    48e2:	0e 94 84 24 	call	0x4908	; 0x4908 <__mulsf3x>
    48e6:	0c 94 f5 24 	jmp	0x49ea	; 0x49ea <__fp_round>
    48ea:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__fp_pscA>
    48ee:	38 f0       	brcs	.+14     	; 0x48fe <__mulsf3+0x1c>
    48f0:	0e 94 ee 24 	call	0x49dc	; 0x49dc <__fp_pscB>
    48f4:	20 f0       	brcs	.+8      	; 0x48fe <__mulsf3+0x1c>
    48f6:	95 23       	and	r25, r21
    48f8:	11 f0       	breq	.+4      	; 0x48fe <__mulsf3+0x1c>
    48fa:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__fp_inf>
    48fe:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__fp_nan>
    4902:	11 24       	eor	r1, r1
    4904:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__fp_szero>

00004908 <__mulsf3x>:
    4908:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__fp_split3>
    490c:	70 f3       	brcs	.-36     	; 0x48ea <__mulsf3+0x8>

0000490e <__mulsf3_pse>:
    490e:	95 9f       	mul	r25, r21
    4910:	c1 f3       	breq	.-16     	; 0x4902 <__mulsf3+0x20>
    4912:	95 0f       	add	r25, r21
    4914:	50 e0       	ldi	r21, 0x00	; 0
    4916:	55 1f       	adc	r21, r21
    4918:	62 9f       	mul	r22, r18
    491a:	f0 01       	movw	r30, r0
    491c:	72 9f       	mul	r23, r18
    491e:	bb 27       	eor	r27, r27
    4920:	f0 0d       	add	r31, r0
    4922:	b1 1d       	adc	r27, r1
    4924:	63 9f       	mul	r22, r19
    4926:	aa 27       	eor	r26, r26
    4928:	f0 0d       	add	r31, r0
    492a:	b1 1d       	adc	r27, r1
    492c:	aa 1f       	adc	r26, r26
    492e:	64 9f       	mul	r22, r20
    4930:	66 27       	eor	r22, r22
    4932:	b0 0d       	add	r27, r0
    4934:	a1 1d       	adc	r26, r1
    4936:	66 1f       	adc	r22, r22
    4938:	82 9f       	mul	r24, r18
    493a:	22 27       	eor	r18, r18
    493c:	b0 0d       	add	r27, r0
    493e:	a1 1d       	adc	r26, r1
    4940:	62 1f       	adc	r22, r18
    4942:	73 9f       	mul	r23, r19
    4944:	b0 0d       	add	r27, r0
    4946:	a1 1d       	adc	r26, r1
    4948:	62 1f       	adc	r22, r18
    494a:	83 9f       	mul	r24, r19
    494c:	a0 0d       	add	r26, r0
    494e:	61 1d       	adc	r22, r1
    4950:	22 1f       	adc	r18, r18
    4952:	74 9f       	mul	r23, r20
    4954:	33 27       	eor	r19, r19
    4956:	a0 0d       	add	r26, r0
    4958:	61 1d       	adc	r22, r1
    495a:	23 1f       	adc	r18, r19
    495c:	84 9f       	mul	r24, r20
    495e:	60 0d       	add	r22, r0
    4960:	21 1d       	adc	r18, r1
    4962:	82 2f       	mov	r24, r18
    4964:	76 2f       	mov	r23, r22
    4966:	6a 2f       	mov	r22, r26
    4968:	11 24       	eor	r1, r1
    496a:	9f 57       	subi	r25, 0x7F	; 127
    496c:	50 40       	sbci	r21, 0x00	; 0
    496e:	9a f0       	brmi	.+38     	; 0x4996 <__mulsf3_pse+0x88>
    4970:	f1 f0       	breq	.+60     	; 0x49ae <__mulsf3_pse+0xa0>
    4972:	88 23       	and	r24, r24
    4974:	4a f0       	brmi	.+18     	; 0x4988 <__mulsf3_pse+0x7a>
    4976:	ee 0f       	add	r30, r30
    4978:	ff 1f       	adc	r31, r31
    497a:	bb 1f       	adc	r27, r27
    497c:	66 1f       	adc	r22, r22
    497e:	77 1f       	adc	r23, r23
    4980:	88 1f       	adc	r24, r24
    4982:	91 50       	subi	r25, 0x01	; 1
    4984:	50 40       	sbci	r21, 0x00	; 0
    4986:	a9 f7       	brne	.-22     	; 0x4972 <__mulsf3_pse+0x64>
    4988:	9e 3f       	cpi	r25, 0xFE	; 254
    498a:	51 05       	cpc	r21, r1
    498c:	80 f0       	brcs	.+32     	; 0x49ae <__mulsf3_pse+0xa0>
    498e:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__fp_inf>
    4992:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__fp_szero>
    4996:	5f 3f       	cpi	r21, 0xFF	; 255
    4998:	e4 f3       	brlt	.-8      	; 0x4992 <__mulsf3_pse+0x84>
    499a:	98 3e       	cpi	r25, 0xE8	; 232
    499c:	d4 f3       	brlt	.-12     	; 0x4992 <__mulsf3_pse+0x84>
    499e:	86 95       	lsr	r24
    49a0:	77 95       	ror	r23
    49a2:	67 95       	ror	r22
    49a4:	b7 95       	ror	r27
    49a6:	f7 95       	ror	r31
    49a8:	e7 95       	ror	r30
    49aa:	9f 5f       	subi	r25, 0xFF	; 255
    49ac:	c1 f7       	brne	.-16     	; 0x499e <__mulsf3_pse+0x90>
    49ae:	fe 2b       	or	r31, r30
    49b0:	88 0f       	add	r24, r24
    49b2:	91 1d       	adc	r25, r1
    49b4:	96 95       	lsr	r25
    49b6:	87 95       	ror	r24
    49b8:	97 f9       	bld	r25, 7
    49ba:	08 95       	ret

000049bc <__fp_inf>:
    49bc:	97 f9       	bld	r25, 7
    49be:	9f 67       	ori	r25, 0x7F	; 127
    49c0:	80 e8       	ldi	r24, 0x80	; 128
    49c2:	70 e0       	ldi	r23, 0x00	; 0
    49c4:	60 e0       	ldi	r22, 0x00	; 0
    49c6:	08 95       	ret

000049c8 <__fp_nan>:
    49c8:	9f ef       	ldi	r25, 0xFF	; 255
    49ca:	80 ec       	ldi	r24, 0xC0	; 192
    49cc:	08 95       	ret

000049ce <__fp_pscA>:
    49ce:	00 24       	eor	r0, r0
    49d0:	0a 94       	dec	r0
    49d2:	16 16       	cp	r1, r22
    49d4:	17 06       	cpc	r1, r23
    49d6:	18 06       	cpc	r1, r24
    49d8:	09 06       	cpc	r0, r25
    49da:	08 95       	ret

000049dc <__fp_pscB>:
    49dc:	00 24       	eor	r0, r0
    49de:	0a 94       	dec	r0
    49e0:	12 16       	cp	r1, r18
    49e2:	13 06       	cpc	r1, r19
    49e4:	14 06       	cpc	r1, r20
    49e6:	05 06       	cpc	r0, r21
    49e8:	08 95       	ret

000049ea <__fp_round>:
    49ea:	09 2e       	mov	r0, r25
    49ec:	03 94       	inc	r0
    49ee:	00 0c       	add	r0, r0
    49f0:	11 f4       	brne	.+4      	; 0x49f6 <__fp_round+0xc>
    49f2:	88 23       	and	r24, r24
    49f4:	52 f0       	brmi	.+20     	; 0x4a0a <__fp_round+0x20>
    49f6:	bb 0f       	add	r27, r27
    49f8:	40 f4       	brcc	.+16     	; 0x4a0a <__fp_round+0x20>
    49fa:	bf 2b       	or	r27, r31
    49fc:	11 f4       	brne	.+4      	; 0x4a02 <__fp_round+0x18>
    49fe:	60 ff       	sbrs	r22, 0
    4a00:	04 c0       	rjmp	.+8      	; 0x4a0a <__fp_round+0x20>
    4a02:	6f 5f       	subi	r22, 0xFF	; 255
    4a04:	7f 4f       	sbci	r23, 0xFF	; 255
    4a06:	8f 4f       	sbci	r24, 0xFF	; 255
    4a08:	9f 4f       	sbci	r25, 0xFF	; 255
    4a0a:	08 95       	ret

00004a0c <__fp_split3>:
    4a0c:	57 fd       	sbrc	r21, 7
    4a0e:	90 58       	subi	r25, 0x80	; 128
    4a10:	44 0f       	add	r20, r20
    4a12:	55 1f       	adc	r21, r21
    4a14:	59 f0       	breq	.+22     	; 0x4a2c <__fp_splitA+0x10>
    4a16:	5f 3f       	cpi	r21, 0xFF	; 255
    4a18:	71 f0       	breq	.+28     	; 0x4a36 <__fp_splitA+0x1a>
    4a1a:	47 95       	ror	r20

00004a1c <__fp_splitA>:
    4a1c:	88 0f       	add	r24, r24
    4a1e:	97 fb       	bst	r25, 7
    4a20:	99 1f       	adc	r25, r25
    4a22:	61 f0       	breq	.+24     	; 0x4a3c <__fp_splitA+0x20>
    4a24:	9f 3f       	cpi	r25, 0xFF	; 255
    4a26:	79 f0       	breq	.+30     	; 0x4a46 <__fp_splitA+0x2a>
    4a28:	87 95       	ror	r24
    4a2a:	08 95       	ret
    4a2c:	12 16       	cp	r1, r18
    4a2e:	13 06       	cpc	r1, r19
    4a30:	14 06       	cpc	r1, r20
    4a32:	55 1f       	adc	r21, r21
    4a34:	f2 cf       	rjmp	.-28     	; 0x4a1a <__fp_split3+0xe>
    4a36:	46 95       	lsr	r20
    4a38:	f1 df       	rcall	.-30     	; 0x4a1c <__fp_splitA>
    4a3a:	08 c0       	rjmp	.+16     	; 0x4a4c <__fp_splitA+0x30>
    4a3c:	16 16       	cp	r1, r22
    4a3e:	17 06       	cpc	r1, r23
    4a40:	18 06       	cpc	r1, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	f1 cf       	rjmp	.-30     	; 0x4a28 <__fp_splitA+0xc>
    4a46:	86 95       	lsr	r24
    4a48:	71 05       	cpc	r23, r1
    4a4a:	61 05       	cpc	r22, r1
    4a4c:	08 94       	sec
    4a4e:	08 95       	ret

00004a50 <__fp_zero>:
    4a50:	e8 94       	clt

00004a52 <__fp_szero>:
    4a52:	bb 27       	eor	r27, r27
    4a54:	66 27       	eor	r22, r22
    4a56:	77 27       	eor	r23, r23
    4a58:	cb 01       	movw	r24, r22
    4a5a:	97 f9       	bld	r25, 7
    4a5c:	08 95       	ret

00004a5e <__udivmodsi4>:
    4a5e:	a1 e2       	ldi	r26, 0x21	; 33
    4a60:	1a 2e       	mov	r1, r26
    4a62:	aa 1b       	sub	r26, r26
    4a64:	bb 1b       	sub	r27, r27
    4a66:	fd 01       	movw	r30, r26
    4a68:	0d c0       	rjmp	.+26     	; 0x4a84 <__udivmodsi4_ep>

00004a6a <__udivmodsi4_loop>:
    4a6a:	aa 1f       	adc	r26, r26
    4a6c:	bb 1f       	adc	r27, r27
    4a6e:	ee 1f       	adc	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	a2 17       	cp	r26, r18
    4a74:	b3 07       	cpc	r27, r19
    4a76:	e4 07       	cpc	r30, r20
    4a78:	f5 07       	cpc	r31, r21
    4a7a:	20 f0       	brcs	.+8      	; 0x4a84 <__udivmodsi4_ep>
    4a7c:	a2 1b       	sub	r26, r18
    4a7e:	b3 0b       	sbc	r27, r19
    4a80:	e4 0b       	sbc	r30, r20
    4a82:	f5 0b       	sbc	r31, r21

00004a84 <__udivmodsi4_ep>:
    4a84:	66 1f       	adc	r22, r22
    4a86:	77 1f       	adc	r23, r23
    4a88:	88 1f       	adc	r24, r24
    4a8a:	99 1f       	adc	r25, r25
    4a8c:	1a 94       	dec	r1
    4a8e:	69 f7       	brne	.-38     	; 0x4a6a <__udivmodsi4_loop>
    4a90:	60 95       	com	r22
    4a92:	70 95       	com	r23
    4a94:	80 95       	com	r24
    4a96:	90 95       	com	r25
    4a98:	9b 01       	movw	r18, r22
    4a9a:	ac 01       	movw	r20, r24
    4a9c:	bd 01       	movw	r22, r26
    4a9e:	cf 01       	movw	r24, r30
    4aa0:	08 95       	ret

00004aa2 <__tablejump2__>:
    4aa2:	ee 0f       	add	r30, r30
    4aa4:	ff 1f       	adc	r31, r31
    4aa6:	05 90       	lpm	r0, Z+
    4aa8:	f4 91       	lpm	r31, Z
    4aaa:	e0 2d       	mov	r30, r0
    4aac:	09 94       	ijmp

00004aae <__muluhisi3>:
    4aae:	0e 94 99 25 	call	0x4b32	; 0x4b32 <__umulhisi3>
    4ab2:	a5 9f       	mul	r26, r21
    4ab4:	90 0d       	add	r25, r0
    4ab6:	b4 9f       	mul	r27, r20
    4ab8:	90 0d       	add	r25, r0
    4aba:	a4 9f       	mul	r26, r20
    4abc:	80 0d       	add	r24, r0
    4abe:	91 1d       	adc	r25, r1
    4ac0:	11 24       	eor	r1, r1
    4ac2:	08 95       	ret

00004ac4 <__prologue_saves__>:
    4ac4:	2f 92       	push	r2
    4ac6:	3f 92       	push	r3
    4ac8:	4f 92       	push	r4
    4aca:	5f 92       	push	r5
    4acc:	6f 92       	push	r6
    4ace:	7f 92       	push	r7
    4ad0:	8f 92       	push	r8
    4ad2:	9f 92       	push	r9
    4ad4:	af 92       	push	r10
    4ad6:	bf 92       	push	r11
    4ad8:	cf 92       	push	r12
    4ada:	df 92       	push	r13
    4adc:	ef 92       	push	r14
    4ade:	ff 92       	push	r15
    4ae0:	0f 93       	push	r16
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	ca 1b       	sub	r28, r26
    4aee:	db 0b       	sbc	r29, r27
    4af0:	0f b6       	in	r0, 0x3f	; 63
    4af2:	f8 94       	cli
    4af4:	de bf       	out	0x3e, r29	; 62
    4af6:	0f be       	out	0x3f, r0	; 63
    4af8:	cd bf       	out	0x3d, r28	; 61
    4afa:	09 94       	ijmp

00004afc <__epilogue_restores__>:
    4afc:	2a 88       	ldd	r2, Y+18	; 0x12
    4afe:	39 88       	ldd	r3, Y+17	; 0x11
    4b00:	48 88       	ldd	r4, Y+16	; 0x10
    4b02:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b04:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b06:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b08:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b0e:	b9 84       	ldd	r11, Y+9	; 0x09
    4b10:	c8 84       	ldd	r12, Y+8	; 0x08
    4b12:	df 80       	ldd	r13, Y+7	; 0x07
    4b14:	ee 80       	ldd	r14, Y+6	; 0x06
    4b16:	fd 80       	ldd	r15, Y+5	; 0x05
    4b18:	0c 81       	ldd	r16, Y+4	; 0x04
    4b1a:	1b 81       	ldd	r17, Y+3	; 0x03
    4b1c:	aa 81       	ldd	r26, Y+2	; 0x02
    4b1e:	b9 81       	ldd	r27, Y+1	; 0x01
    4b20:	ce 0f       	add	r28, r30
    4b22:	d1 1d       	adc	r29, r1
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	f8 94       	cli
    4b28:	de bf       	out	0x3e, r29	; 62
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	cd bf       	out	0x3d, r28	; 61
    4b2e:	ed 01       	movw	r28, r26
    4b30:	08 95       	ret

00004b32 <__umulhisi3>:
    4b32:	a2 9f       	mul	r26, r18
    4b34:	b0 01       	movw	r22, r0
    4b36:	b3 9f       	mul	r27, r19
    4b38:	c0 01       	movw	r24, r0
    4b3a:	a3 9f       	mul	r26, r19
    4b3c:	70 0d       	add	r23, r0
    4b3e:	81 1d       	adc	r24, r1
    4b40:	11 24       	eor	r1, r1
    4b42:	91 1d       	adc	r25, r1
    4b44:	b2 9f       	mul	r27, r18
    4b46:	70 0d       	add	r23, r0
    4b48:	81 1d       	adc	r24, r1
    4b4a:	11 24       	eor	r1, r1
    4b4c:	91 1d       	adc	r25, r1
    4b4e:	08 95       	ret

00004b50 <__ftoa_engine>:
    4b50:	28 30       	cpi	r18, 0x08	; 8
    4b52:	08 f0       	brcs	.+2      	; 0x4b56 <__ftoa_engine+0x6>
    4b54:	27 e0       	ldi	r18, 0x07	; 7
    4b56:	33 27       	eor	r19, r19
    4b58:	da 01       	movw	r26, r20
    4b5a:	99 0f       	add	r25, r25
    4b5c:	31 1d       	adc	r19, r1
    4b5e:	87 fd       	sbrc	r24, 7
    4b60:	91 60       	ori	r25, 0x01	; 1
    4b62:	00 96       	adiw	r24, 0x00	; 0
    4b64:	61 05       	cpc	r22, r1
    4b66:	71 05       	cpc	r23, r1
    4b68:	39 f4       	brne	.+14     	; 0x4b78 <__ftoa_engine+0x28>
    4b6a:	32 60       	ori	r19, 0x02	; 2
    4b6c:	2e 5f       	subi	r18, 0xFE	; 254
    4b6e:	3d 93       	st	X+, r19
    4b70:	30 e3       	ldi	r19, 0x30	; 48
    4b72:	2a 95       	dec	r18
    4b74:	e1 f7       	brne	.-8      	; 0x4b6e <__ftoa_engine+0x1e>
    4b76:	08 95       	ret
    4b78:	9f 3f       	cpi	r25, 0xFF	; 255
    4b7a:	30 f0       	brcs	.+12     	; 0x4b88 <__ftoa_engine+0x38>
    4b7c:	80 38       	cpi	r24, 0x80	; 128
    4b7e:	71 05       	cpc	r23, r1
    4b80:	61 05       	cpc	r22, r1
    4b82:	09 f0       	breq	.+2      	; 0x4b86 <__ftoa_engine+0x36>
    4b84:	3c 5f       	subi	r19, 0xFC	; 252
    4b86:	3c 5f       	subi	r19, 0xFC	; 252
    4b88:	3d 93       	st	X+, r19
    4b8a:	91 30       	cpi	r25, 0x01	; 1
    4b8c:	08 f0       	brcs	.+2      	; 0x4b90 <__ftoa_engine+0x40>
    4b8e:	80 68       	ori	r24, 0x80	; 128
    4b90:	91 1d       	adc	r25, r1
    4b92:	df 93       	push	r29
    4b94:	cf 93       	push	r28
    4b96:	1f 93       	push	r17
    4b98:	0f 93       	push	r16
    4b9a:	ff 92       	push	r15
    4b9c:	ef 92       	push	r14
    4b9e:	19 2f       	mov	r17, r25
    4ba0:	98 7f       	andi	r25, 0xF8	; 248
    4ba2:	96 95       	lsr	r25
    4ba4:	e9 2f       	mov	r30, r25
    4ba6:	96 95       	lsr	r25
    4ba8:	96 95       	lsr	r25
    4baa:	e9 0f       	add	r30, r25
    4bac:	ff 27       	eor	r31, r31
    4bae:	ec 52       	subi	r30, 0x2C	; 44
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	99 27       	eor	r25, r25
    4bb4:	33 27       	eor	r19, r19
    4bb6:	ee 24       	eor	r14, r14
    4bb8:	ff 24       	eor	r15, r15
    4bba:	a7 01       	movw	r20, r14
    4bbc:	e7 01       	movw	r28, r14
    4bbe:	05 90       	lpm	r0, Z+
    4bc0:	08 94       	sec
    4bc2:	07 94       	ror	r0
    4bc4:	28 f4       	brcc	.+10     	; 0x4bd0 <__ftoa_engine+0x80>
    4bc6:	36 0f       	add	r19, r22
    4bc8:	e7 1e       	adc	r14, r23
    4bca:	f8 1e       	adc	r15, r24
    4bcc:	49 1f       	adc	r20, r25
    4bce:	51 1d       	adc	r21, r1
    4bd0:	66 0f       	add	r22, r22
    4bd2:	77 1f       	adc	r23, r23
    4bd4:	88 1f       	adc	r24, r24
    4bd6:	99 1f       	adc	r25, r25
    4bd8:	06 94       	lsr	r0
    4bda:	a1 f7       	brne	.-24     	; 0x4bc4 <__ftoa_engine+0x74>
    4bdc:	05 90       	lpm	r0, Z+
    4bde:	07 94       	ror	r0
    4be0:	28 f4       	brcc	.+10     	; 0x4bec <__ftoa_engine+0x9c>
    4be2:	e7 0e       	add	r14, r23
    4be4:	f8 1e       	adc	r15, r24
    4be6:	49 1f       	adc	r20, r25
    4be8:	56 1f       	adc	r21, r22
    4bea:	c1 1d       	adc	r28, r1
    4bec:	77 0f       	add	r23, r23
    4bee:	88 1f       	adc	r24, r24
    4bf0:	99 1f       	adc	r25, r25
    4bf2:	66 1f       	adc	r22, r22
    4bf4:	06 94       	lsr	r0
    4bf6:	a1 f7       	brne	.-24     	; 0x4be0 <__ftoa_engine+0x90>
    4bf8:	05 90       	lpm	r0, Z+
    4bfa:	07 94       	ror	r0
    4bfc:	28 f4       	brcc	.+10     	; 0x4c08 <__ftoa_engine+0xb8>
    4bfe:	f8 0e       	add	r15, r24
    4c00:	49 1f       	adc	r20, r25
    4c02:	56 1f       	adc	r21, r22
    4c04:	c7 1f       	adc	r28, r23
    4c06:	d1 1d       	adc	r29, r1
    4c08:	88 0f       	add	r24, r24
    4c0a:	99 1f       	adc	r25, r25
    4c0c:	66 1f       	adc	r22, r22
    4c0e:	77 1f       	adc	r23, r23
    4c10:	06 94       	lsr	r0
    4c12:	a1 f7       	brne	.-24     	; 0x4bfc <__ftoa_engine+0xac>
    4c14:	05 90       	lpm	r0, Z+
    4c16:	07 94       	ror	r0
    4c18:	20 f4       	brcc	.+8      	; 0x4c22 <__ftoa_engine+0xd2>
    4c1a:	49 0f       	add	r20, r25
    4c1c:	56 1f       	adc	r21, r22
    4c1e:	c7 1f       	adc	r28, r23
    4c20:	d8 1f       	adc	r29, r24
    4c22:	99 0f       	add	r25, r25
    4c24:	66 1f       	adc	r22, r22
    4c26:	77 1f       	adc	r23, r23
    4c28:	88 1f       	adc	r24, r24
    4c2a:	06 94       	lsr	r0
    4c2c:	a9 f7       	brne	.-22     	; 0x4c18 <__ftoa_engine+0xc8>
    4c2e:	84 91       	lpm	r24, Z
    4c30:	10 95       	com	r17
    4c32:	17 70       	andi	r17, 0x07	; 7
    4c34:	41 f0       	breq	.+16     	; 0x4c46 <__ftoa_engine+0xf6>
    4c36:	d6 95       	lsr	r29
    4c38:	c7 95       	ror	r28
    4c3a:	57 95       	ror	r21
    4c3c:	47 95       	ror	r20
    4c3e:	f7 94       	ror	r15
    4c40:	e7 94       	ror	r14
    4c42:	1a 95       	dec	r17
    4c44:	c1 f7       	brne	.-16     	; 0x4c36 <__ftoa_engine+0xe6>
    4c46:	ea e7       	ldi	r30, 0x7A	; 122
    4c48:	f0 e0       	ldi	r31, 0x00	; 0
    4c4a:	68 94       	set
    4c4c:	15 90       	lpm	r1, Z+
    4c4e:	15 91       	lpm	r17, Z+
    4c50:	35 91       	lpm	r19, Z+
    4c52:	65 91       	lpm	r22, Z+
    4c54:	95 91       	lpm	r25, Z+
    4c56:	05 90       	lpm	r0, Z+
    4c58:	7f e2       	ldi	r23, 0x2F	; 47
    4c5a:	73 95       	inc	r23
    4c5c:	e1 18       	sub	r14, r1
    4c5e:	f1 0a       	sbc	r15, r17
    4c60:	43 0b       	sbc	r20, r19
    4c62:	56 0b       	sbc	r21, r22
    4c64:	c9 0b       	sbc	r28, r25
    4c66:	d0 09       	sbc	r29, r0
    4c68:	c0 f7       	brcc	.-16     	; 0x4c5a <__ftoa_engine+0x10a>
    4c6a:	e1 0c       	add	r14, r1
    4c6c:	f1 1e       	adc	r15, r17
    4c6e:	43 1f       	adc	r20, r19
    4c70:	56 1f       	adc	r21, r22
    4c72:	c9 1f       	adc	r28, r25
    4c74:	d0 1d       	adc	r29, r0
    4c76:	7e f4       	brtc	.+30     	; 0x4c96 <__ftoa_engine+0x146>
    4c78:	70 33       	cpi	r23, 0x30	; 48
    4c7a:	11 f4       	brne	.+4      	; 0x4c80 <__ftoa_engine+0x130>
    4c7c:	8a 95       	dec	r24
    4c7e:	e6 cf       	rjmp	.-52     	; 0x4c4c <__ftoa_engine+0xfc>
    4c80:	e8 94       	clt
    4c82:	01 50       	subi	r16, 0x01	; 1
    4c84:	30 f0       	brcs	.+12     	; 0x4c92 <__ftoa_engine+0x142>
    4c86:	08 0f       	add	r16, r24
    4c88:	0a f4       	brpl	.+2      	; 0x4c8c <__ftoa_engine+0x13c>
    4c8a:	00 27       	eor	r16, r16
    4c8c:	02 17       	cp	r16, r18
    4c8e:	08 f4       	brcc	.+2      	; 0x4c92 <__ftoa_engine+0x142>
    4c90:	20 2f       	mov	r18, r16
    4c92:	23 95       	inc	r18
    4c94:	02 2f       	mov	r16, r18
    4c96:	7a 33       	cpi	r23, 0x3A	; 58
    4c98:	28 f0       	brcs	.+10     	; 0x4ca4 <__ftoa_engine+0x154>
    4c9a:	79 e3       	ldi	r23, 0x39	; 57
    4c9c:	7d 93       	st	X+, r23
    4c9e:	2a 95       	dec	r18
    4ca0:	e9 f7       	brne	.-6      	; 0x4c9c <__ftoa_engine+0x14c>
    4ca2:	10 c0       	rjmp	.+32     	; 0x4cc4 <__ftoa_engine+0x174>
    4ca4:	7d 93       	st	X+, r23
    4ca6:	2a 95       	dec	r18
    4ca8:	89 f6       	brne	.-94     	; 0x4c4c <__ftoa_engine+0xfc>
    4caa:	06 94       	lsr	r0
    4cac:	97 95       	ror	r25
    4cae:	67 95       	ror	r22
    4cb0:	37 95       	ror	r19
    4cb2:	17 95       	ror	r17
    4cb4:	17 94       	ror	r1
    4cb6:	e1 18       	sub	r14, r1
    4cb8:	f1 0a       	sbc	r15, r17
    4cba:	43 0b       	sbc	r20, r19
    4cbc:	56 0b       	sbc	r21, r22
    4cbe:	c9 0b       	sbc	r28, r25
    4cc0:	d0 09       	sbc	r29, r0
    4cc2:	98 f0       	brcs	.+38     	; 0x4cea <__ftoa_engine+0x19a>
    4cc4:	23 95       	inc	r18
    4cc6:	7e 91       	ld	r23, -X
    4cc8:	73 95       	inc	r23
    4cca:	7a 33       	cpi	r23, 0x3A	; 58
    4ccc:	08 f0       	brcs	.+2      	; 0x4cd0 <__ftoa_engine+0x180>
    4cce:	70 e3       	ldi	r23, 0x30	; 48
    4cd0:	7c 93       	st	X, r23
    4cd2:	20 13       	cpse	r18, r16
    4cd4:	b8 f7       	brcc	.-18     	; 0x4cc4 <__ftoa_engine+0x174>
    4cd6:	7e 91       	ld	r23, -X
    4cd8:	70 61       	ori	r23, 0x10	; 16
    4cda:	7d 93       	st	X+, r23
    4cdc:	30 f0       	brcs	.+12     	; 0x4cea <__ftoa_engine+0x19a>
    4cde:	83 95       	inc	r24
    4ce0:	71 e3       	ldi	r23, 0x31	; 49
    4ce2:	7d 93       	st	X+, r23
    4ce4:	70 e3       	ldi	r23, 0x30	; 48
    4ce6:	2a 95       	dec	r18
    4ce8:	e1 f7       	brne	.-8      	; 0x4ce2 <__ftoa_engine+0x192>
    4cea:	11 24       	eor	r1, r1
    4cec:	ef 90       	pop	r14
    4cee:	ff 90       	pop	r15
    4cf0:	0f 91       	pop	r16
    4cf2:	1f 91       	pop	r17
    4cf4:	cf 91       	pop	r28
    4cf6:	df 91       	pop	r29
    4cf8:	99 27       	eor	r25, r25
    4cfa:	87 fd       	sbrc	r24, 7
    4cfc:	90 95       	com	r25
    4cfe:	08 95       	ret

00004d00 <strnlen_P>:
    4d00:	fc 01       	movw	r30, r24
    4d02:	05 90       	lpm	r0, Z+
    4d04:	61 50       	subi	r22, 0x01	; 1
    4d06:	70 40       	sbci	r23, 0x00	; 0
    4d08:	01 10       	cpse	r0, r1
    4d0a:	d8 f7       	brcc	.-10     	; 0x4d02 <strnlen_P+0x2>
    4d0c:	80 95       	com	r24
    4d0e:	90 95       	com	r25
    4d10:	8e 0f       	add	r24, r30
    4d12:	9f 1f       	adc	r25, r31
    4d14:	08 95       	ret

00004d16 <strcpy>:
    4d16:	fb 01       	movw	r30, r22
    4d18:	dc 01       	movw	r26, r24
    4d1a:	01 90       	ld	r0, Z+
    4d1c:	0d 92       	st	X+, r0
    4d1e:	00 20       	and	r0, r0
    4d20:	e1 f7       	brne	.-8      	; 0x4d1a <strcpy+0x4>
    4d22:	08 95       	ret

00004d24 <strnlen>:
    4d24:	fc 01       	movw	r30, r24
    4d26:	61 50       	subi	r22, 0x01	; 1
    4d28:	70 40       	sbci	r23, 0x00	; 0
    4d2a:	01 90       	ld	r0, Z+
    4d2c:	01 10       	cpse	r0, r1
    4d2e:	d8 f7       	brcc	.-10     	; 0x4d26 <strnlen+0x2>
    4d30:	80 95       	com	r24
    4d32:	90 95       	com	r25
    4d34:	8e 0f       	add	r24, r30
    4d36:	9f 1f       	adc	r25, r31
    4d38:	08 95       	ret

00004d3a <fputc>:
    4d3a:	0f 93       	push	r16
    4d3c:	1f 93       	push	r17
    4d3e:	cf 93       	push	r28
    4d40:	df 93       	push	r29
    4d42:	fb 01       	movw	r30, r22
    4d44:	23 81       	ldd	r18, Z+3	; 0x03
    4d46:	21 fd       	sbrc	r18, 1
    4d48:	03 c0       	rjmp	.+6      	; 0x4d50 <fputc+0x16>
    4d4a:	8f ef       	ldi	r24, 0xFF	; 255
    4d4c:	9f ef       	ldi	r25, 0xFF	; 255
    4d4e:	2c c0       	rjmp	.+88     	; 0x4da8 <fputc+0x6e>
    4d50:	22 ff       	sbrs	r18, 2
    4d52:	16 c0       	rjmp	.+44     	; 0x4d80 <fputc+0x46>
    4d54:	46 81       	ldd	r20, Z+6	; 0x06
    4d56:	57 81       	ldd	r21, Z+7	; 0x07
    4d58:	24 81       	ldd	r18, Z+4	; 0x04
    4d5a:	35 81       	ldd	r19, Z+5	; 0x05
    4d5c:	42 17       	cp	r20, r18
    4d5e:	53 07       	cpc	r21, r19
    4d60:	44 f4       	brge	.+16     	; 0x4d72 <fputc+0x38>
    4d62:	a0 81       	ld	r26, Z
    4d64:	b1 81       	ldd	r27, Z+1	; 0x01
    4d66:	9d 01       	movw	r18, r26
    4d68:	2f 5f       	subi	r18, 0xFF	; 255
    4d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6c:	31 83       	std	Z+1, r19	; 0x01
    4d6e:	20 83       	st	Z, r18
    4d70:	8c 93       	st	X, r24
    4d72:	26 81       	ldd	r18, Z+6	; 0x06
    4d74:	37 81       	ldd	r19, Z+7	; 0x07
    4d76:	2f 5f       	subi	r18, 0xFF	; 255
    4d78:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7a:	37 83       	std	Z+7, r19	; 0x07
    4d7c:	26 83       	std	Z+6, r18	; 0x06
    4d7e:	14 c0       	rjmp	.+40     	; 0x4da8 <fputc+0x6e>
    4d80:	8b 01       	movw	r16, r22
    4d82:	ec 01       	movw	r28, r24
    4d84:	fb 01       	movw	r30, r22
    4d86:	00 84       	ldd	r0, Z+8	; 0x08
    4d88:	f1 85       	ldd	r31, Z+9	; 0x09
    4d8a:	e0 2d       	mov	r30, r0
    4d8c:	09 95       	icall
    4d8e:	89 2b       	or	r24, r25
    4d90:	e1 f6       	brne	.-72     	; 0x4d4a <fputc+0x10>
    4d92:	d8 01       	movw	r26, r16
    4d94:	16 96       	adiw	r26, 0x06	; 6
    4d96:	8d 91       	ld	r24, X+
    4d98:	9c 91       	ld	r25, X
    4d9a:	17 97       	sbiw	r26, 0x07	; 7
    4d9c:	01 96       	adiw	r24, 0x01	; 1
    4d9e:	17 96       	adiw	r26, 0x07	; 7
    4da0:	9c 93       	st	X, r25
    4da2:	8e 93       	st	-X, r24
    4da4:	16 97       	sbiw	r26, 0x06	; 6
    4da6:	ce 01       	movw	r24, r28
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	1f 91       	pop	r17
    4dae:	0f 91       	pop	r16
    4db0:	08 95       	ret

00004db2 <printf>:
    4db2:	a0 e0       	ldi	r26, 0x00	; 0
    4db4:	b0 e0       	ldi	r27, 0x00	; 0
    4db6:	ef ed       	ldi	r30, 0xDF	; 223
    4db8:	f6 e2       	ldi	r31, 0x26	; 38
    4dba:	0c 94 72 25 	jmp	0x4ae4	; 0x4ae4 <__prologue_saves__+0x20>
    4dbe:	ae 01       	movw	r20, r28
    4dc0:	4b 5f       	subi	r20, 0xFB	; 251
    4dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc4:	fa 01       	movw	r30, r20
    4dc6:	61 91       	ld	r22, Z+
    4dc8:	71 91       	ld	r23, Z+
    4dca:	af 01       	movw	r20, r30
    4dcc:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <__iob+0x2>
    4dd0:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <__iob+0x3>
    4dd4:	0e 94 b7 20 	call	0x416e	; 0x416e <vfprintf>
    4dd8:	e2 e0       	ldi	r30, 0x02	; 2
    4dda:	0c 94 8e 25 	jmp	0x4b1c	; 0x4b1c <__epilogue_restores__+0x20>

00004dde <sprintf>:
    4dde:	ae e0       	ldi	r26, 0x0E	; 14
    4de0:	b0 e0       	ldi	r27, 0x00	; 0
    4de2:	e5 ef       	ldi	r30, 0xF5	; 245
    4de4:	f6 e2       	ldi	r31, 0x26	; 38
    4de6:	0c 94 70 25 	jmp	0x4ae0	; 0x4ae0 <__prologue_saves__+0x1c>
    4dea:	0d 89       	ldd	r16, Y+21	; 0x15
    4dec:	1e 89       	ldd	r17, Y+22	; 0x16
    4dee:	86 e0       	ldi	r24, 0x06	; 6
    4df0:	8c 83       	std	Y+4, r24	; 0x04
    4df2:	1a 83       	std	Y+2, r17	; 0x02
    4df4:	09 83       	std	Y+1, r16	; 0x01
    4df6:	8f ef       	ldi	r24, 0xFF	; 255
    4df8:	9f e7       	ldi	r25, 0x7F	; 127
    4dfa:	9e 83       	std	Y+6, r25	; 0x06
    4dfc:	8d 83       	std	Y+5, r24	; 0x05
    4dfe:	ae 01       	movw	r20, r28
    4e00:	47 5e       	subi	r20, 0xE7	; 231
    4e02:	5f 4f       	sbci	r21, 0xFF	; 255
    4e04:	6f 89       	ldd	r22, Y+23	; 0x17
    4e06:	78 8d       	ldd	r23, Y+24	; 0x18
    4e08:	ce 01       	movw	r24, r28
    4e0a:	01 96       	adiw	r24, 0x01	; 1
    4e0c:	0e 94 b7 20 	call	0x416e	; 0x416e <vfprintf>
    4e10:	ef 81       	ldd	r30, Y+7	; 0x07
    4e12:	f8 85       	ldd	r31, Y+8	; 0x08
    4e14:	e0 0f       	add	r30, r16
    4e16:	f1 1f       	adc	r31, r17
    4e18:	10 82       	st	Z, r1
    4e1a:	2e 96       	adiw	r28, 0x0e	; 14
    4e1c:	e4 e0       	ldi	r30, 0x04	; 4
    4e1e:	0c 94 8c 25 	jmp	0x4b18	; 0x4b18 <__epilogue_restores__+0x1c>

00004e22 <__ultoa_invert>:
    4e22:	fa 01       	movw	r30, r20
    4e24:	aa 27       	eor	r26, r26
    4e26:	28 30       	cpi	r18, 0x08	; 8
    4e28:	51 f1       	breq	.+84     	; 0x4e7e <__ultoa_invert+0x5c>
    4e2a:	20 31       	cpi	r18, 0x10	; 16
    4e2c:	81 f1       	breq	.+96     	; 0x4e8e <__ultoa_invert+0x6c>
    4e2e:	e8 94       	clt
    4e30:	6f 93       	push	r22
    4e32:	6e 7f       	andi	r22, 0xFE	; 254
    4e34:	6e 5f       	subi	r22, 0xFE	; 254
    4e36:	7f 4f       	sbci	r23, 0xFF	; 255
    4e38:	8f 4f       	sbci	r24, 0xFF	; 255
    4e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e3c:	af 4f       	sbci	r26, 0xFF	; 255
    4e3e:	b1 e0       	ldi	r27, 0x01	; 1
    4e40:	3e d0       	rcall	.+124    	; 0x4ebe <__ultoa_invert+0x9c>
    4e42:	b4 e0       	ldi	r27, 0x04	; 4
    4e44:	3c d0       	rcall	.+120    	; 0x4ebe <__ultoa_invert+0x9c>
    4e46:	67 0f       	add	r22, r23
    4e48:	78 1f       	adc	r23, r24
    4e4a:	89 1f       	adc	r24, r25
    4e4c:	9a 1f       	adc	r25, r26
    4e4e:	a1 1d       	adc	r26, r1
    4e50:	68 0f       	add	r22, r24
    4e52:	79 1f       	adc	r23, r25
    4e54:	8a 1f       	adc	r24, r26
    4e56:	91 1d       	adc	r25, r1
    4e58:	a1 1d       	adc	r26, r1
    4e5a:	6a 0f       	add	r22, r26
    4e5c:	71 1d       	adc	r23, r1
    4e5e:	81 1d       	adc	r24, r1
    4e60:	91 1d       	adc	r25, r1
    4e62:	a1 1d       	adc	r26, r1
    4e64:	20 d0       	rcall	.+64     	; 0x4ea6 <__ultoa_invert+0x84>
    4e66:	09 f4       	brne	.+2      	; 0x4e6a <__ultoa_invert+0x48>
    4e68:	68 94       	set
    4e6a:	3f 91       	pop	r19
    4e6c:	2a e0       	ldi	r18, 0x0A	; 10
    4e6e:	26 9f       	mul	r18, r22
    4e70:	11 24       	eor	r1, r1
    4e72:	30 19       	sub	r19, r0
    4e74:	30 5d       	subi	r19, 0xD0	; 208
    4e76:	31 93       	st	Z+, r19
    4e78:	de f6       	brtc	.-74     	; 0x4e30 <__ultoa_invert+0xe>
    4e7a:	cf 01       	movw	r24, r30
    4e7c:	08 95       	ret
    4e7e:	46 2f       	mov	r20, r22
    4e80:	47 70       	andi	r20, 0x07	; 7
    4e82:	40 5d       	subi	r20, 0xD0	; 208
    4e84:	41 93       	st	Z+, r20
    4e86:	b3 e0       	ldi	r27, 0x03	; 3
    4e88:	0f d0       	rcall	.+30     	; 0x4ea8 <__ultoa_invert+0x86>
    4e8a:	c9 f7       	brne	.-14     	; 0x4e7e <__ultoa_invert+0x5c>
    4e8c:	f6 cf       	rjmp	.-20     	; 0x4e7a <__ultoa_invert+0x58>
    4e8e:	46 2f       	mov	r20, r22
    4e90:	4f 70       	andi	r20, 0x0F	; 15
    4e92:	40 5d       	subi	r20, 0xD0	; 208
    4e94:	4a 33       	cpi	r20, 0x3A	; 58
    4e96:	18 f0       	brcs	.+6      	; 0x4e9e <__ultoa_invert+0x7c>
    4e98:	49 5d       	subi	r20, 0xD9	; 217
    4e9a:	31 fd       	sbrc	r19, 1
    4e9c:	40 52       	subi	r20, 0x20	; 32
    4e9e:	41 93       	st	Z+, r20
    4ea0:	02 d0       	rcall	.+4      	; 0x4ea6 <__ultoa_invert+0x84>
    4ea2:	a9 f7       	brne	.-22     	; 0x4e8e <__ultoa_invert+0x6c>
    4ea4:	ea cf       	rjmp	.-44     	; 0x4e7a <__ultoa_invert+0x58>
    4ea6:	b4 e0       	ldi	r27, 0x04	; 4
    4ea8:	a6 95       	lsr	r26
    4eaa:	97 95       	ror	r25
    4eac:	87 95       	ror	r24
    4eae:	77 95       	ror	r23
    4eb0:	67 95       	ror	r22
    4eb2:	ba 95       	dec	r27
    4eb4:	c9 f7       	brne	.-14     	; 0x4ea8 <__ultoa_invert+0x86>
    4eb6:	00 97       	sbiw	r24, 0x00	; 0
    4eb8:	61 05       	cpc	r22, r1
    4eba:	71 05       	cpc	r23, r1
    4ebc:	08 95       	ret
    4ebe:	9b 01       	movw	r18, r22
    4ec0:	ac 01       	movw	r20, r24
    4ec2:	0a 2e       	mov	r0, r26
    4ec4:	06 94       	lsr	r0
    4ec6:	57 95       	ror	r21
    4ec8:	47 95       	ror	r20
    4eca:	37 95       	ror	r19
    4ecc:	27 95       	ror	r18
    4ece:	ba 95       	dec	r27
    4ed0:	c9 f7       	brne	.-14     	; 0x4ec4 <__ultoa_invert+0xa2>
    4ed2:	62 0f       	add	r22, r18
    4ed4:	73 1f       	adc	r23, r19
    4ed6:	84 1f       	adc	r24, r20
    4ed8:	95 1f       	adc	r25, r21
    4eda:	a0 1d       	adc	r26, r0
    4edc:	08 95       	ret

00004ede <_exit>:
    4ede:	f8 94       	cli

00004ee0 <__stop_program>:
    4ee0:	ff cf       	rjmp	.-2      	; 0x4ee0 <__stop_program>
