   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_7
  12               	__vector_7:
  13               	.LFB8:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <stdio.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** 
   6:main.c        **** #include "lcd.h"
   7:main.c        **** #include "spi.h"
   8:main.c        **** 
   9:main.c        **** #define MAX_VAL 20
  10:main.c        **** 
  11:main.c        **** volatile uint16_t value; //wartosc z przetwornika
  12:main.c        **** volatile uint8_t value_change; //czy mamy nowa wartosc?
  13:main.c        **** uint16_t values[MAX_VAL]; //tablica przechowywujaca osatanie 20 wynikow, bufor kolowy
  14:main.c        **** volatile uint8_t ind=0; //indeks do tablicy wskazujacy na nastepna wartosc
  15:main.c        **** volatile uint8_t full=0; //czy mamy komplet danych w tablicy
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** ISR(TIMER1_COMPA_vect) {
  15               		.loc 1 18 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a 2F93      		push r18
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 18, -4
  32 000c 3F93      		push r19
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 19, -5
  36 000e 4F93      		push r20
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 20, -6
  40 0010 5F93      		push r21
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 21, -7
  44 0012 6F93      		push r22
  45               	.LCFI6:
  46               		.cfi_def_cfa_offset 9
  47               		.cfi_offset 22, -8
  48 0014 7F93      		push r23
  49               	.LCFI7:
  50               		.cfi_def_cfa_offset 10
  51               		.cfi_offset 23, -9
  52 0016 8F93      		push r24
  53               	.LCFI8:
  54               		.cfi_def_cfa_offset 11
  55               		.cfi_offset 24, -10
  56 0018 9F93      		push r25
  57               	.LCFI9:
  58               		.cfi_def_cfa_offset 12
  59               		.cfi_offset 25, -11
  60 001a AF93      		push r26
  61               	.LCFI10:
  62               		.cfi_def_cfa_offset 13
  63               		.cfi_offset 26, -12
  64 001c BF93      		push r27
  65               	.LCFI11:
  66               		.cfi_def_cfa_offset 14
  67               		.cfi_offset 27, -13
  68 001e EF93      		push r30
  69               	.LCFI12:
  70               		.cfi_def_cfa_offset 15
  71               		.cfi_offset 30, -14
  72 0020 FF93      		push r31
  73               	.LCFI13:
  74               		.cfi_def_cfa_offset 16
  75               		.cfi_offset 31, -15
  76               	/* prologue: Signal */
  77               	/* frame size = 0 */
  78               	/* stack size = 15 */
  79               	.L__stack_usage = 15
  19:main.c        **** 	uint8_t tmp_val; //tymczasowa zmienna do odbierania danych
  20:main.c        **** 	SS_ENABLE();//wybieramy cs - komunikacja z przetwornikiem
  80               		.loc 1 20 0
  81 0022 C498      		cbi 0x18,4
  21:main.c        **** 	SPI_MasterTransmit(0x01); //Start
  82               		.loc 1 21 0
  83 0024 81E0      		ldi r24,lo8(1)
  84 0026 0E94 0000 		call SPI_MasterTransmit
  85               	.LVL0:
  22:main.c        **** 	tmp_val = SPI_MasterTransmit(0xa0); //SGL=1, MSBF=1, reszta=0
  86               		.loc 1 22 0
  87 002a 80EA      		ldi r24,lo8(-96)
  88 002c 0E94 0000 		call SPI_MasterTransmit
  89               	.LVL1:
  23:main.c        **** 	value = ((tmp_val & 0x0f)<<8);
  90               		.loc 1 23 0
  91 0030 8F70      		andi r24,lo8(15)
  92               	.LVL2:
  93 0032 90E0      		ldi r25,0
  94 0034 982F      		mov r25,r24
  95 0036 8827      		clr r24
  96 0038 9093 0000 		sts value+1,r25
  97 003c 8093 0000 		sts value,r24
  24:main.c        **** 	tmp_val = SPI_MasterTransmit(0x00);
  98               		.loc 1 24 0
  99 0040 80E0      		ldi r24,0
 100 0042 0E94 0000 		call SPI_MasterTransmit
 101               	.LVL3:
  25:main.c        **** 	value |= tmp_val;
 102               		.loc 1 25 0
 103 0046 2091 0000 		lds r18,value
 104 004a 3091 0000 		lds r19,value+1
 105 004e 282B      		or r18,r24
 106 0050 3093 0000 		sts value+1,r19
 107 0054 2093 0000 		sts value,r18
  26:main.c        **** 	SS_DISABLE();
 108               		.loc 1 26 0
 109 0058 C49A      		sbi 0x18,4
  27:main.c        **** 	ind%=MAX_VAL; //reszta z dzielenia, iterator
 110               		.loc 1 27 0
 111 005a 8091 0000 		lds r24,ind
 112               	.LVL4:
 113 005e 64E1      		ldi r22,lo8(20)
 114 0060 0E94 0000 		call __udivmodqi4
 115 0064 9093 0000 		sts ind,r25
  28:main.c        **** 	values[ind++] = value;
 116               		.loc 1 28 0
 117 0068 E091 0000 		lds r30,ind
 118 006c 81E0      		ldi r24,lo8(1)
 119 006e 8E0F      		add r24,r30
 120 0070 8093 0000 		sts ind,r24
 121 0074 8091 0000 		lds r24,value
 122 0078 9091 0000 		lds r25,value+1
 123 007c F0E0      		ldi r31,0
 124 007e EE0F      		lsl r30
 125 0080 FF1F      		rol r31
 126 0082 E050      		subi r30,lo8(-(values))
 127 0084 F040      		sbci r31,hi8(-(values))
 128 0086 9183      		std Z+1,r25
 129 0088 8083      		st Z,r24
  29:main.c        **** 	if(ind==MAX_VAL) full=1;
 130               		.loc 1 29 0
 131 008a 8091 0000 		lds r24,ind
 132 008e 8431      		cpi r24,lo8(20)
 133 0090 01F4      		brne .L2
 134               		.loc 1 29 0 is_stmt 0 discriminator 1
 135 0092 81E0      		ldi r24,lo8(1)
 136 0094 8093 0000 		sts full,r24
 137               	.L2:
  30:main.c        **** 	value_change=1;
 138               		.loc 1 30 0 is_stmt 1
 139 0098 81E0      		ldi r24,lo8(1)
 140 009a 8093 0000 		sts value_change,r24
 141               	/* epilogue start */
  31:main.c        **** }
 142               		.loc 1 31 0
 143 009e FF91      		pop r31
 144 00a0 EF91      		pop r30
 145 00a2 BF91      		pop r27
 146 00a4 AF91      		pop r26
 147 00a6 9F91      		pop r25
 148 00a8 8F91      		pop r24
 149 00aa 7F91      		pop r23
 150 00ac 6F91      		pop r22
 151 00ae 5F91      		pop r21
 152 00b0 4F91      		pop r20
 153 00b2 3F91      		pop r19
 154 00b4 2F91      		pop r18
 155 00b6 0F90      		pop r0
 156 00b8 0FBE      		out __SREG__,r0
 157 00ba 0F90      		pop r0
 158 00bc 1F90      		pop r1
 159 00be 1895      		reti
 160               		.cfi_endproc
 161               	.LFE8:
 163               	.global	__floatunsisf
 164               	.global	__mulsf3
 165               		.section	.rodata.str1.1,"aMS",@progbits,1
 166               	.LC0:
 167 0000 2564 3A20 		.string	"%d: %.3f V     "
 167      252E 3366 
 167      2056 2020 
 167      2020 2000 
 168               	.global	__addsf3
 169               	.global	__divsf3
 170               	.global	__floatsisf
 171               	.LC1:
 172 0010 4D65 616E 		.string	"Mean: %.3f V     "
 172      3A20 252E 
 172      3366 2056 
 172      2020 2020 
 172      2000 
 173               		.section	.text.startup,"ax",@progbits
 174               	.global	main
 176               	main:
 177               	.LFB9:
  32:main.c        **** int main(void){
 178               		.loc 1 32 0
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
  33:main.c        **** 	double voltage;
  34:main.c        **** 	double voltage_mean = 0;
  35:main.c        **** 	
  36:main.c        **** 	lcdinit();
 184               		.loc 1 36 0
 185 0000 0E94 0000 		call lcdinit
  37:main.c        **** 	lcd_write_text_P(PSTR("SPI A/D conv 2.1"));
 186               		.loc 1 37 0
 187 0004 80E0      		ldi r24,lo8(__c.2125)
 188 0006 90E0      		ldi r25,hi8(__c.2125)
 189 0008 0E94 0000 		call lcd_write_text_P
  38:main.c        **** 	lcd_set_xy(0,1);
 190               		.loc 1 38 0
 191 000c 61E0      		ldi r22,lo8(1)
 192 000e 80E0      		ldi r24,0
 193 0010 0E94 0000 		call lcd_set_xy
  39:main.c        **** 	lcd_write_text_P(PSTR("PSM.LABE.WF.PW"));
 194               		.loc 1 39 0
 195 0014 80E0      		ldi r24,lo8(__c.2127)
 196 0016 90E0      		ldi r25,hi8(__c.2127)
 197 0018 0E94 0000 		call lcd_write_text_P
  40:main.c        **** 	SPI_MasterInit();
 198               		.loc 1 40 0
 199 001c 0E94 0000 		call SPI_MasterInit
 200               	.LBB7:
 201               	.LBB8:
 202               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 203               		.loc 2 187 0
 204 0020 2FEF      		ldi r18,lo8(3199999)
 205 0022 83ED      		ldi r24,hi8(3199999)
 206 0024 90E3      		ldi r25,hlo8(3199999)
 207 0026 2150      	1:	subi r18,1
 208 0028 8040      		sbci r24,0
 209 002a 9040      		sbci r25,0
 210 002c 01F4      		brne 1b
 211 002e 00C0      		rjmp .
 212 0030 0000      		nop
 213               	.LBE8:
 214               	.LBE7:
  41:main.c        **** 	_delay_ms(1000);
  42:main.c        **** 	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);
 215               		.loc 1 42 0
 216 0032 8BE0      		ldi r24,lo8(11)
 217 0034 8EBD      		out 0x2e,r24
  43:main.c        **** 	OCR1A=14999;
 218               		.loc 1 43 0
 219 0036 87E9      		ldi r24,lo8(-105)
 220 0038 9AE3      		ldi r25,lo8(58)
 221 003a 9BBD      		out 0x2a+1,r25
 222 003c 8ABD      		out 0x2a,r24
  44:main.c        **** 	TIMSK=(1<<OCIE1A);
 223               		.loc 1 44 0
 224 003e 80E1      		ldi r24,lo8(16)
 225 0040 89BF      		out 0x39,r24
  45:main.c        **** 	sei();
 226               		.loc 1 45 0
 227               	/* #APP */
 228               	 ;  45 "main.c" 1
 229 0042 7894      		sei
 230               	 ;  0 "" 2
  46:main.c        **** 	
  47:main.c        **** 	
  48:main.c        **** 	while(1) {
  49:main.c        **** 		if (value_change) {
  50:main.c        **** 			voltage = 5*value/4096.0;
  51:main.c        **** 			value_change=0;
  52:main.c        **** 			
  53:main.c        **** 			lcd_set_xy(0,0);
  54:main.c        **** 			printf("%d: %.3f V     ", value, voltage);
 231               		.loc 1 54 0
 232               	/* #NOAPP */
 233 0044 85E0      		ldi r24,lo8(5)
 234 0046 982E      		mov r9,r24
 235 0048 90E0      		ldi r25,lo8(.LC0)
 236 004a E92E      		mov r14,r25
 237 004c 90E0      		ldi r25,hi8(.LC0)
 238 004e F92E      		mov r15,r25
 239 0050 20E0      		ldi r18,lo8(values+40)
 240 0052 C22E      		mov r12,r18
 241 0054 20E0      		ldi r18,hi8(values+40)
 242 0056 D22E      		mov r13,r18
  55:main.c        **** 			voltage = 0;
  56:main.c        **** 			
  57:main.c        **** 			for (register uint8_t i = 0; i < MAX_VAL; i++) {
  58:main.c        **** 				voltage += 5*values[i]/4096.0;
  59:main.c        **** 			}
  60:main.c        **** 			if(full) 
  61:main.c        **** 				voltage_mean = voltage/MAX_VAL;
  62:main.c        **** 			else
  63:main.c        **** 				voltage_mean = voltage/ind;
  64:main.c        **** 			lcd_set_xy(0,1);
  65:main.c        **** 			printf("Mean: %.3f V     ", voltage_mean);
 243               		.loc 1 65 0
 244 0058 00E0      		ldi r16,lo8(.LC1)
 245 005a 10E0      		ldi r17,hi8(.LC1)
 246               	.L5:
  49:main.c        **** 			voltage = 5*value/4096.0;
 247               		.loc 1 49 0
 248 005c 8091 0000 		lds r24,value_change
 249 0060 8823      		tst r24
 250 0062 01F0      		breq .L5
  50:main.c        **** 			value_change=0;
 251               		.loc 1 50 0
 252 0064 A090 0000 		lds r10,value
 253 0068 B090 0000 		lds r11,value+1
  51:main.c        **** 			
 254               		.loc 1 51 0
 255 006c 1092 0000 		sts value_change,__zero_reg__
  53:main.c        **** 			printf("%d: %.3f V     ", value, voltage);
 256               		.loc 1 53 0
 257 0070 60E0      		ldi r22,0
 258 0072 80E0      		ldi r24,0
 259 0074 0E94 0000 		call lcd_set_xy
  54:main.c        **** 			voltage = 0;
 260               		.loc 1 54 0
 261 0078 C091 0000 		lds r28,value
 262 007c D091 0000 		lds r29,value+1
 263 0080 9A9C      		mul r9,r10
 264 0082 B001      		movw r22,r0
 265 0084 9B9C      		mul r9,r11
 266 0086 700D      		add r23,r0
 267 0088 1124      		clr __zero_reg__
 268 008a 80E0      		ldi r24,0
 269 008c 90E0      		ldi r25,0
 270 008e 0E94 0000 		call __floatunsisf
 271 0092 20E0      		ldi r18,0
 272 0094 30E0      		ldi r19,0
 273 0096 40E8      		ldi r20,lo8(-128)
 274 0098 59E3      		ldi r21,lo8(57)
 275 009a 0E94 0000 		call __mulsf3
 276 009e 9F93      		push r25
 277               	.LCFI14:
 278               		.cfi_def_cfa_offset 3
 279 00a0 8F93      		push r24
 280               	.LCFI15:
 281               		.cfi_def_cfa_offset 4
 282 00a2 7F93      		push r23
 283               	.LCFI16:
 284               		.cfi_def_cfa_offset 5
 285 00a4 6F93      		push r22
 286               	.LCFI17:
 287               		.cfi_def_cfa_offset 6
 288 00a6 DF93      		push r29
 289               	.LCFI18:
 290               		.cfi_def_cfa_offset 7
 291 00a8 CF93      		push r28
 292               	.LCFI19:
 293               		.cfi_def_cfa_offset 8
 294 00aa FF92      		push r15
 295               	.LCFI20:
 296               		.cfi_def_cfa_offset 9
 297 00ac EF92      		push r14
 298               	.LCFI21:
 299               		.cfi_def_cfa_offset 10
 300 00ae 0E94 0000 		call printf
 301 00b2 C0E0      		ldi r28,lo8(values)
 302 00b4 D0E0      		ldi r29,hi8(values)
 303 00b6 8DB7      		in r24,__SP_L__
 304 00b8 9EB7      		in r25,__SP_H__
 305 00ba 0896      		adiw r24,8
 306 00bc 0FB6      		in __tmp_reg__,__SREG__
 307 00be F894      		cli
 308 00c0 9EBF      		out __SP_H__,r25
 309 00c2 0FBE      		out __SREG__,__tmp_reg__
 310 00c4 8DBF      		out __SP_L__,r24
 311               	.LCFI22:
 312               		.cfi_def_cfa_offset 2
  55:main.c        **** 			
 313               		.loc 1 55 0
 314 00c6 412C      		mov r4,__zero_reg__
 315 00c8 512C      		mov r5,__zero_reg__
 316 00ca 3201      		movw r6,r4
 317               	.L6:
 318               	.LBB9:
  58:main.c        **** 			}
 319               		.loc 1 58 0 discriminator 3
 320 00cc 8991      		ld r24,Y+
 321 00ce 9991      		ld r25,Y+
 322 00d0 989E      		mul r9,r24
 323 00d2 B001      		movw r22,r0
 324 00d4 999E      		mul r9,r25
 325 00d6 700D      		add r23,r0
 326 00d8 1124      		clr __zero_reg__
 327 00da 80E0      		ldi r24,0
 328 00dc 90E0      		ldi r25,0
 329 00de 0E94 0000 		call __floatunsisf
 330 00e2 20E0      		ldi r18,0
 331 00e4 30E0      		ldi r19,0
 332 00e6 40E8      		ldi r20,lo8(-128)
 333 00e8 59E3      		ldi r21,lo8(57)
 334 00ea 0E94 0000 		call __mulsf3
 335 00ee 9B01      		movw r18,r22
 336 00f0 AC01      		movw r20,r24
 337 00f2 C301      		movw r24,r6
 338 00f4 B201      		movw r22,r4
 339 00f6 0E94 0000 		call __addsf3
 340 00fa 2B01      		movw r4,r22
 341 00fc 3C01      		movw r6,r24
  57:main.c        **** 				voltage += 5*values[i]/4096.0;
 342               		.loc 1 57 0 discriminator 3
 343 00fe CC16      		cp r12,r28
 344 0100 DD06      		cpc r13,r29
 345 0102 01F4      		brne .L6
 346               	.LBE9:
  60:main.c        **** 				voltage_mean = voltage/MAX_VAL;
 347               		.loc 1 60 0
 348 0104 8091 0000 		lds r24,full
 349 0108 8823      		tst r24
 350 010a 01F0      		breq .L7
  61:main.c        **** 			else
 351               		.loc 1 61 0
 352 010c 20E0      		ldi r18,0
 353 010e 30E0      		ldi r19,0
 354 0110 40EA      		ldi r20,lo8(-96)
 355 0112 51E4      		ldi r21,lo8(65)
 356 0114 00C0      		rjmp .L13
 357               	.L7:
  63:main.c        **** 			lcd_set_xy(0,1);
 358               		.loc 1 63 0
 359 0116 6091 0000 		lds r22,ind
 360 011a 70E0      		ldi r23,0
 361 011c 80E0      		ldi r24,0
 362 011e 90E0      		ldi r25,0
 363 0120 0E94 0000 		call __floatsisf
 364 0124 9B01      		movw r18,r22
 365 0126 AC01      		movw r20,r24
 366               	.L13:
 367 0128 C301      		movw r24,r6
 368 012a B201      		movw r22,r4
 369 012c 0E94 0000 		call __divsf3
 370 0130 EB01      		movw r28,r22
 371 0132 B82E      		mov r11,r24
 372 0134 A92E      		mov r10,r25
  64:main.c        **** 			printf("Mean: %.3f V     ", voltage_mean);
 373               		.loc 1 64 0
 374 0136 61E0      		ldi r22,lo8(1)
 375 0138 80E0      		ldi r24,0
 376 013a 0E94 0000 		call lcd_set_xy
 377               		.loc 1 65 0
 378 013e AF92      		push r10
 379               	.LCFI23:
 380               		.cfi_def_cfa_offset 3
 381 0140 BF92      		push r11
 382               	.LCFI24:
 383               		.cfi_def_cfa_offset 4
 384 0142 DF93      		push r29
 385               	.LCFI25:
 386               		.cfi_def_cfa_offset 5
 387 0144 CF93      		push r28
 388               	.LCFI26:
 389               		.cfi_def_cfa_offset 6
 390 0146 1F93      		push r17
 391               	.LCFI27:
 392               		.cfi_def_cfa_offset 7
 393 0148 0F93      		push r16
 394               	.LCFI28:
 395               		.cfi_def_cfa_offset 8
 396 014a 0E94 0000 		call printf
 397 014e 0F90      		pop __tmp_reg__
 398 0150 0F90      		pop __tmp_reg__
 399 0152 0F90      		pop __tmp_reg__
 400 0154 0F90      		pop __tmp_reg__
 401 0156 0F90      		pop __tmp_reg__
 402 0158 0F90      		pop __tmp_reg__
 403               	.LCFI29:
 404               		.cfi_def_cfa_offset 2
 405 015a 00C0      		rjmp .L5
 406               		.cfi_endproc
 407               	.LFE9:
 409               		.section	.progmem.data,"a",@progbits
 412               	__c.2127:
 413 0000 5053 4D2E 		.string	"PSM.LABE.WF.PW"
 413      4C41 4245 
 413      2E57 462E 
 413      5057 00
 416               	__c.2125:
 417 000f 5350 4920 		.string	"SPI A/D conv 2.1"
 417      412F 4420 
 417      636F 6E76 
 417      2032 2E31 
 417      00
 418               	.global	full
 419               		.section .bss
 422               	full:
 423 0000 00        		.zero	1
 424               	.global	ind
 427               	ind:
 428 0001 00        		.zero	1
 429               		.comm	values,40,1
 430               		.comm	value_change,1,1
 431               		.comm	value,2,1
 432               		.text
 433               	.Letext0:
 434               		.file 3 "/usr/lib/avr/include/stdint.h"
 435               		.file 4 "spi.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMooX1g.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMooX1g.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMooX1g.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMooX1g.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMooX1g.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMooX1g.s:12     .text:0000000000000000 __vector_7
                            *COM*:0000000000000002 value
     /tmp/ccMooX1g.s:427    .bss:0000000000000001 ind
                            *COM*:0000000000000028 values
     /tmp/ccMooX1g.s:422    .bss:0000000000000000 full
                            *COM*:0000000000000001 value_change
     /tmp/ccMooX1g.s:176    .text.startup:0000000000000000 main
     /tmp/ccMooX1g.s:416    .progmem.data:000000000000000f __c.2125
     /tmp/ccMooX1g.s:412    .progmem.data:0000000000000000 __c.2127

UNDEFINED SYMBOLS
SPI_MasterTransmit
__udivmodqi4
__floatunsisf
__mulsf3
__addsf3
__divsf3
__floatsisf
lcdinit
lcd_write_text_P
lcd_set_xy
SPI_MasterInit
printf
__do_copy_data
__do_clear_bss
