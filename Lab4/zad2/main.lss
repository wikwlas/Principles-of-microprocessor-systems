
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000294  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080006c  0080006c  00000334  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000674  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000591  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017c  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000210  00000000  00000000  000014ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8a:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_7>:

volatile uint16_t liczba = 60;
volatile uint8_t t, s, d, j;


ISR(TIMER1_COMPA_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	if(!( SWITCH_PORT_INPUT & ( 1 << SWITCH) )) {
  a0:	9e 99       	sbic	0x13, 6	; 19
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <__vector_7+0x1e>
		liczba++;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	05 c0       	rjmp	.+10     	; 0xba <__vector_7+0x28>
	} else {
		liczba--;
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_10>:

ISR(TIMER0_COMP_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	static uint8_t digit = 0; //statyczna zmienna pamieta
	LED7SEG_DIGIT |= 0x0f; //zgaszenie wszystkich cyfr
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	8f 60       	ori	r24, 0x0F	; 15
  e4:	85 bb       	out	0x15, r24	; 21
	switch(digit) {
  e6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	59 f0       	breq	.+22     	; 0x104 <__vector_10+0x34>
  ee:	38 f0       	brcs	.+14     	; 0xfe <__vector_10+0x2e>
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	59 f0       	breq	.+22     	; 0x10a <__vector_10+0x3a>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	61 f4       	brne	.+24     	; 0x110 <__vector_10+0x40>
		case 0: LED7SEG_SEGMENT=j; break;
		case 1: LED7SEG_SEGMENT=d; break;
		case 2: LED7SEG_SEGMENT=s; break;
		case 3: LED7SEG_SEGMENT=t; break;
  f8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <t>
  fc:	08 c0       	rjmp	.+16     	; 0x10e <__vector_10+0x3e>

ISR(TIMER0_COMP_vect) {
	static uint8_t digit = 0; //statyczna zmienna pamieta
	LED7SEG_DIGIT |= 0x0f; //zgaszenie wszystkich cyfr
	switch(digit) {
		case 0: LED7SEG_SEGMENT=j; break;
  fe:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <j>
 102:	05 c0       	rjmp	.+10     	; 0x10e <__vector_10+0x3e>
		case 1: LED7SEG_SEGMENT=d; break;
 104:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <d>
 108:	02 c0       	rjmp	.+4      	; 0x10e <__vector_10+0x3e>
		case 2: LED7SEG_SEGMENT=s; break;
 10a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <s>
		case 3: LED7SEG_SEGMENT=t; break;
 10e:	82 bb       	out	0x12, r24	; 18
	}
	LED7SEG_DIGIT &= ~(1<<digit); //wlaczamy kolejna cyfre
 110:	25 b3       	in	r18, 0x15	; 21
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	00 90 6c 00 	lds	r0, 0x006C	; 0x80006c <__data_end>
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__vector_10+0x50>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <__vector_10+0x4c>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	85 bb       	out	0x15, r24	; 21
	digit++;
	digit %= 4; //aby zapetlaly sie 0-3
 12a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	83 70       	andi	r24, 0x03	; 3
 132:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <led7seg>:

void led7seg(uint16_t liczba) {
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	2a 97       	sbiw	r28, 0x0a	; 10
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	8c 01       	movw	r16, r24
	uint8_t digits_7seg[] = { 	~0x3f,//0
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	e2 e6       	ldi	r30, 0x62	; 98
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	de 01       	movw	r26, r28
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	01 90       	ld	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	8a 95       	dec	r24
 170:	e1 f7       	brne	.-8      	; 0x16a <led7seg+0x24>
								~0x7d, //6
								~0x07, //7
								~0x7f, //8
								~0x6f, //9
	};
	j=digits_7seg[liczba % 10];
 172:	2a e0       	ldi	r18, 0x0A	; 10
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	c8 01       	movw	r24, r16
 178:	b9 01       	movw	r22, r18
 17a:	0e 94 34 01 	call	0x268	; 0x268 <__udivmodhi4>
 17e:	e1 e0       	ldi	r30, 0x01	; 1
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	e8 0f       	add	r30, r24
 188:	f9 1f       	adc	r31, r25
 18a:	80 81       	ld	r24, Z
 18c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <j>
	liczba /= 10;
	d=digits_7seg[liczba % 10];
 190:	cb 01       	movw	r24, r22
 192:	b9 01       	movw	r22, r18
 194:	0e 94 34 01 	call	0x268	; 0x268 <__udivmodhi4>
 198:	e1 e0       	ldi	r30, 0x01	; 1
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ec 0f       	add	r30, r28
 19e:	fd 1f       	adc	r31, r29
 1a0:	e8 0f       	add	r30, r24
 1a2:	f9 1f       	adc	r31, r25
 1a4:	80 81       	ld	r24, Z
 1a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <d>
	liczba /= 10;
	s=digits_7seg[liczba % 10];
 1aa:	c8 01       	movw	r24, r16
 1ac:	64 e6       	ldi	r22, 0x64	; 100
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 34 01 	call	0x268	; 0x268 <__udivmodhi4>
 1b4:	cb 01       	movw	r24, r22
 1b6:	b9 01       	movw	r22, r18
 1b8:	0e 94 34 01 	call	0x268	; 0x268 <__udivmodhi4>
 1bc:	e1 e0       	ldi	r30, 0x01	; 1
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	e8 0f       	add	r30, r24
 1c6:	f9 1f       	adc	r31, r25
 1c8:	80 81       	ld	r24, Z
 1ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <s>
	liczba /= 10;
	t=digits_7seg[liczba % 10];
 1ce:	c8 01       	movw	r24, r16
 1d0:	68 ee       	ldi	r22, 0xE8	; 232
 1d2:	73 e0       	ldi	r23, 0x03	; 3
 1d4:	0e 94 34 01 	call	0x268	; 0x268 <__udivmodhi4>
 1d8:	cb 01       	movw	r24, r22
 1da:	b9 01       	movw	r22, r18
 1dc:	0e 94 34 01 	call	0x268	; 0x268 <__udivmodhi4>
 1e0:	e1 e0       	ldi	r30, 0x01	; 1
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	e8 0f       	add	r30, r24
 1ea:	f9 1f       	adc	r31, r25
 1ec:	80 81       	ld	r24, Z
 1ee:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <t>
}
 1f2:	2a 96       	adiw	r28, 0x0a	; 10
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <main>:


int main(void){
	LED_PORT_DIR |= (1 << LED) | (1 << BUZZER);
 208:	8a b3       	in	r24, 0x1a	; 26
 20a:	83 60       	ori	r24, 0x03	; 3
 20c:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = (1 << LED);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	8b bb       	out	0x1b, r24	; 27
	
	LED7SEG_DIGIT_DIR = 0x0f;
 212:	8f e0       	ldi	r24, 0x0F	; 15
 214:	84 bb       	out	0x14, r24	; 20
	LED7SEG_DIGIT = 0x0f;
 216:	85 bb       	out	0x15, r24	; 21
	
	SWITCH_PORT_DIR &= ~(1 << SWITCH);
 218:	a6 98       	cbi	0x14, 6	; 20
	SWITCH_PORT |= (1 << SWITCH);
 21a:	ae 9a       	sbi	0x15, 6	; 21
	
	LED_SEGMENT_DIR = 0xff;
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	81 bb       	out	0x11, r24	; 17
	LED_SEGMENT = 0xff;
 220:	82 bb       	out	0x12, r24	; 18
	
	TCCR0 |= (1 << WGM01) | (1 << CS02);
 222:	83 b7       	in	r24, 0x33	; 51
 224:	8c 60       	ori	r24, 0x0C	; 12
 226:	83 bf       	out	0x33, r24	; 51
	OCR0 = 124;
 228:	9c e7       	ldi	r25, 0x7C	; 124
 22a:	9c bf       	out	0x3c, r25	; 60
	
	TCCR1B |= (1 << WGM12) | (1 << CS12);
 22c:	8e b5       	in	r24, 0x2e	; 46
 22e:	8c 60       	ori	r24, 0x0C	; 12
 230:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 62499;
 232:	23 e2       	ldi	r18, 0x23	; 35
 234:	34 ef       	ldi	r19, 0xF4	; 244
 236:	3b bd       	out	0x2b, r19	; 43
 238:	2a bd       	out	0x2a, r18	; 42
	
	TIMSK |= (1 << OCIE0) | (1 << OCIE1A);
 23a:	89 b7       	in	r24, 0x39	; 57
 23c:	82 61       	ori	r24, 0x12	; 18
 23e:	89 bf       	out	0x39, r24	; 57
	OCR0 = 124;
 240:	9c bf       	out	0x3c, r25	; 60
	sei();
 242:	78 94       	sei
	while(1){
		led7seg(liczba);
 244:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 248:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 24c:	0e 94 a3 00 	call	0x146	; 0x146 <led7seg>
		if (liczba == 0) {
 250:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 254:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 258:	89 2b       	or	r24, r25
 25a:	a1 f7       	brne	.-24     	; 0x244 <main+0x3c>
			LED_PORT &= ~(1 << LED);
 25c:	d8 98       	cbi	0x1b, 0	; 27
			LED_PORT |= (1 << BUZZER);
 25e:	d9 9a       	sbi	0x1b, 1	; 27
			TCCR1B &= ~(1 << CS12);
 260:	8e b5       	in	r24, 0x2e	; 46
 262:	8b 7f       	andi	r24, 0xFB	; 251
 264:	8e bd       	out	0x2e, r24	; 46
 266:	ee cf       	rjmp	.-36     	; 0x244 <main+0x3c>

00000268 <__udivmodhi4>:
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	51 e1       	ldi	r21, 0x11	; 17
 26e:	07 c0       	rjmp	.+14     	; 0x27e <__udivmodhi4_ep>

00000270 <__udivmodhi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	a6 17       	cp	r26, r22
 276:	b7 07       	cpc	r27, r23
 278:	10 f0       	brcs	.+4      	; 0x27e <__udivmodhi4_ep>
 27a:	a6 1b       	sub	r26, r22
 27c:	b7 0b       	sbc	r27, r23

0000027e <__udivmodhi4_ep>:
 27e:	88 1f       	adc	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	5a 95       	dec	r21
 284:	a9 f7       	brne	.-22     	; 0x270 <__udivmodhi4_loop>
 286:	80 95       	com	r24
 288:	90 95       	com	r25
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
