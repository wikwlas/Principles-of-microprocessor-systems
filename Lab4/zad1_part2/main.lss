
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000dc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000170  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a6  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000529  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000df  00000000  00000000  00000cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000004c  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a7  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000108b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
#define LED PC0 // dioda LED podlaczona do PC0
#define SWITCH PD6 // switch podlaczony do PD6

volatile uint8_t status_led = 0; //stan wlaczenia led

ISR(TIMER1_COMPA_vect) {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	if(!( SWITCH_PORT_INPUT & ( 1 << SWITCH) )) {
  8a:	86 99       	sbic	0x10, 6	; 16
  8c:	06 c0       	rjmp	.+12     	; 0x9a <__vector_7+0x1e>
		status_led ^= 1;
  8e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <main>:
int main(void){
	LED_PORT_DIR = 1 << LED; // stan wyjsiowy na diodzie led
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	84 bb       	out	0x14, r24	; 20
	LED_PORT = 1 << LED; // wylaczenie swiecenia led
  ac:	85 bb       	out	0x15, r24	; 21
	
	SWITCH_PORT_DIR = 0; // stan wejsciowy na porcie switch
  ae:	11 ba       	out	0x11, r1	; 17
	SWITCH_PORT = 1 << SWITCH; //wlaczamy rezystor Pull-up
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	82 bb       	out	0x12, r24	; 18
	
	TCCR1A = 0; // stan domyslny timera tryb NORMAl
  b4:	1f bc       	out	0x2f, r1	; 47
	TIMSK = 1 << OCIE1A; //wlaczamy przerwanie compare match
  b6:	80 e1       	ldi	r24, 0x10	; 16
  b8:	89 bf       	out	0x39, r24	; 57
	
	OCR1A = 24999; //wartosc porownawcza, zliczenie do wartosci +1 
  ba:	87 ea       	ldi	r24, 0xA7	; 167
  bc:	91 e6       	ldi	r25, 0x61	; 97
  be:	9b bd       	out	0x2b, r25	; 43
  c0:	8a bd       	out	0x2a, r24	; 42
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // wlaczanie licznika poprzez wybor preskalera u nas 64
  c2:	8b e0       	ldi	r24, 0x0B	; 11
  c4:	8e bd       	out	0x2e, r24	; 46
	sei(); // wlaczanie globalnej flagi przerwan
  c6:	78 94       	sei
	
	
	while(1){
		if(status_led) LED_PORT &= ~(1 << LED); // zapalenie diody led
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	88 23       	and	r24, r24
  ce:	11 f0       	breq	.+4      	; 0xd4 <main+0x2c>
  d0:	a8 98       	cbi	0x15, 0	; 21
  d2:	fa cf       	rjmp	.-12     	; 0xc8 <main+0x20>
		else LED_PORT |= (1 << LED); // zgaszanie diody led
  d4:	a8 9a       	sbi	0x15, 0	; 21
  d6:	f8 cf       	rjmp	.-16     	; 0xc8 <main+0x20>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
