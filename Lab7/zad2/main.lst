   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_4
  12               	__vector_4:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** 
   5:main.c        **** #define SERVO_DDR DDRD
   6:main.c        **** #define SERVO PD5
   7:main.c        **** 
   8:main.c        **** #define LED_DDR DDRB
   9:main.c        **** #define LED PB3
  10:main.c        **** 
  11:main.c        **** #define WAVE 39999
  12:main.c        **** #define MID 2999
  13:main.c        **** #define MIN 999
  14:main.c        **** #define MAX 4999
  15:main.c        **** 
  16:main.c        **** ISR(TIMER2_COMP_vect) {
  15               		.loc 1 16 0
  16               		.cfi_startproc
  17 0000 1F92      		push r1
  18               	.LCFI0:
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 1, -2
  21 0002 0F92      		push r0
  22               	.LCFI1:
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 0, -3
  25 0004 0FB6      		in r0,__SREG__
  26 0006 0F92      		push r0
  27 0008 1124      		clr __zero_reg__
  28 000a 2F93      		push r18
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 18, -4
  32 000c 8F93      		push r24
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 24, -5
  36 000e 9F93      		push r25
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 25, -6
  40               	/* prologue: Signal */
  41               	/* frame size = 0 */
  42               	/* stack size = 6 */
  43               	.L__stack_usage = 6
  17:main.c        **** 	static uint8_t intensity = 1;
  18:main.c        **** 	static uint8_t dir = 0;
  19:main.c        **** 	if ((intensity==255) || (intensity==0))
  44               		.loc 1 19 0
  45 0010 9091 0000 		lds r25,intensity.1732
  46 0014 8FEF      		ldi r24,lo8(-1)
  47 0016 890F      		add r24,r25
  48 0018 8E3F      		cpi r24,lo8(-2)
  49 001a 00F0      		brlo .L2
  20:main.c        **** 		dir^=1;
  50               		.loc 1 20 0
  51 001c 2091 0000 		lds r18,dir.1733
  52 0020 81E0      		ldi r24,lo8(1)
  53 0022 8227      		eor r24,r18
  54 0024 8093 0000 		sts dir.1733,r24
  55               	.L2:
  21:main.c        **** 	
  22:main.c        **** 	OCR0=intensity;
  56               		.loc 1 22 0
  57 0028 9CBF      		out 0x3c,r25
  23:main.c        **** 	
  24:main.c        **** 	if(dir) intensity--;
  58               		.loc 1 24 0
  59 002a 9091 0000 		lds r25,dir.1733
  60 002e 8091 0000 		lds r24,intensity.1732
  61 0032 9923      		tst r25
  62 0034 01F0      		breq .L3
  63               		.loc 1 24 0 is_stmt 0 discriminator 1
  64 0036 8150      		subi r24,lo8(-(-1))
  65 0038 00C0      		rjmp .L5
  66               	.L3:
  25:main.c        **** 	else intensity++;
  67               		.loc 1 25 0 is_stmt 1
  68 003a 8F5F      		subi r24,lo8(-(1))
  69               	.L5:
  70 003c 8093 0000 		sts intensity.1732,r24
  71               	/* epilogue start */
  26:main.c        **** }
  72               		.loc 1 26 0
  73 0040 9F91      		pop r25
  74 0042 8F91      		pop r24
  75 0044 2F91      		pop r18
  76 0046 0F90      		pop r0
  77 0048 0FBE      		out __SREG__,r0
  78 004a 0F90      		pop r0
  79 004c 1F90      		pop r1
  80 004e 1895      		reti
  81               		.cfi_endproc
  82               	.LFE6:
  84               		.section	.text.startup,"ax",@progbits
  85               	.global	main
  87               	main:
  88               	.LFB7:
  27:main.c        **** int main(void){
  89               		.loc 1 27 0
  90               		.cfi_startproc
  91               	/* prologue: function */
  92               	/* frame size = 0 */
  93               	/* stack size = 0 */
  94               	.L__stack_usage = 0
  28:main.c        **** 	
  29:main.c        **** 	SERVO_DDR |= (1<<SERVO);
  95               		.loc 1 29 0
  96 0000 8D9A      		sbi 0x11,5
  30:main.c        **** 	LED_DDR |= (1<<LED);
  97               		.loc 1 30 0
  98 0002 BB9A      		sbi 0x17,3
  31:main.c        **** 	//Timer
  32:main.c        **** 	TCCR1A |= (1<<WGM11);
  99               		.loc 1 32 0
 100 0004 8FB5      		in r24,0x2f
 101 0006 8260      		ori r24,lo8(2)
 102 0008 8FBD      		out 0x2f,r24
  33:main.c        **** 	TCCR1B |= (1<<WGM13)|(1<<WGM12);
 103               		.loc 1 33 0
 104 000a 8EB5      		in r24,0x2e
 105 000c 8861      		ori r24,lo8(24)
 106 000e 8EBD      		out 0x2e,r24
  34:main.c        **** 	TCCR1A |= (1<<COM1A1);
 107               		.loc 1 34 0
 108 0010 8FB5      		in r24,0x2f
 109 0012 8068      		ori r24,lo8(-128)
 110 0014 8FBD      		out 0x2f,r24
  35:main.c        **** 	TCCR1B |= (1<<CS11);
 111               		.loc 1 35 0
 112 0016 8EB5      		in r24,0x2e
 113 0018 8260      		ori r24,lo8(2)
 114 001a 8EBD      		out 0x2e,r24
  36:main.c        **** 	
  37:main.c        **** 	ICR1 = WAVE;
 115               		.loc 1 37 0
 116 001c 8FE3      		ldi r24,lo8(63)
 117 001e 9CE9      		ldi r25,lo8(-100)
 118 0020 97BD      		out 0x26+1,r25
 119 0022 86BD      		out 0x26,r24
  38:main.c        **** 	TCCR0 |= (1<<WGM00)|(1<<WGM01);
 120               		.loc 1 38 0
 121 0024 83B7      		in r24,0x33
 122 0026 8864      		ori r24,lo8(72)
 123 0028 83BF      		out 0x33,r24
  39:main.c        **** 	TCCR0 |= (1<<COM01)|(1<<COM00);
 124               		.loc 1 39 0
 125 002a 83B7      		in r24,0x33
 126 002c 8063      		ori r24,lo8(48)
 127 002e 83BF      		out 0x33,r24
  40:main.c        **** 	TCCR0 |= (1<<CS01);
 128               		.loc 1 40 0
 129 0030 83B7      		in r24,0x33
 130 0032 8260      		ori r24,lo8(2)
 131 0034 83BF      		out 0x33,r24
  41:main.c        **** 	OCR0 = 0;
 132               		.loc 1 41 0
 133 0036 1CBE      		out 0x3c,__zero_reg__
  42:main.c        **** 	
  43:main.c        **** 	
  44:main.c        **** 	TCCR2 |= (1<<WGM21);
 134               		.loc 1 44 0
 135 0038 85B5      		in r24,0x25
 136 003a 8860      		ori r24,lo8(8)
 137 003c 85BD      		out 0x25,r24
  45:main.c        **** 	TCCR2=(1<<CS20)|(1<<CS21)|(1<<CS22);
 138               		.loc 1 45 0
 139 003e 87E0      		ldi r24,lo8(7)
 140 0040 85BD      		out 0x25,r24
  46:main.c        **** 	TIMSK |= (1<<OCIE2);
 141               		.loc 1 46 0
 142 0042 89B7      		in r24,0x39
 143 0044 8068      		ori r24,lo8(-128)
 144 0046 89BF      		out 0x39,r24
  47:main.c        **** 	OCR2 = 249;
 145               		.loc 1 47 0
 146 0048 89EF      		ldi r24,lo8(-7)
 147 004a 83BD      		out 0x23,r24
  48:main.c        **** 	
  49:main.c        **** 	sei();
 148               		.loc 1 49 0
 149               	/* #APP */
 150               	 ;  49 "main.c" 1
 151 004c 7894      		sei
 152               	 ;  0 "" 2
  50:main.c        **** 	
  51:main.c        **** 	OCR1A = MIN;
 153               		.loc 1 51 0
 154               	/* #NOAPP */
 155 004e 87EE      		ldi r24,lo8(-25)
 156 0050 93E0      		ldi r25,lo8(3)
 157 0052 9BBD      		out 0x2a+1,r25
 158 0054 8ABD      		out 0x2a,r24
 159               	.LVL0:
 160               	.LBB8:
 161               	.LBB9:
 162               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 163               		.loc 2 187 0
 164 0056 2FEF      		ldi r18,lo8(6399999)
 165 0058 87EA      		ldi r24,hi8(6399999)
 166 005a 91E6      		ldi r25,hlo8(6399999)
 167 005c 2150      	1:	subi r18,1
 168 005e 8040      		sbci r24,0
 169 0060 9040      		sbci r25,0
 170 0062 01F4      		brne 1b
 171 0064 00C0      		rjmp .
 172 0066 0000      		nop
 173               	.LVL1:
 174               	.L10:
 175               	.LBE9:
 176               	.LBE8:
  52:main.c        **** 	_delay_ms(2000);
  53:main.c        **** 	
  54:main.c        **** 	uint16_t i = MID;
  55:main.c        **** 	while(1){
  56:main.c        **** 		for (i = MIN; i < MAX; i++) {
 177               		.loc 1 56 0
 178 0068 87EE      		ldi r24,lo8(-25)
 179 006a 93E0      		ldi r25,lo8(3)
 180               	.LVL2:
 181               	.L8:
  57:main.c        **** 			OCR1A = i;
 182               		.loc 1 57 0 discriminator 3
 183 006c 9BBD      		out 0x2a+1,r25
 184 006e 8ABD      		out 0x2a,r24
 185               	.LVL3:
 186               	.LBB10:
 187               	.LBB11:
 188               		.loc 2 187 0 discriminator 3
 189 0070 EFE9      		ldi r30,lo8(3999)
 190 0072 FFE0      		ldi r31,hi8(3999)
 191 0074 3197      	1:	sbiw r30,1
 192 0076 01F4      		brne 1b
 193 0078 00C0      		rjmp .
 194 007a 0000      		nop
 195               	.LVL4:
 196               	.LBE11:
 197               	.LBE10:
  56:main.c        **** 			OCR1A = i;
 198               		.loc 1 56 0 discriminator 3
 199 007c 0196      		adiw r24,1
 200               	.LVL5:
 201 007e 8738      		cpi r24,-121
 202 0080 F3E1      		ldi r31,19
 203 0082 9F07      		cpc r25,r31
 204 0084 01F4      		brne .L8
 205               	.L9:
  58:main.c        **** 			_delay_ms(1);
  59:main.c        **** 		}
  60:main.c        **** 		for (i = MAX; i > MIN; i--) {
  61:main.c        **** 			OCR1A = i;
 206               		.loc 1 61 0 discriminator 3
 207 0086 9BBD      		out 0x2a+1,r25
 208 0088 8ABD      		out 0x2a,r24
 209               	.LVL6:
 210               	.LBB12:
 211               	.LBB13:
 212               		.loc 2 187 0 discriminator 3
 213 008a EFE9      		ldi r30,lo8(3999)
 214 008c FFE0      		ldi r31,hi8(3999)
 215 008e 3197      	1:	sbiw r30,1
 216 0090 01F4      		brne 1b
 217 0092 00C0      		rjmp .
 218 0094 0000      		nop
 219               	.LVL7:
 220               	.LBE13:
 221               	.LBE12:
  60:main.c        **** 			OCR1A = i;
 222               		.loc 1 60 0 discriminator 3
 223 0096 0197      		sbiw r24,1
 224               	.LVL8:
 225 0098 873E      		cpi r24,-25
 226 009a F3E0      		ldi r31,3
 227 009c 9F07      		cpc r25,r31
 228 009e 01F4      		brne .L9
 229 00a0 00C0      		rjmp .L10
 230               		.cfi_endproc
 231               	.LFE7:
 233               		.local	dir.1733
 234               		.comm	dir.1733,1,1
 235               		.data
 238               	intensity.1732:
 239 0000 01        		.byte	1
 240               		.text
 241               	.Letext0:
 242               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccCopJkX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccCopJkX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccCopJkX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccCopJkX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccCopJkX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccCopJkX.s:12     .text:0000000000000000 __vector_4
     /tmp/ccCopJkX.s:238    .data:0000000000000000 intensity.1732
                             .bss:0000000000000000 dir.1733
     /tmp/ccCopJkX.s:87     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
