   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 616E 676C 		.string	"angle"
  12      6500 
  13               	.global	__gtsf2
  14               	.global	__ltsf2
  15               	.global	__mulsf3
  16               	.global	__divsf3
  17               	.global	__addsf3
  18               	.global	__fixunssfsi
  19               	.LC1:
  20 0006 0D0A 4745 		.string	"\r\nGET: %d\r\n"
  20      543A 2025 
  20      640D 0A00 
  21               	.LC2:
  22 0012 0D0A 556E 		.string	"\r\nUnknown command\r\n"
  22      6B6E 6F77 
  22      6E20 636F 
  22      6D6D 616E 
  22      640D 0A00 
  23               		.section	.text.startup,"ax",@progbits
  24               	.global	main
  26               	main:
  27               	.LFB11:
  28               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <stdlib.h>
   6:main.c        **** #include <string.h>
   7:main.c        **** #include <ctype.h>
   8:main.c        **** #include "rs232.h"
   9:main.c        **** 
  10:main.c        **** #define SERVO_DDR DDRD
  11:main.c        **** #define SERVO PD5
  12:main.c        **** 
  13:main.c        **** 
  14:main.c        **** #define WAVE 39999
  15:main.c        **** #define MID 2999
  16:main.c        **** #define MIN 999
  17:main.c        **** #define MAX 4999
  18:main.c        **** #define COEF (MAX-MIN)/90.0
  19:main.c        **** 
  20:main.c        **** #define BAUD 1000000
  21:main.c        **** 
  22:main.c        **** 
  23:main.c        **** 
  24:main.c        **** int main(void){
  29               		.loc 1 24 0
  30               		.cfi_startproc
  31 0000 CF93      		push r28
  32               	.LCFI0:
  33               		.cfi_def_cfa_offset 3
  34               		.cfi_offset 28, -2
  35 0002 DF93      		push r29
  36               	.LCFI1:
  37               		.cfi_def_cfa_offset 4
  38               		.cfi_offset 29, -3
  39 0004 CDB7      		in r28,__SP_L__
  40 0006 DEB7      		in r29,__SP_H__
  41               	.LCFI2:
  42               		.cfi_def_cfa_register 28
  43 0008 6097      		sbiw r28,16
  44               	.LCFI3:
  45               		.cfi_def_cfa_offset 20
  46 000a 0FB6      		in __tmp_reg__,__SREG__
  47 000c F894      		cli
  48 000e DEBF      		out __SP_H__,r29
  49 0010 0FBE      		out __SREG__,__tmp_reg__
  50 0012 CDBF      		out __SP_L__,r28
  51               	/* prologue: function */
  52               	/* frame size = 16 */
  53               	/* stack size = 18 */
  54               	.L__stack_usage = 18
  55               	.LVL0:
  25:main.c        **** 	uint16_t servo = MID;
  26:main.c        **** 	double angle = 0;
  27:main.c        **** 	SERVO_DDR |= (1<<SERVO);
  56               		.loc 1 27 0
  57 0014 8D9A      		sbi 0x11,5
  28:main.c        **** 	char text[16];
  29:main.c        **** 	//Timer
  30:main.c        **** 	TCCR1A |= (1<<WGM11);
  58               		.loc 1 30 0
  59 0016 8FB5      		in r24,0x2f
  60 0018 8260      		ori r24,lo8(2)
  61 001a 8FBD      		out 0x2f,r24
  31:main.c        **** 	TCCR1B |= (1<<WGM13)|(1<<WGM12);
  62               		.loc 1 31 0
  63 001c 8EB5      		in r24,0x2e
  64 001e 8861      		ori r24,lo8(24)
  65 0020 8EBD      		out 0x2e,r24
  32:main.c        **** 	TCCR1A |= (1<<COM1A1);
  66               		.loc 1 32 0
  67 0022 8FB5      		in r24,0x2f
  68 0024 8068      		ori r24,lo8(-128)
  69 0026 8FBD      		out 0x2f,r24
  33:main.c        **** 	TCCR1B |= (1<<CS11);
  70               		.loc 1 33 0
  71 0028 8EB5      		in r24,0x2e
  72 002a 8260      		ori r24,lo8(2)
  73 002c 8EBD      		out 0x2e,r24
  34:main.c        **** 	
  35:main.c        **** 	ICR1 = WAVE;
  74               		.loc 1 35 0
  75 002e 8FE3      		ldi r24,lo8(63)
  76 0030 9CE9      		ldi r25,lo8(-100)
  77 0032 97BD      		out 0x26+1,r25
  78 0034 86BD      		out 0x26,r24
  36:main.c        **** 	
  37:main.c        **** 	USART_init();
  79               		.loc 1 37 0
  80 0036 0E94 0000 		call USART_init
  81               	.LVL1:
  38:main.c        **** 	sei();
  82               		.loc 1 38 0
  83               	/* #APP */
  84               	 ;  38 "main.c" 1
  85 003a 7894      		sei
  86               	 ;  0 "" 2
  39:main.c        **** 	
  40:main.c        **** 	OCR1A = MIN;
  87               		.loc 1 40 0
  88               	/* #NOAPP */
  89 003c 87EE      		ldi r24,lo8(-25)
  90 003e 93E0      		ldi r25,lo8(3)
  91 0040 9BBD      		out 0x2a+1,r25
  92 0042 8ABD      		out 0x2a,r24
  93               	.LVL2:
  94               	.LBB4:
  95               	.LBB5:
  96               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  97               		.loc 2 187 0
  98 0044 2FEF      		ldi r18,lo8(6399999)
  99 0046 87EA      		ldi r24,hi8(6399999)
 100 0048 91E6      		ldi r25,hlo8(6399999)
 101 004a 2150      	1:	subi r18,1
 102 004c 8040      		sbci r24,0
 103 004e 9040      		sbci r25,0
 104 0050 01F4      		brne 1b
 105 0052 00C0      		rjmp .
 106 0054 0000      		nop
 107               	.LBE5:
 108               	.LBE4:
  41:main.c        **** 	_delay_ms(2000);
  42:main.c        **** 	
  43:main.c        **** 	while(1){
  44:main.c        **** 		
  45:main.c        **** 		if(decode) {
  46:main.c        **** 			if (strncmp((void* )bufor, "angle", 5) == 0) {
  47:main.c        **** 				angle=atof((const char *)bufor+6);
  48:main.c        **** 				if (angle > 90.0) angle = 90;
  49:main.c        **** 				if (angle < -90.0) angle = -90;
  50:main.c        **** 				servo=(uint16_t)(MID+angle*COEF);
  51:main.c        **** 				sprintf(text, "\r\nGET: %d\r\n", servo);
 109               		.loc 1 51 0
 110 0056 00E0      		ldi r16,lo8(.LC1)
 111 0058 10E0      		ldi r17,hi8(.LC1)
 112 005a DE01      		movw r26,r28
 113 005c 1196      		adiw r26,1
 114 005e 5D01      		movw r10,r26
  52:main.c        **** 				USART_send(text);
  53:main.c        **** 				OCR1A=servo;
  54:main.c        **** 			}
  55:main.c        **** 			else USART_send("\r\nUnknown command\r\n");
  56:main.c        **** 			decode = 0;
  57:main.c        **** 			indeks = 0;
  58:main.c        **** 			memset((void *)bufor, 0, MAX_BUF);
 115               		.loc 1 58 0
 116 0060 20E5      		ldi r18,lo8(80)
 117 0062 922E      		mov r9,r18
 118               	.LVL3:
 119               	.L2:
  45:main.c        **** 			if (strncmp((void* )bufor, "angle", 5) == 0) {
 120               		.loc 1 45 0
 121 0064 8091 0000 		lds r24,decode
 122 0068 8823      		tst r24
 123 006a 01F0      		breq .L2
  46:main.c        **** 				angle=atof((const char *)bufor+6);
 124               		.loc 1 46 0
 125 006c 45E0      		ldi r20,lo8(5)
 126 006e 50E0      		ldi r21,0
 127 0070 60E0      		ldi r22,lo8(.LC0)
 128 0072 70E0      		ldi r23,hi8(.LC0)
 129 0074 80E0      		ldi r24,lo8(bufor)
 130 0076 90E0      		ldi r25,hi8(bufor)
 131 0078 0E94 0000 		call strncmp
 132               	.LVL4:
 133 007c 892B      		or r24,r25
 134 007e 01F0      		breq .+2
 135 0080 00C0      		rjmp .L3
  47:main.c        **** 				if (angle > 90.0) angle = 90;
 136               		.loc 1 47 0
 137 0082 80E0      		ldi r24,lo8(bufor+6)
 138 0084 90E0      		ldi r25,hi8(bufor+6)
 139 0086 0E94 0000 		call atof
 140               	.LVL5:
 141 008a 6B01      		movw r12,r22
 142 008c 7C01      		movw r14,r24
 143               	.LVL6:
  48:main.c        **** 				if (angle < -90.0) angle = -90;
 144               		.loc 1 48 0
 145 008e 20E0      		ldi r18,0
 146 0090 30E0      		ldi r19,0
 147 0092 44EB      		ldi r20,lo8(-76)
 148 0094 52E4      		ldi r21,lo8(66)
 149 0096 0E94 0000 		call __gtsf2
 150               	.LVL7:
 151 009a 1816      		cp __zero_reg__,r24
 152 009c 04F0      		brlt .L8
  49:main.c        **** 				servo=(uint16_t)(MID+angle*COEF);
 153               		.loc 1 49 0
 154 009e 20E0      		ldi r18,0
 155 00a0 30E0      		ldi r19,0
 156 00a2 44EB      		ldi r20,lo8(-76)
 157 00a4 52EC      		ldi r21,lo8(-62)
 158 00a6 C701      		movw r24,r14
 159 00a8 B601      		movw r22,r12
 160 00aa 0E94 0000 		call __ltsf2
 161               	.LVL8:
 162 00ae 87FF      		sbrs r24,7
 163 00b0 00C0      		rjmp .L4
 164 00b2 C12C      		mov r12,__zero_reg__
 165 00b4 D12C      		mov r13,__zero_reg__
 166 00b6 94EB      		ldi r25,lo8(-76)
 167 00b8 E92E      		mov r14,r25
 168 00ba 92EC      		ldi r25,lo8(-62)
 169 00bc F92E      		mov r15,r25
 170               	.LVL9:
 171 00be 00C0      		rjmp .L4
 172               	.LVL10:
 173               	.L8:
  48:main.c        **** 				if (angle < -90.0) angle = -90;
 174               		.loc 1 48 0
 175 00c0 C12C      		mov r12,__zero_reg__
 176 00c2 D12C      		mov r13,__zero_reg__
 177 00c4 84EB      		ldi r24,lo8(-76)
 178 00c6 E82E      		mov r14,r24
 179 00c8 82E4      		ldi r24,lo8(66)
 180 00ca F82E      		mov r15,r24
 181               	.LVL11:
 182               	.L4:
  50:main.c        **** 				sprintf(text, "\r\nGET: %d\r\n", servo);
 183               		.loc 1 50 0
 184 00cc 20E0      		ldi r18,0
 185 00ce 30E0      		ldi r19,0
 186 00d0 4AE7      		ldi r20,lo8(122)
 187 00d2 55E4      		ldi r21,lo8(69)
 188 00d4 C701      		movw r24,r14
 189 00d6 B601      		movw r22,r12
 190 00d8 0E94 0000 		call __mulsf3
 191               	.LVL12:
 192 00dc 20E0      		ldi r18,0
 193 00de 30E0      		ldi r19,0
 194 00e0 44EB      		ldi r20,lo8(-76)
 195 00e2 52E4      		ldi r21,lo8(66)
 196 00e4 0E94 0000 		call __divsf3
 197               	.LVL13:
 198 00e8 20E0      		ldi r18,0
 199 00ea 30E7      		ldi r19,lo8(112)
 200 00ec 4BE3      		ldi r20,lo8(59)
 201 00ee 55E4      		ldi r21,lo8(69)
 202 00f0 0E94 0000 		call __addsf3
 203               	.LVL14:
 204 00f4 0E94 0000 		call __fixunssfsi
 205               	.LVL15:
 206 00f8 6B01      		movw r12,r22
 207 00fa 7C01      		movw r14,r24
 208               	.LVL16:
  51:main.c        **** 				USART_send(text);
 209               		.loc 1 51 0
 210 00fc DF92      		push r13
 211 00fe 6F93      		push r22
 212 0100 1F93      		push r17
 213 0102 0F93      		push r16
 214 0104 BF92      		push r11
 215 0106 AF92      		push r10
 216 0108 0E94 0000 		call sprintf
 217               	.LVL17:
  52:main.c        **** 				OCR1A=servo;
 218               		.loc 1 52 0
 219 010c C501      		movw r24,r10
 220 010e 0E94 0000 		call USART_send
 221               	.LVL18:
  53:main.c        **** 			}
 222               		.loc 1 53 0
 223 0112 DBBC      		out 0x2a+1,r13
 224 0114 CABC      		out 0x2a,r12
 225 0116 0F90      		pop __tmp_reg__
 226 0118 0F90      		pop __tmp_reg__
 227 011a 0F90      		pop __tmp_reg__
 228 011c 0F90      		pop __tmp_reg__
 229 011e 0F90      		pop __tmp_reg__
 230 0120 0F90      		pop __tmp_reg__
 231 0122 00C0      		rjmp .L6
 232               	.LVL19:
 233               	.L3:
  55:main.c        **** 			decode = 0;
 234               		.loc 1 55 0
 235 0124 80E0      		ldi r24,lo8(.LC2)
 236 0126 90E0      		ldi r25,hi8(.LC2)
 237 0128 0E94 0000 		call USART_send
 238               	.LVL20:
 239               	.L6:
  56:main.c        **** 			indeks = 0;
 240               		.loc 1 56 0
 241 012c 1092 0000 		sts decode,__zero_reg__
  57:main.c        **** 			memset((void *)bufor, 0, MAX_BUF);
 242               		.loc 1 57 0
 243 0130 1092 0000 		sts indeks,__zero_reg__
 244               		.loc 1 58 0
 245 0134 E0E0      		ldi r30,lo8(bufor)
 246 0136 F0E0      		ldi r31,hi8(bufor)
 247 0138 DF01      		movw r26,r30
 248 013a 292D      		mov r18,r9
 249               		0:
 250 013c 1D92      		st X+,__zero_reg__
 251 013e 2A95      		dec r18
 252 0140 01F4      		brne 0b
 253 0142 00C0      		rjmp .L2
 254               		.cfi_endproc
 255               	.LFE11:
 257               		.text
 258               	.Letext0:
 259               		.file 3 "/usr/lib/avr/include/stdint.h"
 260               		.file 4 "rs232.h"
 261               		.file 5 "/usr/lib/avr/include/string.h"
 262               		.file 6 "/usr/lib/avr/include/stdlib.h"
 263               		.file 7 "/usr/lib/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZRX5vD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZRX5vD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZRX5vD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZRX5vD.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZRX5vD.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZRX5vD.s:26     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__gtsf2
__ltsf2
__mulsf3
__divsf3
__addsf3
__fixunssfsi
USART_init
decode
bufor
strncmp
atof
sprintf
USART_send
indeks
__do_copy_data
