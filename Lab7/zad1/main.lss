
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e2  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013b  00000000  00000000  00000e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002dc  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define MIN 1799
#define MAX 4199

int main(void){
	
	SERVO_DDR |= (1<<SERVO);
  6c:	8d 9a       	sbi	0x11, 5	; 17
	
	//Timer
	TCCR1A |= (1<<WGM11);
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	82 60       	ori	r24, 0x02	; 2
  72:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM13)|(1<<WGM12);
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	88 61       	ori	r24, 0x18	; 24
  78:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1A1);
  7a:	8f b5       	in	r24, 0x2f	; 47
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = WAVE;
  86:	8f e3       	ldi	r24, 0x3F	; 63
  88:	9c e9       	ldi	r25, 0x9C	; 156
  8a:	97 bd       	out	0x27, r25	; 39
  8c:	86 bd       	out	0x26, r24	; 38
	
	OCR1A = MID;
  8e:	87 eb       	ldi	r24, 0xB7	; 183
  90:	9b e0       	ldi	r25, 0x0B	; 11
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	67 ea       	ldi	r22, 0xA7	; 167
  9a:	71 e6       	ldi	r23, 0x61	; 97
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	60 40       	sbci	r22, 0x00	; 0
  a0:	70 40       	sbci	r23, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
	_delay_ms(2000);
	

	while(1){
		OCR1A = MIN;
  a8:	47 e0       	ldi	r20, 0x07	; 7
  aa:	57 e0       	ldi	r21, 0x07	; 7
		_delay_ms(1000);
		OCR1A = MID;
		_delay_ms(1000);
		OCR1A = MAX;
  ac:	27 e6       	ldi	r18, 0x67	; 103
  ae:	30 e1       	ldi	r19, 0x10	; 16
	OCR1A = MID;
	_delay_ms(2000);
	

	while(1){
		OCR1A = MIN;
  b0:	5b bd       	out	0x2b, r21	; 43
  b2:	4a bd       	out	0x2a, r20	; 42
  b4:	ef ef       	ldi	r30, 0xFF	; 255
  b6:	63 ed       	ldi	r22, 0xD3	; 211
  b8:	70 e3       	ldi	r23, 0x30	; 48
  ba:	e1 50       	subi	r30, 0x01	; 1
  bc:	60 40       	sbci	r22, 0x00	; 0
  be:	70 40       	sbci	r23, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
		_delay_ms(1000);
		OCR1A = MID;
  c6:	9b bd       	out	0x2b, r25	; 43
  c8:	8a bd       	out	0x2a, r24	; 42
  ca:	ef ef       	ldi	r30, 0xFF	; 255
  cc:	63 ed       	ldi	r22, 0xD3	; 211
  ce:	70 e3       	ldi	r23, 0x30	; 48
  d0:	e1 50       	subi	r30, 0x01	; 1
  d2:	60 40       	sbci	r22, 0x00	; 0
  d4:	70 40       	sbci	r23, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x64>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
		_delay_ms(1000);
		OCR1A = MAX;
  dc:	3b bd       	out	0x2b, r19	; 43
  de:	2a bd       	out	0x2a, r18	; 42
  e0:	ef ef       	ldi	r30, 0xFF	; 255
  e2:	63 ed       	ldi	r22, 0xD3	; 211
  e4:	70 e3       	ldi	r23, 0x30	; 48
  e6:	e1 50       	subi	r30, 0x01	; 1
  e8:	60 40       	sbci	r22, 0x00	; 0
  ea:	70 40       	sbci	r23, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x7a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x84>
  f0:	00 00       	nop
		_delay_ms(1000);
		OCR1A = MID;
  f2:	9b bd       	out	0x2b, r25	; 43
  f4:	8a bd       	out	0x2a, r24	; 42
  f6:	ef ef       	ldi	r30, 0xFF	; 255
  f8:	63 ed       	ldi	r22, 0xD3	; 211
  fa:	70 e3       	ldi	r23, 0x30	; 48
  fc:	e1 50       	subi	r30, 0x01	; 1
  fe:	60 40       	sbci	r22, 0x00	; 0
 100:	70 40       	sbci	r23, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x90>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x9a>
 106:	00 00       	nop
 108:	d3 cf       	rjmp	.-90     	; 0xb0 <main+0x44>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
