   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 7465 6D70 		.string	"temp"
  12      00
  13               	.LC1:
  14 0005 0D0A 543D 		.string	"\r\nT=%3d.%04d \337C"
  14      2533 642E 
  14      2530 3464 
  14      20DF 4300 
  15               	.LC2:
  16 0015 0D0A 556E 		.string	"\r\nUnknown command\r\n"
  16      6B6E 6F77 
  16      6E20 636F 
  16      6D6D 616E 
  16      640D 0A00 
  17               		.section	.text.startup,"ax",@progbits
  18               	.global	main
  20               	main:
  21               	.LFB12:
  22               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <stdio.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include "lcd.h"
   5:main.c        **** #include "i1wire.h"
   6:main.c        **** #include "ds18b20.h"
   7:main.c        **** #include "rs232.h"
   8:main.c        **** 
   9:main.c        **** int main(void){
  23               		.loc 1 9 0
  24               		.cfi_startproc
  25 0000 CF93      		push r28
  26               	.LCFI0:
  27               		.cfi_def_cfa_offset 3
  28               		.cfi_offset 28, -2
  29 0002 DF93      		push r29
  30               	.LCFI1:
  31               		.cfi_def_cfa_offset 4
  32               		.cfi_offset 29, -3
  33 0004 CDB7      		in r28,__SP_L__
  34 0006 DEB7      		in r29,__SP_H__
  35               	.LCFI2:
  36               		.cfi_def_cfa_register 28
  37 0008 6097      		sbiw r28,16
  38               	.LCFI3:
  39               		.cfi_def_cfa_offset 20
  40 000a 0FB6      		in __tmp_reg__,__SREG__
  41 000c F894      		cli
  42 000e DEBF      		out __SP_H__,r29
  43 0010 0FBE      		out __SREG__,__tmp_reg__
  44 0012 CDBF      		out __SP_L__,r28
  45               	/* prologue: function */
  46               	/* frame size = 16 */
  47               	/* stack size = 18 */
  48               	.L__stack_usage = 18
  10:main.c        **** 	int16_t temperature;
  11:main.c        **** 	lcdinit();
  49               		.loc 1 11 0
  50 0014 0E94 0000 		call lcdinit
  51               	.LVL0:
  12:main.c        **** 	DS18B20_init();
  52               		.loc 1 12 0
  53 0018 0E94 0000 		call DS18B20_init
  54               	.LVL1:
  13:main.c        **** 	
  14:main.c        **** 	
  15:main.c        **** 	
  16:main.c        **** 	
  17:main.c        **** 	char text[16];
  18:main.c        **** 	//Timer
  19:main.c        **** 	TCCR1A |= (1<<WGM11);
  55               		.loc 1 19 0
  56 001c 8FB5      		in r24,0x2f
  57 001e 8260      		ori r24,lo8(2)
  58 0020 8FBD      		out 0x2f,r24
  20:main.c        **** 	TCCR1B |= (1<<WGM13)|(1<<WGM12);
  59               		.loc 1 20 0
  60 0022 8EB5      		in r24,0x2e
  61 0024 8861      		ori r24,lo8(24)
  62 0026 8EBD      		out 0x2e,r24
  21:main.c        **** 	TCCR1A |= (1<<COM1A1);
  63               		.loc 1 21 0
  64 0028 8FB5      		in r24,0x2f
  65 002a 8068      		ori r24,lo8(-128)
  66 002c 8FBD      		out 0x2f,r24
  22:main.c        **** 	TCCR1B |= (1<<CS11);
  67               		.loc 1 22 0
  68 002e 8EB5      		in r24,0x2e
  69 0030 8260      		ori r24,lo8(2)
  70 0032 8EBD      		out 0x2e,r24
  23:main.c        **** 	
  24:main.c        **** 	USART_init();
  71               		.loc 1 24 0
  72 0034 0E94 0000 		call USART_init
  73               	.LVL2:
  25:main.c        **** 	sei();
  74               		.loc 1 25 0
  75               	/* #APP */
  76               	 ;  25 "main.c" 1
  77 0038 7894      		sei
  78               	 ;  0 "" 2
  79               	.LVL3:
  80               	/* #NOAPP */
  81               	.LBB4:
  82               	.LBB5:
  83               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  84               		.loc 2 187 0
  85 003a 2FEF      		ldi r18,lo8(6399999)
  86 003c 87EA      		ldi r24,hi8(6399999)
  87 003e 91E6      		ldi r25,hlo8(6399999)
  88 0040 2150      	1:	subi r18,1
  89 0042 8040      		sbci r24,0
  90 0044 9040      		sbci r25,0
  91 0046 01F4      		brne 1b
  92 0048 00C0      		rjmp .
  93 004a 0000      		nop
  94               	.LBE5:
  95               	.LBE4:
  26:main.c        **** 
  27:main.c        **** 	_delay_ms(2000);
  28:main.c        **** 	
  29:main.c        **** 	while(1){
  30:main.c        **** 		if(decode) {
  31:main.c        **** 			if (strncmp((void* )bufor, "temp", 4) == 0) {
  32:main.c        **** 				DS18B20_start();
  33:main.c        **** 				while( ! OW_check);
  34:main.c        **** 				temperature = DS18B20_read();
  35:main.c        **** 				//lcd_set_xy(0, 0);
  36:main.c        **** 				sprintf(text, "\r\nT=%3d.%04d \337C", temperature>>4, (temperature & 0x0f)*625);
  96               		.loc 1 36 0
  97 004c 31E7      		ldi r19,lo8(113)
  98 004e C32E      		mov r12,r19
  99 0050 32E0      		ldi r19,lo8(2)
 100 0052 D32E      		mov r13,r19
 101 0054 00E0      		ldi r16,lo8(.LC1)
 102 0056 10E0      		ldi r17,hi8(.LC1)
 103 0058 DE01      		movw r26,r28
 104 005a 1196      		adiw r26,1
 105 005c 7D01      		movw r14,r26
  37:main.c        **** 				//printf("T=%3d.%04d \337C     ", temperature>>4, (temperature & 0x0f)*625);
  38:main.c        **** 				USART_send(text);
  39:main.c        **** 				//lcd_set_xy(0, 1);
  40:main.c        **** 				//printf("T=%5.1f \337C       ", ((double)temperature)*0.0625);
  41:main.c        **** 			}
  42:main.c        **** 			else USART_send("\r\nUnknown command\r\n");
  43:main.c        **** 			decode = 0;
  44:main.c        **** 			indeks = 0;
  45:main.c        **** 			memset((void *)bufor, 0, MAX_BUF);
 106               		.loc 1 45 0
 107 005e 40E5      		ldi r20,lo8(80)
 108 0060 B42E      		mov r11,r20
 109               	.L2:
  30:main.c        **** 			if (strncmp((void* )bufor, "temp", 4) == 0) {
 110               		.loc 1 30 0
 111 0062 8091 0000 		lds r24,decode
 112 0066 8823      		tst r24
 113 0068 01F0      		breq .L2
  31:main.c        **** 				DS18B20_start();
 114               		.loc 1 31 0
 115 006a 44E0      		ldi r20,lo8(4)
 116 006c 50E0      		ldi r21,0
 117 006e 60E0      		ldi r22,lo8(.LC0)
 118 0070 70E0      		ldi r23,hi8(.LC0)
 119 0072 80E0      		ldi r24,lo8(bufor)
 120 0074 90E0      		ldi r25,hi8(bufor)
 121 0076 0E94 0000 		call strncmp
 122               	.LVL4:
 123 007a 892B      		or r24,r25
 124 007c 01F4      		brne .L3
  32:main.c        **** 				while( ! OW_check);
 125               		.loc 1 32 0
 126 007e 0E94 0000 		call DS18B20_start
 127               	.LVL5:
 128               	.L4:
  33:main.c        **** 				temperature = DS18B20_read();
 129               		.loc 1 33 0 discriminator 1
 130 0082 B39B      		sbis 0x16,3
 131 0084 00C0      		rjmp .L4
  34:main.c        **** 				//lcd_set_xy(0, 0);
 132               		.loc 1 34 0
 133 0086 0E94 0000 		call DS18B20_read
 134               	.LVL6:
  36:main.c        **** 				//printf("T=%3d.%04d \337C     ", temperature>>4, (temperature & 0x0f)*625);
 135               		.loc 1 36 0
 136 008a AC01      		movw r20,r24
 137 008c 4F70      		andi r20,15
 138 008e 5527      		clr r21
 139 0090 4C9D      		mul r20,r12
 140 0092 9001      		movw r18,r0
 141 0094 4D9D      		mul r20,r13
 142 0096 300D      		add r19,r0
 143 0098 5C9D      		mul r21,r12
 144 009a 300D      		add r19,r0
 145 009c 1124      		clr r1
 146 009e 3F93      		push r19
 147 00a0 2F93      		push r18
 148 00a2 24E0      		ldi r18,4
 149               		1:
 150 00a4 9595      		asr r25
 151 00a6 8795      		ror r24
 152 00a8 2A95      		dec r18
 153 00aa 01F4      		brne 1b
 154               	.LVL7:
 155 00ac 9F93      		push r25
 156 00ae 8F93      		push r24
 157 00b0 1F93      		push r17
 158 00b2 0F93      		push r16
 159 00b4 FF92      		push r15
 160 00b6 EF92      		push r14
 161 00b8 0E94 0000 		call sprintf
 162               	.LVL8:
  38:main.c        **** 				//lcd_set_xy(0, 1);
 163               		.loc 1 38 0
 164 00bc C701      		movw r24,r14
 165 00be 0E94 0000 		call USART_send
 166               	.LVL9:
 167 00c2 0FB6      		in __tmp_reg__,__SREG__
 168 00c4 F894      		cli
 169 00c6 DEBF      		out __SP_H__,r29
 170 00c8 0FBE      		out __SREG__,__tmp_reg__
 171 00ca CDBF      		out __SP_L__,r28
 172 00cc 00C0      		rjmp .L5
 173               	.L3:
  42:main.c        **** 			decode = 0;
 174               		.loc 1 42 0
 175 00ce 80E0      		ldi r24,lo8(.LC2)
 176 00d0 90E0      		ldi r25,hi8(.LC2)
 177 00d2 0E94 0000 		call USART_send
 178               	.LVL10:
 179               	.L5:
  43:main.c        **** 			indeks = 0;
 180               		.loc 1 43 0
 181 00d6 1092 0000 		sts decode,__zero_reg__
  44:main.c        **** 			memset((void *)bufor, 0, MAX_BUF);
 182               		.loc 1 44 0
 183 00da 1092 0000 		sts indeks,__zero_reg__
 184               		.loc 1 45 0
 185 00de E0E0      		ldi r30,lo8(bufor)
 186 00e0 F0E0      		ldi r31,hi8(bufor)
 187 00e2 DF01      		movw r26,r30
 188 00e4 2B2D      		mov r18,r11
 189               		0:
 190 00e6 1D92      		st X+,__zero_reg__
 191 00e8 2A95      		dec r18
 192 00ea 01F4      		brne 0b
 193 00ec 00C0      		rjmp .L2
 194               		.cfi_endproc
 195               	.LFE12:
 197               		.text
 198               	.Letext0:
 199               		.file 3 "/usr/lib/avr/include/stdint.h"
 200               		.file 4 "rs232.h"
 201               		.file 5 "lcd.h"
 202               		.file 6 "ds18b20.h"
 203               		.file 7 "/usr/lib/avr/include/string.h"
 204               		.file 8 "/usr/lib/avr/include/stdio.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccB52enj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccB52enj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccB52enj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccB52enj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccB52enj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccB52enj.s:20     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
lcdinit
DS18B20_init
USART_init
decode
bufor
strncmp
DS18B20_start
DS18B20_read
sprintf
USART_send
indeks
__do_copy_data
