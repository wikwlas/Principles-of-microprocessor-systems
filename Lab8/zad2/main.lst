   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC1:
  12 0000 4865 6C6C 		.string	"Hello"
  12      6F00 
  13               	.LC2:
  14 0006 4279 7465 		.string	"Byte: 0x%02x=%c"
  14      3A20 3078 
  14      2530 3278 
  14      3D25 6300 
  15               	.LC3:
  16 0016 2573 00   		.string	"%s"
  17               	.LC0:
  18 0019 4865 6C6C 		.string	"Hello World!"
  18      6F20 576F 
  18      726C 6421 
  18      00
  19               		.section	.text.startup,"ax",@progbits
  20               	.global	main
  22               	main:
  23               	.LFB8:
  24               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include <string.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include "lcd.h"
   6:main.c        **** #include "twi.h"
   7:main.c        **** #include "eeprom.h"
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** #define MAXBUF 256
  11:main.c        **** 
  12:main.c        **** 
  13:main.c        **** int main(void){
  25               		.loc 1 13 0
  26               		.cfi_startproc
  27 0000 CF93      		push r28
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30               		.cfi_offset 28, -2
  31 0002 DF93      		push r29
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34               		.cfi_offset 29, -3
  35 0004 CDB7      		in r28,__SP_L__
  36 0006 DEB7      		in r29,__SP_H__
  37               	.LCFI2:
  38               		.cfi_def_cfa_register 28
  39 0008 CD50      		subi r28,13
  40 000a D140      		sbci r29,1
  41               	.LCFI3:
  42               		.cfi_def_cfa_offset 273
  43 000c 0FB6      		in __tmp_reg__,__SREG__
  44 000e F894      		cli
  45 0010 DEBF      		out __SP_H__,r29
  46 0012 0FBE      		out __SREG__,__tmp_reg__
  47 0014 CDBF      		out __SP_L__,r28
  48               	/* prologue: function */
  49               	/* frame size = 269 */
  50               	/* stack size = 271 */
  51               	.L__stack_usage = 271
  14:main.c        **** 	uint8_t z;
  15:main.c        **** 	char s[] = "Hello World!";
  52               		.loc 1 15 0
  53 0016 8E01      		movw r16,r28
  54 0018 0F5F      		subi r16,-1
  55 001a 1E4F      		sbci r17,-2
  56 001c 8DE0      		ldi r24,lo8(13)
  57 001e E0E0      		ldi r30,lo8(.LC0)
  58 0020 F0E0      		ldi r31,hi8(.LC0)
  59 0022 D801      		movw r26,r16
  60               		0:
  61 0024 0190      		ld r0,Z+
  62 0026 0D92      		st X+,r0
  63 0028 8A95      		dec r24
  64 002a 01F4      		brne 0b
  16:main.c        **** 	char buffer[MAXBUF];
  17:main.c        **** 	memset(buffer,0,MAXBUF);
  65               		.loc 1 17 0
  66 002c 9E01      		movw r18,r28
  67 002e 2F5F      		subi r18,-1
  68 0030 3F4F      		sbci r19,-1
  69 0032 7901      		movw r14,r18
  70 0034 80E0      		ldi r24,0
  71 0036 91E0      		ldi r25,lo8(1)
  72 0038 F901      		movw r30,r18
  73 003a 9C01      		movw r18,r24
  74               		0:
  75 003c 1192      		st Z+,__zero_reg__
  76 003e 2150      		subi r18,1
  77 0040 3040      		sbci r19,0
  78 0042 01F4      		brne 0b
  18:main.c        **** 	
  19:main.c        **** 	I2C_init();
  79               		.loc 1 19 0
  80 0044 0E94 0000 		call I2C_init
  81               	.LVL0:
  20:main.c        **** 	
  21:main.c        **** 	lcdinit();
  82               		.loc 1 21 0
  83 0048 0E94 0000 		call lcdinit
  84               	.LVL1:
  22:main.c        **** 	lcd_set_xy(0,0);
  85               		.loc 1 22 0
  86 004c 60E0      		ldi r22,0
  87 004e 80E0      		ldi r24,0
  88 0050 0E94 0000 		call lcd_set_xy
  89               	.LVL2:
  23:main.c        **** 	printf("Hello");
  90               		.loc 1 23 0
  91 0054 80E0      		ldi r24,lo8(.LC1)
  92 0056 90E0      		ldi r25,hi8(.LC1)
  93 0058 9F93      		push r25
  94 005a 8F93      		push r24
  95 005c 0E94 0000 		call printf
  96               	.LVL3:
  97               	.LBB4:
  98               	.LBB5:
  99               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 100               		.loc 2 187 0
 101 0060 3FEF      		ldi r19,lo8(6399999)
 102 0062 87EA      		ldi r24,hi8(6399999)
 103 0064 91E6      		ldi r25,hlo8(6399999)
 104 0066 3150      	1:	subi r19,1
 105 0068 8040      		sbci r24,0
 106 006a 9040      		sbci r25,0
 107 006c 01F4      		brne 1b
 108 006e 00C0      		rjmp .
 109 0070 0000      		nop
 110               	.LVL4:
 111               	.LBE5:
 112               	.LBE4:
  24:main.c        **** 	
  25:main.c        **** 	_delay_ms(2000);
  26:main.c        **** 	
  27:main.c        **** 	EE_write_byte(0, 'f');
 113               		.loc 1 27 0
 114 0072 66E6      		ldi r22,lo8(102)
 115 0074 80E0      		ldi r24,0
 116 0076 90E0      		ldi r25,0
 117 0078 0E94 0000 		call EE_write_byte
 118               	.LVL5:
  28:main.c        **** 	z = EE_read_byte(0);
 119               		.loc 1 28 0
 120 007c 80E0      		ldi r24,0
 121 007e 90E0      		ldi r25,0
 122 0080 0E94 0000 		call EE_read_byte
 123               	.LVL6:
 124 0084 D82E      		mov r13,r24
 125               	.LVL7:
  29:main.c        **** 	lcd_set_xy(0,1);
 126               		.loc 1 29 0
 127 0086 61E0      		ldi r22,lo8(1)
 128 0088 80E0      		ldi r24,0
 129 008a 0E94 0000 		call lcd_set_xy
 130               	.LVL8:
  30:main.c        **** 	printf("Byte: 0x%02x=%c", z, z);
 131               		.loc 1 30 0
 132 008e 1F92      		push __zero_reg__
 133 0090 DF92      		push r13
 134 0092 1F92      		push __zero_reg__
 135 0094 DF92      		push r13
 136 0096 80E0      		ldi r24,lo8(.LC2)
 137 0098 90E0      		ldi r25,hi8(.LC2)
 138 009a 9F93      		push r25
 139 009c 8F93      		push r24
 140 009e 0E94 0000 		call printf
 141               	.LVL9:
  31:main.c        **** 	
  32:main.c        **** 	EE_write_multi(1, strlen(s), (uint8_t*)s);
 142               		.loc 1 32 0
 143 00a2 F801      		movw r30,r16
 144               		0:
 145 00a4 0190      		ld __tmp_reg__,Z+
 146 00a6 0020      		tst __tmp_reg__
 147 00a8 01F4      		brne 0b
 148 00aa 3197      		sbiw r30,1
 149 00ac BF01      		movw r22,r30
 150 00ae 601B      		sub r22,r16
 151 00b0 710B      		sbc r23,r17
 152 00b2 A801      		movw r20,r16
 153 00b4 81E0      		ldi r24,lo8(1)
 154 00b6 90E0      		ldi r25,0
 155 00b8 0E94 0000 		call EE_write_multi
 156               	.LVL10:
  33:main.c        **** 	
  34:main.c        **** 	lcd_set_xy(0,0);
 157               		.loc 1 34 0
 158 00bc 60E0      		ldi r22,0
 159 00be 80E0      		ldi r24,0
 160 00c0 0E94 0000 		call lcd_set_xy
 161               	.LVL11:
  35:main.c        **** 	
  36:main.c        **** 	EE_read_multi(1, strlen(s), (uint8_t*)buffer);
 162               		.loc 1 36 0
 163 00c4 F801      		movw r30,r16
 164               		0:
 165 00c6 0190      		ld __tmp_reg__,Z+
 166 00c8 0020      		tst __tmp_reg__
 167 00ca 01F4      		brne 0b
 168 00cc 3197      		sbiw r30,1
 169 00ce BF01      		movw r22,r30
 170 00d0 601B      		sub r22,r16
 171 00d2 710B      		sbc r23,r17
 172 00d4 A701      		movw r20,r14
 173 00d6 81E0      		ldi r24,lo8(1)
 174 00d8 90E0      		ldi r25,0
 175 00da 0E94 0000 		call EE_read_multi
 176               	.LVL12:
  37:main.c        **** 	
  38:main.c        **** 	printf("%s", buffer);
 177               		.loc 1 38 0
 178 00de FF92      		push r15
 179 00e0 EF92      		push r14
 180 00e2 80E0      		ldi r24,lo8(.LC3)
 181 00e4 90E0      		ldi r25,hi8(.LC3)
 182 00e6 9F93      		push r25
 183 00e8 8F93      		push r24
 184 00ea 0E94 0000 		call printf
 185               	.LVL13:
 186 00ee 0FB6      		in __tmp_reg__,__SREG__
 187 00f0 F894      		cli
 188 00f2 DEBF      		out __SP_H__,r29
 189 00f4 0FBE      		out __SREG__,__tmp_reg__
 190 00f6 CDBF      		out __SP_L__,r28
 191               	.L2:
 192 00f8 00C0      		rjmp .L2
 193               		.cfi_endproc
 194               	.LFE8:
 196               		.text
 197               	.Letext0:
 198               		.file 3 "/usr/lib/avr/include/stdint.h"
 199               		.file 4 "twi.h"
 200               		.file 5 "lcd.h"
 201               		.file 6 "/usr/lib/avr/include/stdio.h"
 202               		.file 7 "eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccqgZedb.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccqgZedb.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccqgZedb.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccqgZedb.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccqgZedb.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccqgZedb.s:22     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
I2C_init
lcdinit
lcd_set_xy
printf
EE_write_byte
EE_read_byte
EE_write_multi
EE_read_multi
__do_copy_data
