
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000a90  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800094  00800094  00000b58  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cc  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a56  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ff  00000000  00000000  00002b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  0000314c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000444  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdb  00000000  00000000  000037ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00004387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 39       	cpi	r26, 0x9A	; 154
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
  8a:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_init>:
#include "twi.h"

void I2C_init(void) {
	TWBR = 12;
  92:	8c e0       	ldi	r24, 0x0C	; 12
  94:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~((1<<TWPS0)|(1<<TWPS1));
  96:	81 b1       	in	r24, 0x01	; 1
  98:	8c 7f       	andi	r24, 0xFC	; 252
  9a:	81 b9       	out	0x01, r24	; 1
  9c:	08 95       	ret

0000009e <I2C_start>:
}
uint8_t I2C_start(void) {
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  9e:	84 ea       	ldi	r24, 0xA4	; 164
  a0:	86 bf       	out	0x36, r24	; 54
	while( !(TWCR&(1<<TWINT)));
  a2:	06 b6       	in	r0, 0x36	; 54
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <I2C_start+0x4>
	return (TWSR & 0xf8);
  a8:	81 b1       	in	r24, 0x01	; 1
	
}
  aa:	88 7f       	andi	r24, 0xF8	; 248
  ac:	08 95       	ret

000000ae <I2C_stop>:
void I2C_stop(void) {
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
  ae:	84 e9       	ldi	r24, 0x94	; 148
  b0:	86 bf       	out	0x36, r24	; 54
	while((TWCR&(1<<TWSTO)));
  b2:	06 b6       	in	r0, 0x36	; 54
  b4:	04 fc       	sbrc	r0, 4
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <I2C_stop+0x4>
}
  b8:	08 95       	ret

000000ba <I2C_write>:
uint8_t I2C_write(uint8_t byte) {
	TWDR = byte;
  ba:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  bc:	84 e8       	ldi	r24, 0x84	; 132
  be:	86 bf       	out	0x36, r24	; 54
	while( !(TWCR&(1<<TWINT)));
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <I2C_write+0x6>
	return (TWSR & 0xf8);
  c6:	81 b1       	in	r24, 0x01	; 1
}
  c8:	88 7f       	andi	r24, 0xF8	; 248
  ca:	08 95       	ret

000000cc <I2C_read>:
uint8_t I2C_read(uint8_t *value, uint8_t ack) {
	TWCR = (1<<TWINT)|(1<<TWEN)|(ack<<TWEA);
  cc:	20 e4       	ldi	r18, 0x40	; 64
  ce:	62 9f       	mul	r22, r18
  d0:	b0 01       	movw	r22, r0
  d2:	11 24       	eor	r1, r1
  d4:	64 68       	ori	r22, 0x84	; 132
  d6:	66 bf       	out	0x36, r22	; 54
	while( !(TWCR&(1<<TWINT)));
  d8:	06 b6       	in	r0, 0x36	; 54
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <I2C_read+0xc>
	*value = TWDR;
  de:	23 b1       	in	r18, 0x03	; 3
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	return (TWSR & 0xf8);
  e4:	81 b1       	in	r24, 0x01	; 1
}
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	08 95       	ret

000000ea <EE_write_byte>:
#include "eeprom.h"

void EE_write_byte(uint16_t addr, uint8_t data) {
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	d8 2f       	mov	r29, r24
  f2:	19 2f       	mov	r17, r25
  f4:	c6 2f       	mov	r28, r22
	I2C_start();
  f6:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	I2C_write(EE_ADDR_W);
  fa:	86 ea       	ldi	r24, 0xA6	; 166
  fc:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr>>8);
 100:	81 2f       	mov	r24, r17
 102:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr);
 106:	8d 2f       	mov	r24, r29
 108:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(data);
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_stop();
 112:	0e 94 57 00 	call	0xae	; 0xae <I2C_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <EE_write_byte+0x30>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <EE_write_byte+0x36>
 120:	00 00       	nop
	_delay_ms(10);
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	08 95       	ret

0000012a <EE_read_byte>:
uint8_t EE_read_byte(uint16_t addr) {
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	1f 92       	push	r1
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	18 2f       	mov	r17, r24
 13a:	09 2f       	mov	r16, r25
	uint8_t data;
	I2C_start();
 13c:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	I2C_write(EE_ADDR_W);
 140:	86 ea       	ldi	r24, 0xA6	; 166
 142:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr>>8);
 146:	80 2f       	mov	r24, r16
 148:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr);
 14c:	81 2f       	mov	r24, r17
 14e:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_start();
 152:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	I2C_write(EE_ADDR_R);
 156:	87 ea       	ldi	r24, 0xA7	; 167
 158:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_read(&data, NO_ACK);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 66 00 	call	0xcc	; 0xcc <I2C_read>
	I2C_stop();
 166:	0e 94 57 00 	call	0xae	; 0xae <I2C_stop>
	return data;
}
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <EE_write_multi>:

void EE_write_multi(uint16_t addr, uint8_t len, uint8_t *ptr) {
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	ec 01       	movw	r28, r24
 184:	16 2f       	mov	r17, r22
 186:	f4 2e       	mov	r15, r20
 188:	05 2f       	mov	r16, r21
	I2C_start();
 18a:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	I2C_write(EE_ADDR_W);
 18e:	86 ea       	ldi	r24, 0xA6	; 166
 190:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr>>8);
 194:	8d 2f       	mov	r24, r29
 196:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr);
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
 1a0:	cf 2d       	mov	r28, r15
 1a2:	d0 2f       	mov	r29, r16
 1a4:	ce 01       	movw	r24, r28
 1a6:	81 0f       	add	r24, r17
 1a8:	91 1d       	adc	r25, r1
 1aa:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; i < len; i++) {
 1ac:	c0 17       	cp	r28, r16
 1ae:	d1 07       	cpc	r29, r17
 1b0:	21 f0       	breq	.+8      	; 0x1ba <EE_write_multi+0x42>
		I2C_write(*(ptr++));
 1b2:	89 91       	ld	r24, Y+
 1b4:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
 1b8:	f9 cf       	rjmp	.-14     	; 0x1ac <EE_write_multi+0x34>
	}
	I2C_stop();
 1ba:	0e 94 57 00 	call	0xae	; 0xae <I2C_stop>
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9c e9       	ldi	r25, 0x9C	; 156
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <EE_write_multi+0x4a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <EE_write_multi+0x50>
 1c8:	00 00       	nop
	_delay_ms(10);
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	08 95       	ret

000001d6 <EE_read_multi>:

void EE_read_multi(uint16_t addr, uint8_t len, uint8_t *ptr) {
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	f8 2e       	mov	r15, r24
 1e2:	e9 2e       	mov	r14, r25
 1e4:	c6 2f       	mov	r28, r22
 1e6:	14 2f       	mov	r17, r20
 1e8:	d5 2f       	mov	r29, r21
	I2C_start();
 1ea:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	I2C_write(EE_ADDR_W);
 1ee:	86 ea       	ldi	r24, 0xA6	; 166
 1f0:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr>>8);
 1f4:	8e 2d       	mov	r24, r14
 1f6:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_write(addr);
 1fa:	8f 2d       	mov	r24, r15
 1fc:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	I2C_start();
 200:	0e 94 4f 00 	call	0x9e	; 0x9e <I2C_start>
	I2C_write(EE_ADDR_R);
 204:	87 ea       	ldi	r24, 0xA7	; 167
 206:	0e 94 5d 00 	call	0xba	; 0xba <I2C_write>
	for (uint8_t i = 0; i < len-1; i++) {
 20a:	81 2f       	mov	r24, r17
 20c:	9d 2f       	mov	r25, r29
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	21 97       	sbiw	r28, 0x01	; 1
 212:	28 2f       	mov	r18, r24
 214:	21 1b       	sub	r18, r17
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	2c 17       	cp	r18, r28
 21a:	3d 07       	cpc	r19, r29
 21c:	4c f4       	brge	.+18     	; 0x230 <EE_read_multi+0x5a>
		I2C_read(ptr++, ACK);
 21e:	7c 01       	movw	r14, r24
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	e2 1a       	sub	r14, r18
 224:	f2 0a       	sbc	r15, r18
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	0e 94 66 00 	call	0xcc	; 0xcc <I2C_read>
 22c:	c7 01       	movw	r24, r14
 22e:	f1 cf       	rjmp	.-30     	; 0x212 <EE_read_multi+0x3c>
	}
	I2C_read(ptr, NO_ACK);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	0e 94 66 00 	call	0xcc	; 0xcc <I2C_read>
	I2C_stop();
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
	I2C_write(EE_ADDR_R);
	for (uint8_t i = 0; i < len-1; i++) {
		I2C_read(ptr++, ACK);
	}
	I2C_read(ptr, NO_ACK);
	I2C_stop();
 240:	0c 94 57 00 	jmp	0xae	; 0xae <I2C_stop>

00000244 <lcd_write_command>:
    lcd_clear();

}

void lcd_write_command(uint8_t data) {
    LCD_PORT &= ~(1<<LCD_RS);
 244:	da 98       	cbi	0x1b, 2	; 27
    LCD_PORT |= 1<<LCD_E;
 246:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
 248:	9b b3       	in	r25, 0x1b	; 27
 24a:	9f 70       	andi	r25, 0x0F	; 15
 24c:	28 2f       	mov	r18, r24
 24e:	20 7f       	andi	r18, 0xF0	; 240
 250:	92 2b       	or	r25, r18
 252:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	35 e0       	ldi	r19, 0x05	; 5
 256:	3a 95       	dec	r19
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_write_command+0x12>
 25a:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 25c:	db 98       	cbi	0x1b, 3	; 27
 25e:	ef e8       	ldi	r30, 0x8F	; 143
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_write_command+0x1e>
 266:	00 c0       	rjmp	.+0      	; 0x268 <lcd_write_command+0x24>
 268:	00 00       	nop
    _delay_us(100);
    LCD_PORT |= 1<<LCD_E;
 26a:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
 26c:	2b b3       	in	r18, 0x1b	; 27
 26e:	2f 70       	andi	r18, 0x0F	; 15
 270:	f0 e1       	ldi	r31, 0x10	; 16
 272:	8f 9f       	mul	r24, r31
 274:	c0 01       	movw	r24, r0
 276:	11 24       	eor	r1, r1
 278:	82 2b       	or	r24, r18
 27a:	8b bb       	out	0x1b, r24	; 27
 27c:	35 e0       	ldi	r19, 0x05	; 5
 27e:	3a 95       	dec	r19
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_write_command+0x3a>
 282:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 284:	db 98       	cbi	0x1b, 3	; 27
 286:	8f e8       	ldi	r24, 0x8F	; 143
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_write_command+0x46>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_write_command+0x4c>
 290:	00 00       	nop
 292:	08 95       	ret

00000294 <lcd_clear>:
    _delay_us(100);
}


void lcd_clear() {
    lcd_write_command(1);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 22 01 	call	0x244	; 0x244 <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	8f e3       	ldi	r24, 0x3F	; 63
 29c:	9f e1       	ldi	r25, 0x1F	; 31
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_clear+0xa>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_clear+0x10>
 2a4:	00 00       	nop
 2a6:	08 95       	ret

000002a8 <lcdinit>:
    lcd_write_data(c);
    return 0;
}

void lcdinit(void) {
    LCD_PORT_DIR = 0xff; //ustawiamy linie portu wyswietlacza na wyjsciowe
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	8a bb       	out	0x1a, r24	; 26
    LCD_PORT = 0x00; //ustawiamy stan niski na liniach portu wyswietlacza
 2ac:	1b ba       	out	0x1b, r1	; 27
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	80 e7       	ldi	r24, 0x70	; 112
 2b2:	92 e0       	ldi	r25, 0x02	; 2
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <lcdinit+0xc>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <lcdinit+0x16>
 2be:	00 00       	nop
    _delay_ms(50);

    stdout = &mystdout; //przypisujemy strumien wyjsciowy stdout
 2c0:	80 e6       	ldi	r24, 0x60	; 96
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x3>
 2c8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end+0x2>

    LCD_PORT &= ~(1<<LCD_RS); //wybieramy rejestr instrukcji IR
 2cc:	da 98       	cbi	0x1b, 2	; 27
 2ce:	93 e0       	ldi	r25, 0x03	; 3
    for (uint8_t i = 0; i < 3; i++) {
        LCD_PORT |= 1<<LCD_E;
 2d0:	db 9a       	sbi	0x1b, 3	; 27
        LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	8f 70       	andi	r24, 0x0F	; 15
 2d6:	80 63       	ori	r24, 0x30	; 48
 2d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2da:	e5 e0       	ldi	r30, 0x05	; 5
 2dc:	ea 95       	dec	r30
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcdinit+0x34>
 2e0:	00 00       	nop
         _delay_us(1);
        LCD_PORT &= ~(1<<LCD_E);
 2e2:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	ef e1       	ldi	r30, 0x1F	; 31
 2e6:	fe e4       	ldi	r31, 0x4E	; 78
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcdinit+0x40>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcdinit+0x46>
 2ee:	00 00       	nop
 2f0:	91 50       	subi	r25, 0x01	; 1
    _delay_ms(50);

    stdout = &mystdout; //przypisujemy strumien wyjsciowy stdout

    LCD_PORT &= ~(1<<LCD_RS); //wybieramy rejestr instrukcji IR
    for (uint8_t i = 0; i < 3; i++) {
 2f2:	71 f7       	brne	.-36     	; 0x2d0 <lcdinit+0x28>
         _delay_us(1);
        LCD_PORT &= ~(1<<LCD_E);
        _delay_ms(5);
    }

    LCD_PORT |= 1<<LCD_E;
 2f4:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 2f6:	8b b3       	in	r24, 0x1b	; 27
 2f8:	8f 70       	andi	r24, 0x0F	; 15
 2fa:	80 62       	ori	r24, 0x20	; 32
 2fc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	f5 e0       	ldi	r31, 0x05	; 5
 300:	fa 95       	dec	r31
 302:	f1 f7       	brne	.-4      	; 0x300 <lcdinit+0x58>
 304:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 306:	db 98       	cbi	0x1b, 3	; 27
 308:	8f e8       	ldi	r24, 0x8F	; 143
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcdinit+0x64>
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcdinit+0x6a>
 312:	00 00       	nop
    _delay_us(100);
    
    lcd_write_command(0x28);
 314:	88 e2       	ldi	r24, 0x28	; 40
 316:	0e 94 22 01 	call	0x244	; 0x244 <lcd_write_command>
    lcd_write_command(0x0c);
 31a:	8c e0       	ldi	r24, 0x0C	; 12
 31c:	0e 94 22 01 	call	0x244	; 0x244 <lcd_write_command>
    lcd_write_command(0x06);
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 22 01 	call	0x244	; 0x244 <lcd_write_command>

    lcd_clear();
 326:	0c 94 4a 01 	jmp	0x294	; 0x294 <lcd_clear>

0000032a <lcd_write_data>:
    lcd_write_command(1);
    _delay_ms(2);
}

void lcd_write_data(uint8_t data) {
    LCD_PORT |= (1<<LCD_RS);
 32a:	da 9a       	sbi	0x1b, 2	; 27
    LCD_PORT |= 1<<LCD_E;
 32c:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
 32e:	9b b3       	in	r25, 0x1b	; 27
 330:	9f 70       	andi	r25, 0x0F	; 15
 332:	28 2f       	mov	r18, r24
 334:	20 7f       	andi	r18, 0xF0	; 240
 336:	92 2b       	or	r25, r18
 338:	9b bb       	out	0x1b, r25	; 27
 33a:	35 e0       	ldi	r19, 0x05	; 5
 33c:	3a 95       	dec	r19
 33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_write_data+0x12>
 340:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 342:	db 98       	cbi	0x1b, 3	; 27
 344:	ef e8       	ldi	r30, 0x8F	; 143
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_write_data+0x1e>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_write_data+0x24>
 34e:	00 00       	nop
    _delay_us(100);
    LCD_PORT |= 1<<LCD_E;
 350:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
 352:	2b b3       	in	r18, 0x1b	; 27
 354:	2f 70       	andi	r18, 0x0F	; 15
 356:	f0 e1       	ldi	r31, 0x10	; 16
 358:	8f 9f       	mul	r24, r31
 35a:	c0 01       	movw	r24, r0
 35c:	11 24       	eor	r1, r1
 35e:	82 2b       	or	r24, r18
 360:	8b bb       	out	0x1b, r24	; 27
 362:	35 e0       	ldi	r19, 0x05	; 5
 364:	3a 95       	dec	r19
 366:	f1 f7       	brne	.-4      	; 0x364 <lcd_write_data+0x3a>
 368:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 36a:	db 98       	cbi	0x1b, 3	; 27
 36c:	8f e8       	ldi	r24, 0x8F	; 143
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <lcd_write_data+0x46>
 374:	00 c0       	rjmp	.+0      	; 0x376 <lcd_write_data+0x4c>
 376:	00 00       	nop
 378:	08 95       	ret

0000037a <lcd_print>:
static int lcd_print(char c, FILE *stream);

static FILE mystdout = FDEV_SETUP_STREAM(lcd_print, NULL, _FDEV_SETUP_WRITE);

static int lcd_print(char c, FILE *stream) {
    lcd_write_data(c);
 37a:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_write_data>
    return 0;
}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret

00000384 <lcd_set_xy>:
    LCD_PORT &= ~(1<<LCD_E);
    _delay_us(100);
}

void lcd_set_xy(uint8_t x, uint8_t y) {
    lcd_write_command(0x80 | (0x40*y + x)); //instrukcja do utawienia adresu pamieci wyswietlacza linia "1" jets od adresu 0x40 wiec mamy adres 0x40*y+x
 384:	90 e4       	ldi	r25, 0x40	; 64
 386:	69 9f       	mul	r22, r25
 388:	80 0d       	add	r24, r0
 38a:	11 24       	eor	r1, r1
 38c:	80 68       	ori	r24, 0x80	; 128
 38e:	0c 94 22 01 	jmp	0x244	; 0x244 <lcd_write_command>

00000392 <lcd_write_text_xy>:
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text) {
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	8a 01       	movw	r16, r20
    lcd_set_xy(x, y);
 39c:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_set_xy>
 3a0:	e8 01       	movw	r28, r16
    while(*text != 0) { 
 3a2:	89 91       	ld	r24, Y+
 3a4:	88 23       	and	r24, r24
 3a6:	19 f0       	breq	.+6      	; 0x3ae <lcd_write_text_xy+0x1c>
		//sprawdz czy znak rozny od 0, jesli tak to wyslij znak na wyswietlacz, zwieksz wskaznik o 1 - na nastepny znak
        lcd_write_data((uint8_t)*text);
 3a8:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_write_data>
 3ac:	fa cf       	rjmp	.-12     	; 0x3a2 <lcd_write_text_xy+0x10>
        text++;
    }
}
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <lcd_write_text_P>:

void lcd_write_text_P(const char *text) {
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	fc 01       	movw	r30, r24
	register uint8_t ch;
	while( (ch = pgm_read_byte(text++) )) {
 3be:	84 91       	lpm	r24, Z
 3c0:	ef 01       	movw	r28, r30
 3c2:	21 96       	adiw	r28, 0x01	; 1
 3c4:	88 23       	and	r24, r24
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <lcd_write_text_P+0x18>
		lcd_write_data(ch);
 3c8:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_write_data>
 3cc:	fe 01       	movw	r30, r28
 3ce:	f7 cf       	rjmp	.-18     	; 0x3be <lcd_write_text_P+0x6>
	}
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <main>:


#define MAXBUF 256


int main(void){
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	cd 50       	subi	r28, 0x0D	; 13
 3e0:	d1 40       	sbci	r29, 0x01	; 1
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t z;
	char s[] = "Hello World!";
 3ec:	8e 01       	movw	r16, r28
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1e 4f       	sbci	r17, 0xFE	; 254
 3f2:	8d e0       	ldi	r24, 0x0D	; 13
 3f4:	e7 e8       	ldi	r30, 0x87	; 135
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	d8 01       	movw	r26, r16
 3fa:	01 90       	ld	r0, Z+
 3fc:	0d 92       	st	X+, r0
 3fe:	8a 95       	dec	r24
 400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x24>
	char buffer[MAXBUF];
	memset(buffer,0,MAXBUF);
 402:	9e 01       	movw	r18, r28
 404:	2f 5f       	subi	r18, 0xFF	; 255
 406:	3f 4f       	sbci	r19, 0xFF	; 255
 408:	79 01       	movw	r14, r18
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	f9 01       	movw	r30, r18
 410:	9c 01       	movw	r18, r24
 412:	11 92       	st	Z+, r1
 414:	21 50       	subi	r18, 0x01	; 1
 416:	30 40       	sbci	r19, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	
	I2C_init();
 41a:	0e 94 49 00 	call	0x92	; 0x92 <I2C_init>
	
	lcdinit();
 41e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcdinit>
	lcd_set_xy(0,0);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_set_xy>
	printf("Hello");
 42a:	8e e6       	ldi	r24, 0x6E	; 110
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	9f 93       	push	r25
 430:	8f 93       	push	r24
 432:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 436:	3f ef       	ldi	r19, 0xFF	; 255
 438:	87 ea       	ldi	r24, 0xA7	; 167
 43a:	91 e6       	ldi	r25, 0x61	; 97
 43c:	31 50       	subi	r19, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
	
	_delay_ms(2000);
	
	EE_write_byte(0, 'f');
 448:	66 e6       	ldi	r22, 0x66	; 102
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 75 00 	call	0xea	; 0xea <EE_write_byte>
	z = EE_read_byte(0);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 95 00 	call	0x12a	; 0x12a <EE_read_byte>
 45a:	d8 2e       	mov	r13, r24
	lcd_set_xy(0,1);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_set_xy>
	printf("Byte: 0x%02x=%c", z, z);
 464:	1f 92       	push	r1
 466:	df 92       	push	r13
 468:	1f 92       	push	r1
 46a:	df 92       	push	r13
 46c:	84 e7       	ldi	r24, 0x74	; 116
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9f 93       	push	r25
 472:	8f 93       	push	r24
 474:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printf>
	
	EE_write_multi(1, strlen(s), (uint8_t*)s);
 478:	f8 01       	movw	r30, r16
 47a:	01 90       	ld	r0, Z+
 47c:	00 20       	and	r0, r0
 47e:	e9 f7       	brne	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	bf 01       	movw	r22, r30
 484:	60 1b       	sub	r22, r16
 486:	71 0b       	sbc	r23, r17
 488:	a8 01       	movw	r20, r16
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 bc 00 	call	0x178	; 0x178 <EE_write_multi>
	
	lcd_set_xy(0,0);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_set_xy>
	
	EE_read_multi(1, strlen(s), (uint8_t*)buffer);
 49a:	f8 01       	movw	r30, r16
 49c:	01 90       	ld	r0, Z+
 49e:	00 20       	and	r0, r0
 4a0:	e9 f7       	brne	.-6      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	bf 01       	movw	r22, r30
 4a6:	60 1b       	sub	r22, r16
 4a8:	71 0b       	sbc	r23, r17
 4aa:	a7 01       	movw	r20, r14
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <EE_read_multi>
	
	printf("%s", buffer);
 4b4:	ff 92       	push	r15
 4b6:	ef 92       	push	r14
 4b8:	84 e8       	ldi	r24, 0x84	; 132
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	9f 93       	push	r25
 4be:	8f 93       	push	r24
 4c0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <printf>
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>

000004d0 <printf>:
 4d0:	a0 e0       	ldi	r26, 0x00	; 0
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	ee e6       	ldi	r30, 0x6E	; 110
 4d6:	f2 e0       	ldi	r31, 0x02	; 2
 4d8:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__prologue_saves__+0x20>
 4dc:	ae 01       	movw	r20, r28
 4de:	4b 5f       	subi	r20, 0xFB	; 251
 4e0:	5f 4f       	sbci	r21, 0xFF	; 255
 4e2:	fa 01       	movw	r30, r20
 4e4:	61 91       	ld	r22, Z+
 4e6:	71 91       	ld	r23, Z+
 4e8:	af 01       	movw	r20, r30
 4ea:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end+0x2>
 4ee:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x3>
 4f2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <vfprintf>
 4f6:	e2 e0       	ldi	r30, 0x02	; 2
 4f8:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__epilogue_restores__+0x20>

000004fc <vfprintf>:
 4fc:	ab e0       	ldi	r26, 0x0B	; 11
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e4 e8       	ldi	r30, 0x84	; 132
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__prologue_saves__>
 508:	6c 01       	movw	r12, r24
 50a:	7b 01       	movw	r14, r22
 50c:	8a 01       	movw	r16, r20
 50e:	fc 01       	movw	r30, r24
 510:	17 82       	std	Z+7, r1	; 0x07
 512:	16 82       	std	Z+6, r1	; 0x06
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	81 ff       	sbrs	r24, 1
 518:	cc c1       	rjmp	.+920    	; 0x8b2 <__stack+0x53>
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	3c 01       	movw	r6, r24
 520:	f6 01       	movw	r30, r12
 522:	93 81       	ldd	r25, Z+3	; 0x03
 524:	f7 01       	movw	r30, r14
 526:	93 fd       	sbrc	r25, 3
 528:	85 91       	lpm	r24, Z+
 52a:	93 ff       	sbrs	r25, 3
 52c:	81 91       	ld	r24, Z+
 52e:	7f 01       	movw	r14, r30
 530:	88 23       	and	r24, r24
 532:	09 f4       	brne	.+2      	; 0x536 <vfprintf+0x3a>
 534:	ba c1       	rjmp	.+884    	; 0x8aa <__stack+0x4b>
 536:	85 32       	cpi	r24, 0x25	; 37
 538:	39 f4       	brne	.+14     	; 0x548 <vfprintf+0x4c>
 53a:	93 fd       	sbrc	r25, 3
 53c:	85 91       	lpm	r24, Z+
 53e:	93 ff       	sbrs	r25, 3
 540:	81 91       	ld	r24, Z+
 542:	7f 01       	movw	r14, r30
 544:	85 32       	cpi	r24, 0x25	; 37
 546:	29 f4       	brne	.+10     	; 0x552 <vfprintf+0x56>
 548:	b6 01       	movw	r22, r12
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 550:	e7 cf       	rjmp	.-50     	; 0x520 <vfprintf+0x24>
 552:	91 2c       	mov	r9, r1
 554:	21 2c       	mov	r2, r1
 556:	31 2c       	mov	r3, r1
 558:	ff e1       	ldi	r31, 0x1F	; 31
 55a:	f3 15       	cp	r31, r3
 55c:	d8 f0       	brcs	.+54     	; 0x594 <vfprintf+0x98>
 55e:	8b 32       	cpi	r24, 0x2B	; 43
 560:	79 f0       	breq	.+30     	; 0x580 <vfprintf+0x84>
 562:	38 f4       	brcc	.+14     	; 0x572 <vfprintf+0x76>
 564:	80 32       	cpi	r24, 0x20	; 32
 566:	79 f0       	breq	.+30     	; 0x586 <vfprintf+0x8a>
 568:	83 32       	cpi	r24, 0x23	; 35
 56a:	a1 f4       	brne	.+40     	; 0x594 <vfprintf+0x98>
 56c:	23 2d       	mov	r18, r3
 56e:	20 61       	ori	r18, 0x10	; 16
 570:	1d c0       	rjmp	.+58     	; 0x5ac <vfprintf+0xb0>
 572:	8d 32       	cpi	r24, 0x2D	; 45
 574:	61 f0       	breq	.+24     	; 0x58e <vfprintf+0x92>
 576:	80 33       	cpi	r24, 0x30	; 48
 578:	69 f4       	brne	.+26     	; 0x594 <vfprintf+0x98>
 57a:	23 2d       	mov	r18, r3
 57c:	21 60       	ori	r18, 0x01	; 1
 57e:	16 c0       	rjmp	.+44     	; 0x5ac <vfprintf+0xb0>
 580:	83 2d       	mov	r24, r3
 582:	82 60       	ori	r24, 0x02	; 2
 584:	38 2e       	mov	r3, r24
 586:	e3 2d       	mov	r30, r3
 588:	e4 60       	ori	r30, 0x04	; 4
 58a:	3e 2e       	mov	r3, r30
 58c:	2a c0       	rjmp	.+84     	; 0x5e2 <vfprintf+0xe6>
 58e:	f3 2d       	mov	r31, r3
 590:	f8 60       	ori	r31, 0x08	; 8
 592:	1d c0       	rjmp	.+58     	; 0x5ce <vfprintf+0xd2>
 594:	37 fc       	sbrc	r3, 7
 596:	2d c0       	rjmp	.+90     	; 0x5f2 <vfprintf+0xf6>
 598:	20 ed       	ldi	r18, 0xD0	; 208
 59a:	28 0f       	add	r18, r24
 59c:	2a 30       	cpi	r18, 0x0A	; 10
 59e:	40 f0       	brcs	.+16     	; 0x5b0 <vfprintf+0xb4>
 5a0:	8e 32       	cpi	r24, 0x2E	; 46
 5a2:	b9 f4       	brne	.+46     	; 0x5d2 <vfprintf+0xd6>
 5a4:	36 fc       	sbrc	r3, 6
 5a6:	81 c1       	rjmp	.+770    	; 0x8aa <__stack+0x4b>
 5a8:	23 2d       	mov	r18, r3
 5aa:	20 64       	ori	r18, 0x40	; 64
 5ac:	32 2e       	mov	r3, r18
 5ae:	19 c0       	rjmp	.+50     	; 0x5e2 <vfprintf+0xe6>
 5b0:	36 fe       	sbrs	r3, 6
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <vfprintf+0xc4>
 5b4:	8a e0       	ldi	r24, 0x0A	; 10
 5b6:	98 9e       	mul	r9, r24
 5b8:	20 0d       	add	r18, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	92 2e       	mov	r9, r18
 5be:	11 c0       	rjmp	.+34     	; 0x5e2 <vfprintf+0xe6>
 5c0:	ea e0       	ldi	r30, 0x0A	; 10
 5c2:	2e 9e       	mul	r2, r30
 5c4:	20 0d       	add	r18, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	22 2e       	mov	r2, r18
 5ca:	f3 2d       	mov	r31, r3
 5cc:	f0 62       	ori	r31, 0x20	; 32
 5ce:	3f 2e       	mov	r3, r31
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <vfprintf+0xe6>
 5d2:	8c 36       	cpi	r24, 0x6C	; 108
 5d4:	21 f4       	brne	.+8      	; 0x5de <vfprintf+0xe2>
 5d6:	83 2d       	mov	r24, r3
 5d8:	80 68       	ori	r24, 0x80	; 128
 5da:	38 2e       	mov	r3, r24
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <vfprintf+0xe6>
 5de:	88 36       	cpi	r24, 0x68	; 104
 5e0:	41 f4       	brne	.+16     	; 0x5f2 <vfprintf+0xf6>
 5e2:	f7 01       	movw	r30, r14
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	7f 01       	movw	r14, r30
 5ee:	81 11       	cpse	r24, r1
 5f0:	b3 cf       	rjmp	.-154    	; 0x558 <vfprintf+0x5c>
 5f2:	98 2f       	mov	r25, r24
 5f4:	9f 7d       	andi	r25, 0xDF	; 223
 5f6:	95 54       	subi	r25, 0x45	; 69
 5f8:	93 30       	cpi	r25, 0x03	; 3
 5fa:	28 f4       	brcc	.+10     	; 0x606 <vfprintf+0x10a>
 5fc:	0c 5f       	subi	r16, 0xFC	; 252
 5fe:	1f 4f       	sbci	r17, 0xFF	; 255
 600:	9f e3       	ldi	r25, 0x3F	; 63
 602:	99 83       	std	Y+1, r25	; 0x01
 604:	0d c0       	rjmp	.+26     	; 0x620 <vfprintf+0x124>
 606:	83 36       	cpi	r24, 0x63	; 99
 608:	31 f0       	breq	.+12     	; 0x616 <vfprintf+0x11a>
 60a:	83 37       	cpi	r24, 0x73	; 115
 60c:	71 f0       	breq	.+28     	; 0x62a <vfprintf+0x12e>
 60e:	83 35       	cpi	r24, 0x53	; 83
 610:	09 f0       	breq	.+2      	; 0x614 <vfprintf+0x118>
 612:	59 c0       	rjmp	.+178    	; 0x6c6 <vfprintf+0x1ca>
 614:	21 c0       	rjmp	.+66     	; 0x658 <vfprintf+0x15c>
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	89 83       	std	Y+1, r24	; 0x01
 61c:	0e 5f       	subi	r16, 0xFE	; 254
 61e:	1f 4f       	sbci	r17, 0xFF	; 255
 620:	88 24       	eor	r8, r8
 622:	83 94       	inc	r8
 624:	91 2c       	mov	r9, r1
 626:	53 01       	movw	r10, r6
 628:	13 c0       	rjmp	.+38     	; 0x650 <vfprintf+0x154>
 62a:	28 01       	movw	r4, r16
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	4f 0e       	add	r4, r31
 630:	51 1c       	adc	r5, r1
 632:	f8 01       	movw	r30, r16
 634:	a0 80       	ld	r10, Z
 636:	b1 80       	ldd	r11, Z+1	; 0x01
 638:	36 fe       	sbrs	r3, 6
 63a:	03 c0       	rjmp	.+6      	; 0x642 <vfprintf+0x146>
 63c:	69 2d       	mov	r22, r9
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <vfprintf+0x14a>
 642:	6f ef       	ldi	r22, 0xFF	; 255
 644:	7f ef       	ldi	r23, 0xFF	; 255
 646:	c5 01       	movw	r24, r10
 648:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <strnlen>
 64c:	4c 01       	movw	r8, r24
 64e:	82 01       	movw	r16, r4
 650:	f3 2d       	mov	r31, r3
 652:	ff 77       	andi	r31, 0x7F	; 127
 654:	3f 2e       	mov	r3, r31
 656:	16 c0       	rjmp	.+44     	; 0x684 <vfprintf+0x188>
 658:	28 01       	movw	r4, r16
 65a:	22 e0       	ldi	r18, 0x02	; 2
 65c:	42 0e       	add	r4, r18
 65e:	51 1c       	adc	r5, r1
 660:	f8 01       	movw	r30, r16
 662:	a0 80       	ld	r10, Z
 664:	b1 80       	ldd	r11, Z+1	; 0x01
 666:	36 fe       	sbrs	r3, 6
 668:	03 c0       	rjmp	.+6      	; 0x670 <vfprintf+0x174>
 66a:	69 2d       	mov	r22, r9
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <vfprintf+0x178>
 670:	6f ef       	ldi	r22, 0xFF	; 255
 672:	7f ef       	ldi	r23, 0xFF	; 255
 674:	c5 01       	movw	r24, r10
 676:	0e 94 5f 04 	call	0x8be	; 0x8be <strnlen_P>
 67a:	4c 01       	movw	r8, r24
 67c:	f3 2d       	mov	r31, r3
 67e:	f0 68       	ori	r31, 0x80	; 128
 680:	3f 2e       	mov	r3, r31
 682:	82 01       	movw	r16, r4
 684:	33 fc       	sbrc	r3, 3
 686:	1b c0       	rjmp	.+54     	; 0x6be <vfprintf+0x1c2>
 688:	82 2d       	mov	r24, r2
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	88 16       	cp	r8, r24
 68e:	99 06       	cpc	r9, r25
 690:	b0 f4       	brcc	.+44     	; 0x6be <vfprintf+0x1c2>
 692:	b6 01       	movw	r22, r12
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 69c:	2a 94       	dec	r2
 69e:	f4 cf       	rjmp	.-24     	; 0x688 <vfprintf+0x18c>
 6a0:	f5 01       	movw	r30, r10
 6a2:	37 fc       	sbrc	r3, 7
 6a4:	85 91       	lpm	r24, Z+
 6a6:	37 fe       	sbrs	r3, 7
 6a8:	81 91       	ld	r24, Z+
 6aa:	5f 01       	movw	r10, r30
 6ac:	b6 01       	movw	r22, r12
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 6b4:	21 10       	cpse	r2, r1
 6b6:	2a 94       	dec	r2
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	82 1a       	sub	r8, r18
 6bc:	91 08       	sbc	r9, r1
 6be:	81 14       	cp	r8, r1
 6c0:	91 04       	cpc	r9, r1
 6c2:	71 f7       	brne	.-36     	; 0x6a0 <vfprintf+0x1a4>
 6c4:	e8 c0       	rjmp	.+464    	; 0x896 <__stack+0x37>
 6c6:	84 36       	cpi	r24, 0x64	; 100
 6c8:	11 f0       	breq	.+4      	; 0x6ce <vfprintf+0x1d2>
 6ca:	89 36       	cpi	r24, 0x69	; 105
 6cc:	41 f5       	brne	.+80     	; 0x71e <vfprintf+0x222>
 6ce:	f8 01       	movw	r30, r16
 6d0:	37 fe       	sbrs	r3, 7
 6d2:	07 c0       	rjmp	.+14     	; 0x6e2 <vfprintf+0x1e6>
 6d4:	60 81       	ld	r22, Z
 6d6:	71 81       	ldd	r23, Z+1	; 0x01
 6d8:	82 81       	ldd	r24, Z+2	; 0x02
 6da:	93 81       	ldd	r25, Z+3	; 0x03
 6dc:	0c 5f       	subi	r16, 0xFC	; 252
 6de:	1f 4f       	sbci	r17, 0xFF	; 255
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <vfprintf+0x1f6>
 6e2:	60 81       	ld	r22, Z
 6e4:	71 81       	ldd	r23, Z+1	; 0x01
 6e6:	07 2e       	mov	r0, r23
 6e8:	00 0c       	add	r0, r0
 6ea:	88 0b       	sbc	r24, r24
 6ec:	99 0b       	sbc	r25, r25
 6ee:	0e 5f       	subi	r16, 0xFE	; 254
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	f3 2d       	mov	r31, r3
 6f4:	ff 76       	andi	r31, 0x6F	; 111
 6f6:	3f 2e       	mov	r3, r31
 6f8:	97 ff       	sbrs	r25, 7
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <vfprintf+0x212>
 6fc:	90 95       	com	r25
 6fe:	80 95       	com	r24
 700:	70 95       	com	r23
 702:	61 95       	neg	r22
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	f0 68       	ori	r31, 0x80	; 128
 70c:	3f 2e       	mov	r3, r31
 70e:	2a e0       	ldi	r18, 0x0A	; 10
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	a3 01       	movw	r20, r6
 714:	0e 94 b1 04 	call	0x962	; 0x962 <__ultoa_invert>
 718:	88 2e       	mov	r8, r24
 71a:	86 18       	sub	r8, r6
 71c:	45 c0       	rjmp	.+138    	; 0x7a8 <vfprintf+0x2ac>
 71e:	85 37       	cpi	r24, 0x75	; 117
 720:	31 f4       	brne	.+12     	; 0x72e <vfprintf+0x232>
 722:	23 2d       	mov	r18, r3
 724:	2f 7e       	andi	r18, 0xEF	; 239
 726:	b2 2e       	mov	r11, r18
 728:	2a e0       	ldi	r18, 0x0A	; 10
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	25 c0       	rjmp	.+74     	; 0x778 <vfprintf+0x27c>
 72e:	93 2d       	mov	r25, r3
 730:	99 7f       	andi	r25, 0xF9	; 249
 732:	b9 2e       	mov	r11, r25
 734:	8f 36       	cpi	r24, 0x6F	; 111
 736:	c1 f0       	breq	.+48     	; 0x768 <vfprintf+0x26c>
 738:	18 f4       	brcc	.+6      	; 0x740 <vfprintf+0x244>
 73a:	88 35       	cpi	r24, 0x58	; 88
 73c:	79 f0       	breq	.+30     	; 0x75c <vfprintf+0x260>
 73e:	b5 c0       	rjmp	.+362    	; 0x8aa <__stack+0x4b>
 740:	80 37       	cpi	r24, 0x70	; 112
 742:	19 f0       	breq	.+6      	; 0x74a <vfprintf+0x24e>
 744:	88 37       	cpi	r24, 0x78	; 120
 746:	21 f0       	breq	.+8      	; 0x750 <vfprintf+0x254>
 748:	b0 c0       	rjmp	.+352    	; 0x8aa <__stack+0x4b>
 74a:	e9 2f       	mov	r30, r25
 74c:	e0 61       	ori	r30, 0x10	; 16
 74e:	be 2e       	mov	r11, r30
 750:	b4 fe       	sbrs	r11, 4
 752:	0d c0       	rjmp	.+26     	; 0x76e <vfprintf+0x272>
 754:	fb 2d       	mov	r31, r11
 756:	f4 60       	ori	r31, 0x04	; 4
 758:	bf 2e       	mov	r11, r31
 75a:	09 c0       	rjmp	.+18     	; 0x76e <vfprintf+0x272>
 75c:	34 fe       	sbrs	r3, 4
 75e:	0a c0       	rjmp	.+20     	; 0x774 <vfprintf+0x278>
 760:	29 2f       	mov	r18, r25
 762:	26 60       	ori	r18, 0x06	; 6
 764:	b2 2e       	mov	r11, r18
 766:	06 c0       	rjmp	.+12     	; 0x774 <vfprintf+0x278>
 768:	28 e0       	ldi	r18, 0x08	; 8
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	05 c0       	rjmp	.+10     	; 0x778 <vfprintf+0x27c>
 76e:	20 e1       	ldi	r18, 0x10	; 16
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x27c>
 774:	20 e1       	ldi	r18, 0x10	; 16
 776:	32 e0       	ldi	r19, 0x02	; 2
 778:	f8 01       	movw	r30, r16
 77a:	b7 fe       	sbrs	r11, 7
 77c:	07 c0       	rjmp	.+14     	; 0x78c <vfprintf+0x290>
 77e:	60 81       	ld	r22, Z
 780:	71 81       	ldd	r23, Z+1	; 0x01
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0x29c>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 5f       	subi	r16, 0xFE	; 254
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	a3 01       	movw	r20, r6
 79a:	0e 94 b1 04 	call	0x962	; 0x962 <__ultoa_invert>
 79e:	88 2e       	mov	r8, r24
 7a0:	86 18       	sub	r8, r6
 7a2:	fb 2d       	mov	r31, r11
 7a4:	ff 77       	andi	r31, 0x7F	; 127
 7a6:	3f 2e       	mov	r3, r31
 7a8:	36 fe       	sbrs	r3, 6
 7aa:	0d c0       	rjmp	.+26     	; 0x7c6 <vfprintf+0x2ca>
 7ac:	23 2d       	mov	r18, r3
 7ae:	2e 7f       	andi	r18, 0xFE	; 254
 7b0:	a2 2e       	mov	r10, r18
 7b2:	89 14       	cp	r8, r9
 7b4:	58 f4       	brcc	.+22     	; 0x7cc <vfprintf+0x2d0>
 7b6:	34 fe       	sbrs	r3, 4
 7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <vfprintf+0x2d4>
 7ba:	32 fc       	sbrc	r3, 2
 7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <vfprintf+0x2d4>
 7be:	83 2d       	mov	r24, r3
 7c0:	8e 7e       	andi	r24, 0xEE	; 238
 7c2:	a8 2e       	mov	r10, r24
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <vfprintf+0x2d4>
 7c6:	b8 2c       	mov	r11, r8
 7c8:	a3 2c       	mov	r10, r3
 7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <vfprintf+0x2d6>
 7cc:	b8 2c       	mov	r11, r8
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <vfprintf+0x2d6>
 7d0:	b9 2c       	mov	r11, r9
 7d2:	a4 fe       	sbrs	r10, 4
 7d4:	0f c0       	rjmp	.+30     	; 0x7f4 <vfprintf+0x2f8>
 7d6:	fe 01       	movw	r30, r28
 7d8:	e8 0d       	add	r30, r8
 7da:	f1 1d       	adc	r31, r1
 7dc:	80 81       	ld	r24, Z
 7de:	80 33       	cpi	r24, 0x30	; 48
 7e0:	21 f4       	brne	.+8      	; 0x7ea <vfprintf+0x2ee>
 7e2:	9a 2d       	mov	r25, r10
 7e4:	99 7e       	andi	r25, 0xE9	; 233
 7e6:	a9 2e       	mov	r10, r25
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <vfprintf+0x300>
 7ea:	a2 fe       	sbrs	r10, 2
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <vfprintf+0x2fe>
 7ee:	b3 94       	inc	r11
 7f0:	b3 94       	inc	r11
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <vfprintf+0x300>
 7f4:	8a 2d       	mov	r24, r10
 7f6:	86 78       	andi	r24, 0x86	; 134
 7f8:	09 f0       	breq	.+2      	; 0x7fc <vfprintf+0x300>
 7fa:	b3 94       	inc	r11
 7fc:	a3 fc       	sbrc	r10, 3
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <vfprintf+0x326>
 800:	a0 fe       	sbrs	r10, 0
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0x314>
 804:	b2 14       	cp	r11, r2
 806:	88 f4       	brcc	.+34     	; 0x82a <vfprintf+0x32e>
 808:	28 0c       	add	r2, r8
 80a:	92 2c       	mov	r9, r2
 80c:	9b 18       	sub	r9, r11
 80e:	0e c0       	rjmp	.+28     	; 0x82c <vfprintf+0x330>
 810:	b2 14       	cp	r11, r2
 812:	60 f4       	brcc	.+24     	; 0x82c <vfprintf+0x330>
 814:	b6 01       	movw	r22, r12
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 81e:	b3 94       	inc	r11
 820:	f7 cf       	rjmp	.-18     	; 0x810 <vfprintf+0x314>
 822:	b2 14       	cp	r11, r2
 824:	18 f4       	brcc	.+6      	; 0x82c <vfprintf+0x330>
 826:	2b 18       	sub	r2, r11
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0x332>
 82a:	98 2c       	mov	r9, r8
 82c:	21 2c       	mov	r2, r1
 82e:	a4 fe       	sbrs	r10, 4
 830:	10 c0       	rjmp	.+32     	; 0x852 <vfprintf+0x356>
 832:	b6 01       	movw	r22, r12
 834:	80 e3       	ldi	r24, 0x30	; 48
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 83c:	a2 fe       	sbrs	r10, 2
 83e:	17 c0       	rjmp	.+46     	; 0x86e <__stack+0xf>
 840:	a1 fc       	sbrc	r10, 1
 842:	03 c0       	rjmp	.+6      	; 0x84a <vfprintf+0x34e>
 844:	88 e7       	ldi	r24, 0x78	; 120
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x352>
 84a:	88 e5       	ldi	r24, 0x58	; 88
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	b6 01       	movw	r22, r12
 850:	0c c0       	rjmp	.+24     	; 0x86a <__stack+0xb>
 852:	8a 2d       	mov	r24, r10
 854:	86 78       	andi	r24, 0x86	; 134
 856:	59 f0       	breq	.+22     	; 0x86e <__stack+0xf>
 858:	a1 fe       	sbrs	r10, 1
 85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
 85c:	8b e2       	ldi	r24, 0x2B	; 43
 85e:	01 c0       	rjmp	.+2      	; 0x862 <__stack+0x3>
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	a7 fc       	sbrc	r10, 7
 864:	8d e2       	ldi	r24, 0x2D	; 45
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 86e:	89 14       	cp	r8, r9
 870:	38 f4       	brcc	.+14     	; 0x880 <__stack+0x21>
 872:	b6 01       	movw	r22, r12
 874:	80 e3       	ldi	r24, 0x30	; 48
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 87c:	9a 94       	dec	r9
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <__stack+0xf>
 880:	8a 94       	dec	r8
 882:	f3 01       	movw	r30, r6
 884:	e8 0d       	add	r30, r8
 886:	f1 1d       	adc	r31, r1
 888:	80 81       	ld	r24, Z
 88a:	b6 01       	movw	r22, r12
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 892:	81 10       	cpse	r8, r1
 894:	f5 cf       	rjmp	.-22     	; 0x880 <__stack+0x21>
 896:	22 20       	and	r2, r2
 898:	09 f4       	brne	.+2      	; 0x89c <__stack+0x3d>
 89a:	42 ce       	rjmp	.-892    	; 0x520 <vfprintf+0x24>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f6 cf       	rjmp	.-20     	; 0x896 <__stack+0x37>
 8aa:	f6 01       	movw	r30, r12
 8ac:	86 81       	ldd	r24, Z+6	; 0x06
 8ae:	97 81       	ldd	r25, Z+7	; 0x07
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	2b 96       	adiw	r28, 0x0b	; 11
 8b8:	e2 e1       	ldi	r30, 0x12	; 18
 8ba:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__epilogue_restores__>

000008be <strnlen_P>:
 8be:	fc 01       	movw	r30, r24
 8c0:	05 90       	lpm	r0, Z+
 8c2:	61 50       	subi	r22, 0x01	; 1
 8c4:	70 40       	sbci	r23, 0x00	; 0
 8c6:	01 10       	cpse	r0, r1
 8c8:	d8 f7       	brcc	.-10     	; 0x8c0 <strnlen_P+0x2>
 8ca:	80 95       	com	r24
 8cc:	90 95       	com	r25
 8ce:	8e 0f       	add	r24, r30
 8d0:	9f 1f       	adc	r25, r31
 8d2:	08 95       	ret

000008d4 <strnlen>:
 8d4:	fc 01       	movw	r30, r24
 8d6:	61 50       	subi	r22, 0x01	; 1
 8d8:	70 40       	sbci	r23, 0x00	; 0
 8da:	01 90       	ld	r0, Z+
 8dc:	01 10       	cpse	r0, r1
 8de:	d8 f7       	brcc	.-10     	; 0x8d6 <strnlen+0x2>
 8e0:	80 95       	com	r24
 8e2:	90 95       	com	r25
 8e4:	8e 0f       	add	r24, r30
 8e6:	9f 1f       	adc	r25, r31
 8e8:	08 95       	ret

000008ea <fputc>:
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	fb 01       	movw	r30, r22
 8f4:	23 81       	ldd	r18, Z+3	; 0x03
 8f6:	21 fd       	sbrc	r18, 1
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <fputc+0x16>
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	9f ef       	ldi	r25, 0xFF	; 255
 8fe:	2c c0       	rjmp	.+88     	; 0x958 <fputc+0x6e>
 900:	22 ff       	sbrs	r18, 2
 902:	16 c0       	rjmp	.+44     	; 0x930 <fputc+0x46>
 904:	46 81       	ldd	r20, Z+6	; 0x06
 906:	57 81       	ldd	r21, Z+7	; 0x07
 908:	24 81       	ldd	r18, Z+4	; 0x04
 90a:	35 81       	ldd	r19, Z+5	; 0x05
 90c:	42 17       	cp	r20, r18
 90e:	53 07       	cpc	r21, r19
 910:	44 f4       	brge	.+16     	; 0x922 <fputc+0x38>
 912:	a0 81       	ld	r26, Z
 914:	b1 81       	ldd	r27, Z+1	; 0x01
 916:	9d 01       	movw	r18, r26
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	31 83       	std	Z+1, r19	; 0x01
 91e:	20 83       	st	Z, r18
 920:	8c 93       	st	X, r24
 922:	26 81       	ldd	r18, Z+6	; 0x06
 924:	37 81       	ldd	r19, Z+7	; 0x07
 926:	2f 5f       	subi	r18, 0xFF	; 255
 928:	3f 4f       	sbci	r19, 0xFF	; 255
 92a:	37 83       	std	Z+7, r19	; 0x07
 92c:	26 83       	std	Z+6, r18	; 0x06
 92e:	14 c0       	rjmp	.+40     	; 0x958 <fputc+0x6e>
 930:	8b 01       	movw	r16, r22
 932:	ec 01       	movw	r28, r24
 934:	fb 01       	movw	r30, r22
 936:	00 84       	ldd	r0, Z+8	; 0x08
 938:	f1 85       	ldd	r31, Z+9	; 0x09
 93a:	e0 2d       	mov	r30, r0
 93c:	09 95       	icall
 93e:	89 2b       	or	r24, r25
 940:	e1 f6       	brne	.-72     	; 0x8fa <fputc+0x10>
 942:	d8 01       	movw	r26, r16
 944:	16 96       	adiw	r26, 0x06	; 6
 946:	8d 91       	ld	r24, X+
 948:	9c 91       	ld	r25, X
 94a:	17 97       	sbiw	r26, 0x07	; 7
 94c:	01 96       	adiw	r24, 0x01	; 1
 94e:	17 96       	adiw	r26, 0x07	; 7
 950:	9c 93       	st	X, r25
 952:	8e 93       	st	-X, r24
 954:	16 97       	sbiw	r26, 0x06	; 6
 956:	ce 01       	movw	r24, r28
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	08 95       	ret

00000962 <__ultoa_invert>:
 962:	fa 01       	movw	r30, r20
 964:	aa 27       	eor	r26, r26
 966:	28 30       	cpi	r18, 0x08	; 8
 968:	51 f1       	breq	.+84     	; 0x9be <__ultoa_invert+0x5c>
 96a:	20 31       	cpi	r18, 0x10	; 16
 96c:	81 f1       	breq	.+96     	; 0x9ce <__ultoa_invert+0x6c>
 96e:	e8 94       	clt
 970:	6f 93       	push	r22
 972:	6e 7f       	andi	r22, 0xFE	; 254
 974:	6e 5f       	subi	r22, 0xFE	; 254
 976:	7f 4f       	sbci	r23, 0xFF	; 255
 978:	8f 4f       	sbci	r24, 0xFF	; 255
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	af 4f       	sbci	r26, 0xFF	; 255
 97e:	b1 e0       	ldi	r27, 0x01	; 1
 980:	3e d0       	rcall	.+124    	; 0x9fe <__ultoa_invert+0x9c>
 982:	b4 e0       	ldi	r27, 0x04	; 4
 984:	3c d0       	rcall	.+120    	; 0x9fe <__ultoa_invert+0x9c>
 986:	67 0f       	add	r22, r23
 988:	78 1f       	adc	r23, r24
 98a:	89 1f       	adc	r24, r25
 98c:	9a 1f       	adc	r25, r26
 98e:	a1 1d       	adc	r26, r1
 990:	68 0f       	add	r22, r24
 992:	79 1f       	adc	r23, r25
 994:	8a 1f       	adc	r24, r26
 996:	91 1d       	adc	r25, r1
 998:	a1 1d       	adc	r26, r1
 99a:	6a 0f       	add	r22, r26
 99c:	71 1d       	adc	r23, r1
 99e:	81 1d       	adc	r24, r1
 9a0:	91 1d       	adc	r25, r1
 9a2:	a1 1d       	adc	r26, r1
 9a4:	20 d0       	rcall	.+64     	; 0x9e6 <__ultoa_invert+0x84>
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__ultoa_invert+0x48>
 9a8:	68 94       	set
 9aa:	3f 91       	pop	r19
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	26 9f       	mul	r18, r22
 9b0:	11 24       	eor	r1, r1
 9b2:	30 19       	sub	r19, r0
 9b4:	30 5d       	subi	r19, 0xD0	; 208
 9b6:	31 93       	st	Z+, r19
 9b8:	de f6       	brtc	.-74     	; 0x970 <__ultoa_invert+0xe>
 9ba:	cf 01       	movw	r24, r30
 9bc:	08 95       	ret
 9be:	46 2f       	mov	r20, r22
 9c0:	47 70       	andi	r20, 0x07	; 7
 9c2:	40 5d       	subi	r20, 0xD0	; 208
 9c4:	41 93       	st	Z+, r20
 9c6:	b3 e0       	ldi	r27, 0x03	; 3
 9c8:	0f d0       	rcall	.+30     	; 0x9e8 <__ultoa_invert+0x86>
 9ca:	c9 f7       	brne	.-14     	; 0x9be <__ultoa_invert+0x5c>
 9cc:	f6 cf       	rjmp	.-20     	; 0x9ba <__ultoa_invert+0x58>
 9ce:	46 2f       	mov	r20, r22
 9d0:	4f 70       	andi	r20, 0x0F	; 15
 9d2:	40 5d       	subi	r20, 0xD0	; 208
 9d4:	4a 33       	cpi	r20, 0x3A	; 58
 9d6:	18 f0       	brcs	.+6      	; 0x9de <__ultoa_invert+0x7c>
 9d8:	49 5d       	subi	r20, 0xD9	; 217
 9da:	31 fd       	sbrc	r19, 1
 9dc:	40 52       	subi	r20, 0x20	; 32
 9de:	41 93       	st	Z+, r20
 9e0:	02 d0       	rcall	.+4      	; 0x9e6 <__ultoa_invert+0x84>
 9e2:	a9 f7       	brne	.-22     	; 0x9ce <__ultoa_invert+0x6c>
 9e4:	ea cf       	rjmp	.-44     	; 0x9ba <__ultoa_invert+0x58>
 9e6:	b4 e0       	ldi	r27, 0x04	; 4
 9e8:	a6 95       	lsr	r26
 9ea:	97 95       	ror	r25
 9ec:	87 95       	ror	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	ba 95       	dec	r27
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__ultoa_invert+0x86>
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	61 05       	cpc	r22, r1
 9fa:	71 05       	cpc	r23, r1
 9fc:	08 95       	ret
 9fe:	9b 01       	movw	r18, r22
 a00:	ac 01       	movw	r20, r24
 a02:	0a 2e       	mov	r0, r26
 a04:	06 94       	lsr	r0
 a06:	57 95       	ror	r21
 a08:	47 95       	ror	r20
 a0a:	37 95       	ror	r19
 a0c:	27 95       	ror	r18
 a0e:	ba 95       	dec	r27
 a10:	c9 f7       	brne	.-14     	; 0xa04 <__ultoa_invert+0xa2>
 a12:	62 0f       	add	r22, r18
 a14:	73 1f       	adc	r23, r19
 a16:	84 1f       	adc	r24, r20
 a18:	95 1f       	adc	r25, r21
 a1a:	a0 1d       	adc	r26, r0
 a1c:	08 95       	ret

00000a1e <__prologue_saves__>:
 a1e:	2f 92       	push	r2
 a20:	3f 92       	push	r3
 a22:	4f 92       	push	r4
 a24:	5f 92       	push	r5
 a26:	6f 92       	push	r6
 a28:	7f 92       	push	r7
 a2a:	8f 92       	push	r8
 a2c:	9f 92       	push	r9
 a2e:	af 92       	push	r10
 a30:	bf 92       	push	r11
 a32:	cf 92       	push	r12
 a34:	df 92       	push	r13
 a36:	ef 92       	push	r14
 a38:	ff 92       	push	r15
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	ca 1b       	sub	r28, r26
 a48:	db 0b       	sbc	r29, r27
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	09 94       	ijmp

00000a56 <__epilogue_restores__>:
 a56:	2a 88       	ldd	r2, Y+18	; 0x12
 a58:	39 88       	ldd	r3, Y+17	; 0x11
 a5a:	48 88       	ldd	r4, Y+16	; 0x10
 a5c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a5e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a60:	7d 84       	ldd	r7, Y+13	; 0x0d
 a62:	8c 84       	ldd	r8, Y+12	; 0x0c
 a64:	9b 84       	ldd	r9, Y+11	; 0x0b
 a66:	aa 84       	ldd	r10, Y+10	; 0x0a
 a68:	b9 84       	ldd	r11, Y+9	; 0x09
 a6a:	c8 84       	ldd	r12, Y+8	; 0x08
 a6c:	df 80       	ldd	r13, Y+7	; 0x07
 a6e:	ee 80       	ldd	r14, Y+6	; 0x06
 a70:	fd 80       	ldd	r15, Y+5	; 0x05
 a72:	0c 81       	ldd	r16, Y+4	; 0x04
 a74:	1b 81       	ldd	r17, Y+3	; 0x03
 a76:	aa 81       	ldd	r26, Y+2	; 0x02
 a78:	b9 81       	ldd	r27, Y+1	; 0x01
 a7a:	ce 0f       	add	r28, r30
 a7c:	d1 1d       	adc	r29, r1
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	cd bf       	out	0x3d, r28	; 61
 a88:	ed 01       	movw	r28, r26
 a8a:	08 95       	ret

00000a8c <_exit>:
 a8c:	f8 94       	cli

00000a8e <__stop_program>:
 a8e:	ff cf       	rjmp	.-2      	; 0xa8e <__stop_program>
