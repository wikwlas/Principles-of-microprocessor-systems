   1               		.file	"eeprom.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	EE_write_byte
  12               	EE_write_byte:
  13               	.LFB6:
  14               		.file 1 "eeprom.c"
   1:eeprom.c      **** #include "eeprom.h"
   2:eeprom.c      **** 
   3:eeprom.c      **** void EE_write_byte(uint16_t addr, uint8_t data) {
  15               		.loc 1 3 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 1F93      		push r17
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 17, -2
  22 0002 CF93      		push r28
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 28, -3
  26 0004 DF93      		push r29
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 29, -4
  30               	/* prologue: function */
  31               	/* frame size = 0 */
  32               	/* stack size = 3 */
  33               	.L__stack_usage = 3
  34 0006 D82F      		mov r29,r24
  35 0008 192F      		mov r17,r25
  36 000a C62F      		mov r28,r22
   4:eeprom.c      **** 	I2C_start();
  37               		.loc 1 4 0
  38 000c 0E94 0000 		call I2C_start
  39               	.LVL1:
   5:eeprom.c      **** 	I2C_write(EE_ADDR_W);
  40               		.loc 1 5 0
  41 0010 86EA      		ldi r24,lo8(-90)
  42 0012 0E94 0000 		call I2C_write
  43               	.LVL2:
   6:eeprom.c      **** 	I2C_write(addr>>8);
  44               		.loc 1 6 0
  45 0016 812F      		mov r24,r17
  46 0018 0E94 0000 		call I2C_write
  47               	.LVL3:
   7:eeprom.c      **** 	I2C_write(addr);
  48               		.loc 1 7 0
  49 001c 8D2F      		mov r24,r29
  50 001e 0E94 0000 		call I2C_write
  51               	.LVL4:
   8:eeprom.c      **** 	I2C_write(data);
  52               		.loc 1 8 0
  53 0022 8C2F      		mov r24,r28
  54 0024 0E94 0000 		call I2C_write
  55               	.LVL5:
   9:eeprom.c      **** 	I2C_stop();
  56               		.loc 1 9 0
  57 0028 0E94 0000 		call I2C_stop
  58               	.LVL6:
  59               	.LBB7:
  60               	.LBB8:
  61               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  62               		.loc 2 187 0
  63 002c 8FE3      		ldi r24,lo8(-25537)
  64 002e 9CE9      		ldi r25,hi8(-25537)
  65 0030 0197      	1:	sbiw r24,1
  66 0032 01F4      		brne 1b
  67 0034 00C0      		rjmp .
  68 0036 0000      		nop
  69               	.LVL7:
  70               	/* epilogue start */
  71               	.LBE8:
  72               	.LBE7:
  10:eeprom.c      **** 	_delay_ms(10);
  11:eeprom.c      **** }
  73               		.loc 1 11 0
  74 0038 DF91      		pop r29
  75 003a CF91      		pop r28
  76               	.LVL8:
  77 003c 1F91      		pop r17
  78 003e 0895      		ret
  79               		.cfi_endproc
  80               	.LFE6:
  82               	.global	EE_read_byte
  84               	EE_read_byte:
  85               	.LFB7:
  12:eeprom.c      **** uint8_t EE_read_byte(uint16_t addr) {
  86               		.loc 1 12 0
  87               		.cfi_startproc
  88               	.LVL9:
  89 0040 0F93      		push r16
  90               	.LCFI3:
  91               		.cfi_def_cfa_offset 3
  92               		.cfi_offset 16, -2
  93 0042 1F93      		push r17
  94               	.LCFI4:
  95               		.cfi_def_cfa_offset 4
  96               		.cfi_offset 17, -3
  97 0044 CF93      		push r28
  98               	.LCFI5:
  99               		.cfi_def_cfa_offset 5
 100               		.cfi_offset 28, -4
 101 0046 DF93      		push r29
 102               	.LCFI6:
 103               		.cfi_def_cfa_offset 6
 104               		.cfi_offset 29, -5
 105 0048 1F92      		push __zero_reg__
 106               	.LCFI7:
 107               		.cfi_def_cfa_offset 7
 108 004a CDB7      		in r28,__SP_L__
 109 004c DEB7      		in r29,__SP_H__
 110               	.LCFI8:
 111               		.cfi_def_cfa_register 28
 112               	/* prologue: function */
 113               	/* frame size = 1 */
 114               	/* stack size = 5 */
 115               	.L__stack_usage = 5
 116 004e 182F      		mov r17,r24
 117 0050 092F      		mov r16,r25
  13:eeprom.c      **** 	uint8_t data;
  14:eeprom.c      **** 	I2C_start();
 118               		.loc 1 14 0
 119 0052 0E94 0000 		call I2C_start
 120               	.LVL10:
  15:eeprom.c      **** 	I2C_write(EE_ADDR_W);
 121               		.loc 1 15 0
 122 0056 86EA      		ldi r24,lo8(-90)
 123 0058 0E94 0000 		call I2C_write
 124               	.LVL11:
  16:eeprom.c      **** 	I2C_write(addr>>8);
 125               		.loc 1 16 0
 126 005c 802F      		mov r24,r16
 127 005e 0E94 0000 		call I2C_write
 128               	.LVL12:
  17:eeprom.c      **** 	I2C_write(addr);
 129               		.loc 1 17 0
 130 0062 812F      		mov r24,r17
 131 0064 0E94 0000 		call I2C_write
 132               	.LVL13:
  18:eeprom.c      **** 	I2C_start();
 133               		.loc 1 18 0
 134 0068 0E94 0000 		call I2C_start
 135               	.LVL14:
  19:eeprom.c      **** 	I2C_write(EE_ADDR_R);
 136               		.loc 1 19 0
 137 006c 87EA      		ldi r24,lo8(-89)
 138 006e 0E94 0000 		call I2C_write
 139               	.LVL15:
  20:eeprom.c      **** 	I2C_read(&data, NO_ACK);
 140               		.loc 1 20 0
 141 0072 60E0      		ldi r22,0
 142 0074 CE01      		movw r24,r28
 143 0076 0196      		adiw r24,1
 144 0078 0E94 0000 		call I2C_read
 145               	.LVL16:
  21:eeprom.c      **** 	I2C_stop();
 146               		.loc 1 21 0
 147 007c 0E94 0000 		call I2C_stop
 148               	.LVL17:
  22:eeprom.c      **** 	return data;
  23:eeprom.c      **** }
 149               		.loc 1 23 0
 150 0080 8981      		ldd r24,Y+1
 151               	/* epilogue start */
 152 0082 0F90      		pop __tmp_reg__
 153 0084 DF91      		pop r29
 154 0086 CF91      		pop r28
 155 0088 1F91      		pop r17
 156 008a 0F91      		pop r16
 157 008c 0895      		ret
 158               		.cfi_endproc
 159               	.LFE7:
 161               	.global	EE_write_multi
 163               	EE_write_multi:
 164               	.LFB8:
  24:eeprom.c      **** 
  25:eeprom.c      **** void EE_write_multi(uint16_t addr, uint8_t len, uint8_t *ptr) {
 165               		.loc 1 25 0
 166               		.cfi_startproc
 167               	.LVL18:
 168 008e FF92      		push r15
 169               	.LCFI9:
 170               		.cfi_def_cfa_offset 3
 171               		.cfi_offset 15, -2
 172 0090 0F93      		push r16
 173               	.LCFI10:
 174               		.cfi_def_cfa_offset 4
 175               		.cfi_offset 16, -3
 176 0092 1F93      		push r17
 177               	.LCFI11:
 178               		.cfi_def_cfa_offset 5
 179               		.cfi_offset 17, -4
 180 0094 CF93      		push r28
 181               	.LCFI12:
 182               		.cfi_def_cfa_offset 6
 183               		.cfi_offset 28, -5
 184 0096 DF93      		push r29
 185               	.LCFI13:
 186               		.cfi_def_cfa_offset 7
 187               		.cfi_offset 29, -6
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 5 */
 191               	.L__stack_usage = 5
 192 0098 EC01      		movw r28,r24
 193 009a 162F      		mov r17,r22
 194 009c F42E      		mov r15,r20
 195 009e 052F      		mov r16,r21
  26:eeprom.c      **** 	I2C_start();
 196               		.loc 1 26 0
 197 00a0 0E94 0000 		call I2C_start
 198               	.LVL19:
  27:eeprom.c      **** 	I2C_write(EE_ADDR_W);
 199               		.loc 1 27 0
 200 00a4 86EA      		ldi r24,lo8(-90)
 201 00a6 0E94 0000 		call I2C_write
 202               	.LVL20:
  28:eeprom.c      **** 	I2C_write(addr>>8);
 203               		.loc 1 28 0
 204 00aa 8D2F      		mov r24,r29
 205 00ac 0E94 0000 		call I2C_write
 206               	.LVL21:
  29:eeprom.c      **** 	I2C_write(addr);
 207               		.loc 1 29 0
 208 00b0 8C2F      		mov r24,r28
 209 00b2 0E94 0000 		call I2C_write
 210               	.LVL22:
 211 00b6 CF2D      		mov r28,r15
 212               	.LVL23:
 213 00b8 D02F      		mov r29,r16
 214 00ba CE01      		movw r24,r28
 215 00bc 810F      		add r24,r17
 216 00be 911D      		adc r25,__zero_reg__
 217 00c0 8C01      		movw r16,r24
 218               	.LVL24:
 219               	.L4:
 220               	.LBB9:
  30:eeprom.c      **** 	for (uint8_t i = 0; i < len; i++) {
 221               		.loc 1 30 0 discriminator 1
 222 00c2 C017      		cp r28,r16
 223 00c4 D107      		cpc r29,r17
 224 00c6 01F0      		breq .L7
 225               	.LVL25:
  31:eeprom.c      **** 		I2C_write(*(ptr++));
 226               		.loc 1 31 0 discriminator 3
 227 00c8 8991      		ld r24,Y+
 228               	.LVL26:
 229 00ca 0E94 0000 		call I2C_write
 230               	.LVL27:
 231 00ce 00C0      		rjmp .L4
 232               	.L7:
 233               	.LBE9:
  32:eeprom.c      **** 	}
  33:eeprom.c      **** 	I2C_stop();
 234               		.loc 1 33 0
 235 00d0 0E94 0000 		call I2C_stop
 236               	.LVL28:
 237               	.LBB10:
 238               	.LBB11:
 239               		.loc 2 187 0
 240 00d4 8FE3      		ldi r24,lo8(-25537)
 241 00d6 9CE9      		ldi r25,hi8(-25537)
 242 00d8 0197      	1:	sbiw r24,1
 243 00da 01F4      		brne 1b
 244 00dc 00C0      		rjmp .
 245 00de 0000      		nop
 246               	.LVL29:
 247               	/* epilogue start */
 248               	.LBE11:
 249               	.LBE10:
  34:eeprom.c      **** 	_delay_ms(10);
  35:eeprom.c      **** }
 250               		.loc 1 35 0
 251 00e0 DF91      		pop r29
 252 00e2 CF91      		pop r28
 253               	.LVL30:
 254 00e4 1F91      		pop r17
 255               	.LVL31:
 256 00e6 0F91      		pop r16
 257 00e8 FF90      		pop r15
 258 00ea 0895      		ret
 259               		.cfi_endproc
 260               	.LFE8:
 262               	.global	EE_read_multi
 264               	EE_read_multi:
 265               	.LFB9:
  36:eeprom.c      **** 
  37:eeprom.c      **** void EE_read_multi(uint16_t addr, uint8_t len, uint8_t *ptr) {
 266               		.loc 1 37 0
 267               		.cfi_startproc
 268               	.LVL32:
 269 00ec EF92      		push r14
 270               	.LCFI14:
 271               		.cfi_def_cfa_offset 3
 272               		.cfi_offset 14, -2
 273 00ee FF92      		push r15
 274               	.LCFI15:
 275               		.cfi_def_cfa_offset 4
 276               		.cfi_offset 15, -3
 277 00f0 1F93      		push r17
 278               	.LCFI16:
 279               		.cfi_def_cfa_offset 5
 280               		.cfi_offset 17, -4
 281 00f2 CF93      		push r28
 282               	.LCFI17:
 283               		.cfi_def_cfa_offset 6
 284               		.cfi_offset 28, -5
 285 00f4 DF93      		push r29
 286               	.LCFI18:
 287               		.cfi_def_cfa_offset 7
 288               		.cfi_offset 29, -6
 289               	/* prologue: function */
 290               	/* frame size = 0 */
 291               	/* stack size = 5 */
 292               	.L__stack_usage = 5
 293 00f6 F82E      		mov r15,r24
 294 00f8 E92E      		mov r14,r25
 295 00fa C62F      		mov r28,r22
 296 00fc 142F      		mov r17,r20
 297 00fe D52F      		mov r29,r21
  38:eeprom.c      **** 	I2C_start();
 298               		.loc 1 38 0
 299 0100 0E94 0000 		call I2C_start
 300               	.LVL33:
  39:eeprom.c      **** 	I2C_write(EE_ADDR_W);
 301               		.loc 1 39 0
 302 0104 86EA      		ldi r24,lo8(-90)
 303 0106 0E94 0000 		call I2C_write
 304               	.LVL34:
  40:eeprom.c      **** 	I2C_write(addr>>8);
 305               		.loc 1 40 0
 306 010a 8E2D      		mov r24,r14
 307 010c 0E94 0000 		call I2C_write
 308               	.LVL35:
  41:eeprom.c      **** 	I2C_write(addr);
 309               		.loc 1 41 0
 310 0110 8F2D      		mov r24,r15
 311 0112 0E94 0000 		call I2C_write
 312               	.LVL36:
  42:eeprom.c      **** 	I2C_start();
 313               		.loc 1 42 0
 314 0116 0E94 0000 		call I2C_start
 315               	.LVL37:
  43:eeprom.c      **** 	I2C_write(EE_ADDR_R);
 316               		.loc 1 43 0
 317 011a 87EA      		ldi r24,lo8(-89)
 318 011c 0E94 0000 		call I2C_write
 319               	.LVL38:
 320               	.LBB12:
  44:eeprom.c      **** 	for (uint8_t i = 0; i < len-1; i++) {
 321               		.loc 1 44 0
 322 0120 812F      		mov r24,r17
 323 0122 9D2F      		mov r25,r29
 324 0124 D0E0      		ldi r29,0
 325 0126 2197      		sbiw r28,1
 326               	.LVL39:
 327               	.L9:
 328               		.loc 1 44 0 is_stmt 0 discriminator 1
 329 0128 282F      		mov r18,r24
 330 012a 211B      		sub r18,r17
 331 012c 30E0      		ldi r19,0
 332 012e 2C17      		cp r18,r28
 333 0130 3D07      		cpc r19,r29
 334 0132 04F4      		brge .L11
  45:eeprom.c      **** 		I2C_read(ptr++, ACK);
 335               		.loc 1 45 0 is_stmt 1 discriminator 3
 336 0134 7C01      		movw r14,r24
 337 0136 2FEF      		ldi r18,-1
 338 0138 E21A      		sub r14,r18
 339 013a F20A      		sbc r15,r18
 340               	.LVL40:
 341 013c 61E0      		ldi r22,lo8(1)
 342 013e 0E94 0000 		call I2C_read
 343               	.LVL41:
 344 0142 C701      		movw r24,r14
 345 0144 00C0      		rjmp .L9
 346               	.LVL42:
 347               	.L11:
 348               	.LBE12:
  46:eeprom.c      **** 	}
  47:eeprom.c      **** 	I2C_read(ptr, NO_ACK);
 349               		.loc 1 47 0
 350 0146 60E0      		ldi r22,0
 351 0148 0E94 0000 		call I2C_read
 352               	.LVL43:
 353               	/* epilogue start */
  48:eeprom.c      **** 	I2C_stop();
  49:eeprom.c      **** }
 354               		.loc 1 49 0
 355 014c DF91      		pop r29
 356 014e CF91      		pop r28
 357 0150 1F91      		pop r17
 358 0152 FF90      		pop r15
 359 0154 EF90      		pop r14
  48:eeprom.c      **** 	I2C_stop();
 360               		.loc 1 48 0
 361 0156 0C94 0000 		jmp I2C_stop
 362               	.LVL44:
 363               		.cfi_endproc
 364               	.LFE9:
 366               	.Letext0:
 367               		.file 3 "/usr/lib/avr/include/stdint.h"
 368               		.file 4 "twi.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 eeprom.c
     /tmp/ccVj3yPi.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVj3yPi.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVj3yPi.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVj3yPi.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVj3yPi.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVj3yPi.s:12     .text:0000000000000000 EE_write_byte
     /tmp/ccVj3yPi.s:84     .text:0000000000000040 EE_read_byte
     /tmp/ccVj3yPi.s:163    .text:000000000000008e EE_write_multi
     /tmp/ccVj3yPi.s:264    .text:00000000000000ec EE_read_multi

UNDEFINED SYMBOLS
I2C_start
I2C_write
I2C_stop
I2C_read
