
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000134  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  000001d6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000632  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000580  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f7  00000000  00000000  00000dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c6  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c4  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8a:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_13>:

volatile uint8_t znak = 0;

volatile char *pbuf;

ISR(USART_RXC_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
	znak = UDR;
  9e:	8c b1       	in	r24, 0x0c	; 12
  a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_15>:

ISR(USART_TXC_vect) {
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	if(*pbuf) {
  c2:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <pbuf>
  c6:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <pbuf+0x1>
  ca:	80 81       	ld	r24, Z
  cc:	88 23       	and	r24, r24
  ce:	41 f0       	breq	.+16     	; 0xe0 <__vector_15+0x30>
		UDR =*(pbuf++);
  d0:	cf 01       	movw	r24, r30
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <pbuf+0x1>
  d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <pbuf>
  dc:	80 81       	ld	r24, Z
  de:	8c b9       	out	0x0c, r24	; 12
	}
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <USART_init>:

void USART_init(void) {
	UBRRH = (uint8_t) (MY_UBRR >> 8);
  f2:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t) (MY_UBRR & 0xff);
  f4:	19 b8       	out	0x09, r1	; 9
	UCSRB = (1<<RXCIE) | (1<<TXCIE) | (1<<RXEN) | (1<<TXEN);
  f6:	88 ed       	ldi	r24, 0xD8	; 216
  f8:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	08 95       	ret

00000100 <USART_send>:
}

void USART_send(char *tekst) {
	UDR=*tekst;
 100:	fc 01       	movw	r30, r24
 102:	21 91       	ld	r18, Z+
 104:	2c b9       	out	0x0c, r18	; 12
	pbuf= ++tekst;
 106:	f0 93 70 00 	sts	0x0070, r31	; 0x800070 <pbuf+0x1>
 10a:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <pbuf>
 10e:	08 95       	ret

00000110 <main>:
}

int main(void){
	USART_init(); //inicjalizacja portu szeregowego
 110:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	sei(); //wlaczenie przerwan globalnie
 114:	78 94       	sei
	
	USART_send("Hello\r\n");
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 80 00 	call	0x100	; 0x100 <USART_send>
	
	while(1){
		if (znak=='x') {
 11e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 122:	88 37       	cpi	r24, 0x78	; 120
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0xe>
			znak=0;
 126:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
			USART_send("OK\r\n");
 12a:	88 e6       	ldi	r24, 0x68	; 104
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	f5 cf       	rjmp	.-22     	; 0x11a <main+0xa>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
