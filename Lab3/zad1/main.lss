
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000826  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000826  000008ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800086  00800086  000008e0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de9  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f8  00000000  00000000  00001f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00002218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c3  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c5  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	49 6d       	ori	r20, 0xD9	; 217
  56:	20 68       	ori	r18, 0x80	; 128
  58:	65 72       	andi	r22, 0x25	; 37
  5a:	65 00       	.word	0x0065	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	10 e0       	ldi	r17, 0x00	; 0
  6a:	a0 e6       	ldi	r26, 0x60	; 96
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	e6 e2       	ldi	r30, 0x26	; 38
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a6 38       	cpi	r26, 0x86	; 134
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	a6 e8       	ldi	r26, 0x86	; 134
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ac 38       	cpi	r26, 0x8C	; 140
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  92:	0c 94 11 04 	jmp	0x822	; 0x822 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <lcd_write_command>:
    lcd_clear();

}

void lcd_write_command(uint8_t data) {
    LCD_PORT &= ~(1<<LCD_RS);
  9a:	da 98       	cbi	0x1b, 2	; 27
    LCD_PORT |= 1<<LCD_E;
  9c:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	9f 70       	andi	r25, 0x0F	; 15
  a2:	28 2f       	mov	r18, r24
  a4:	20 7f       	andi	r18, 0xF0	; 240
  a6:	92 2b       	or	r25, r18
  a8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	35 e0       	ldi	r19, 0x05	; 5
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_write_command+0x12>
  b0:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
  b2:	db 98       	cbi	0x1b, 3	; 27
  b4:	ef e8       	ldi	r30, 0x8F	; 143
  b6:	f1 e0       	ldi	r31, 0x01	; 1
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_write_command+0x1e>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_write_command+0x24>
  be:	00 00       	nop
    _delay_us(100);
    LCD_PORT |= 1<<LCD_E;
  c0:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
  c2:	2b b3       	in	r18, 0x1b	; 27
  c4:	2f 70       	andi	r18, 0x0F	; 15
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	82 2b       	or	r24, r18
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	35 e0       	ldi	r19, 0x05	; 5
  d4:	3a 95       	dec	r19
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_write_command+0x3a>
  d8:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
  da:	db 98       	cbi	0x1b, 3	; 27
  dc:	8f e8       	ldi	r24, 0x8F	; 143
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_write_command+0x46>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_write_command+0x4c>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <lcd_clear>:
    _delay_us(100);
}


void lcd_clear() {
    lcd_write_command(1);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	9f e1       	ldi	r25, 0x1F	; 31
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_clear+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_clear+0x10>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <lcdinit>:
    lcd_write_data(c);
    return 0;
}

void lcdinit(void) {
    LCD_PORT_DIR = 0xff; //ustawiamy linie portu wyswietlacza na wyjsciowe
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bb       	out	0x1a, r24	; 26
    LCD_PORT = 0x00; //ustawiamy stan niski na liniach portu wyswietlacza
 102:	1b ba       	out	0x1b, r1	; 27
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <lcdinit+0xc>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcdinit+0x16>
 114:	00 00       	nop
    _delay_ms(50);

    stdout = &mystdout; //przypisujemy strumien wyjsciowy stdout
 116:	80 e6       	ldi	r24, 0x60	; 96
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x3>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end+0x2>

    LCD_PORT &= ~(1<<LCD_RS); //wybieramy rejestr instrukcji IR
 122:	da 98       	cbi	0x1b, 2	; 27
 124:	93 e0       	ldi	r25, 0x03	; 3
    for (uint8_t i = 0; i < 3; i++) {
        LCD_PORT |= 1<<LCD_E;
 126:	db 9a       	sbi	0x1b, 3	; 27
        LCD_PORT = (LCD_PORT & 0x0f) | 0x30;
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	80 63       	ori	r24, 0x30	; 48
 12e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	e5 e0       	ldi	r30, 0x05	; 5
 132:	ea 95       	dec	r30
 134:	f1 f7       	brne	.-4      	; 0x132 <lcdinit+0x34>
 136:	00 00       	nop
         _delay_us(1);
        LCD_PORT &= ~(1<<LCD_E);
 138:	db 98       	cbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	ef e1       	ldi	r30, 0x1F	; 31
 13c:	fe e4       	ldi	r31, 0x4E	; 78
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcdinit+0x40>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcdinit+0x46>
 144:	00 00       	nop
 146:	91 50       	subi	r25, 0x01	; 1
    _delay_ms(50);

    stdout = &mystdout; //przypisujemy strumien wyjsciowy stdout

    LCD_PORT &= ~(1<<LCD_RS); //wybieramy rejestr instrukcji IR
    for (uint8_t i = 0; i < 3; i++) {
 148:	71 f7       	brne	.-36     	; 0x126 <lcdinit+0x28>
         _delay_us(1);
        LCD_PORT &= ~(1<<LCD_E);
        _delay_ms(5);
    }

    LCD_PORT |= 1<<LCD_E;
 14a:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | 0x20;
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	80 62       	ori	r24, 0x20	; 32
 152:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	f5 e0       	ldi	r31, 0x05	; 5
 156:	fa 95       	dec	r31
 158:	f1 f7       	brne	.-4      	; 0x156 <lcdinit+0x58>
 15a:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 15c:	db 98       	cbi	0x1b, 3	; 27
 15e:	8f e8       	ldi	r24, 0x8F	; 143
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcdinit+0x64>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcdinit+0x6a>
 168:	00 00       	nop
    _delay_us(100);
    
    lcd_write_command(0x28);
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write_command>
    lcd_write_command(0x0c);
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write_command>
    lcd_write_command(0x06);
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write_command>

    lcd_clear();
 17c:	0c 94 75 00 	jmp	0xea	; 0xea <lcd_clear>

00000180 <lcd_write_data>:
    lcd_write_command(1);
    _delay_ms(2);
}

void lcd_write_data(uint8_t data) {
    LCD_PORT |= (1<<LCD_RS);
 180:	da 9a       	sbi	0x1b, 2	; 27
    LCD_PORT |= 1<<LCD_E;
 182:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | (data & 0xf0);
 184:	9b b3       	in	r25, 0x1b	; 27
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	28 2f       	mov	r18, r24
 18a:	20 7f       	andi	r18, 0xF0	; 240
 18c:	92 2b       	or	r25, r18
 18e:	9b bb       	out	0x1b, r25	; 27
 190:	35 e0       	ldi	r19, 0x05	; 5
 192:	3a 95       	dec	r19
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_write_data+0x12>
 196:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 198:	db 98       	cbi	0x1b, 3	; 27
 19a:	ef e8       	ldi	r30, 0x8F	; 143
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_write_data+0x1e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_write_data+0x24>
 1a4:	00 00       	nop
    _delay_us(100);
    LCD_PORT |= 1<<LCD_E;
 1a6:	db 9a       	sbi	0x1b, 3	; 27
    LCD_PORT = (LCD_PORT & 0x0f) | ((data & 0x0f)<<4);
 1a8:	2b b3       	in	r18, 0x1b	; 27
 1aa:	2f 70       	andi	r18, 0x0F	; 15
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	8f 9f       	mul	r24, r31
 1b0:	c0 01       	movw	r24, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	82 2b       	or	r24, r18
 1b6:	8b bb       	out	0x1b, r24	; 27
 1b8:	35 e0       	ldi	r19, 0x05	; 5
 1ba:	3a 95       	dec	r19
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_write_data+0x3a>
 1be:	00 00       	nop
    _delay_us(1);
    LCD_PORT &= ~(1<<LCD_E);
 1c0:	db 98       	cbi	0x1b, 3	; 27
 1c2:	8f e8       	ldi	r24, 0x8F	; 143
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_write_data+0x46>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_write_data+0x4c>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <lcd_print>:
static int lcd_print(char c, FILE *stream);

static FILE mystdout = FDEV_SETUP_STREAM(lcd_print, NULL, _FDEV_SETUP_WRITE);

static int lcd_print(char c, FILE *stream) {
    lcd_write_data(c);
 1d0:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write_data>
    return 0;
}
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret

000001da <lcd_set_xy>:
    LCD_PORT &= ~(1<<LCD_E);
    _delay_us(100);
}

void lcd_set_xy(uint8_t x, uint8_t y) {
    lcd_write_command(0x80 | (0x40*y + x)); //instrukcja do utawienia adresu pamieci wyswietlacza linia "1" jets od adresu 0x40 wiec mamy adres 0x40*y+x
 1da:	90 e4       	ldi	r25, 0x40	; 64
 1dc:	69 9f       	mul	r22, r25
 1de:	80 0d       	add	r24, r0
 1e0:	11 24       	eor	r1, r1
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <lcd_write_command>

000001e8 <lcd_write_text_xy>:
}

void lcd_write_text_xy(uint8_t x, uint8_t y, char *text) {
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	8a 01       	movw	r16, r20
    lcd_set_xy(x, y);
 1f2:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_set_xy>
 1f6:	e8 01       	movw	r28, r16
    while(*text != 0) { 
 1f8:	89 91       	ld	r24, Y+
 1fa:	88 23       	and	r24, r24
 1fc:	19 f0       	breq	.+6      	; 0x204 <lcd_write_text_xy+0x1c>
		//sprawdz czy znak rozny od 0, jesli tak to wyslij znak na wyswietlacz, zwieksz wskaznik o 1 - na nastepny znak
        lcd_write_data((uint8_t)*text);
 1fe:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write_data>
 202:	fa cf       	rjmp	.-12     	; 0x1f8 <lcd_write_text_xy+0x10>
        text++;
    }
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <lcd_write_text_P>:

void lcd_write_text_P(const char *text) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	fc 01       	movw	r30, r24
	register uint8_t ch;
	while( (ch = pgm_read_byte(text++) )) {
 214:	84 91       	lpm	r24, Z
 216:	ef 01       	movw	r28, r30
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	88 23       	and	r24, r24
 21c:	21 f0       	breq	.+8      	; 0x226 <lcd_write_text_P+0x18>
		lcd_write_data(ch);
 21e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_write_data>
 222:	fe 01       	movw	r30, r28
 224:	f7 cf       	rjmp	.-18     	; 0x214 <lcd_write_text_P+0x6>
	}
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <main>:
#include "lcd.h"

const char charrr[] PROGMEM = "Im here";

int main(void){
	lcdinit();
 22c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcdinit>
	
	lcd_set_xy(0, 0);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_set_xy>
	printf("Dzisiaj Dzien Pi");
 238:	8e e6       	ldi	r24, 0x6E	; 110
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	0e 94 33 01 	call	0x266	; 0x266 <printf>
	lcd_set_xy(0, 1);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_set_xy>
	lcd_write_text_P(charrr);
 24c:	84 e5       	ldi	r24, 0x54	; 84
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_write_text_P>
	lcd_write_text_xy(8, 1, "3.1415");	
 254:	4f e7       	ldi	r20, 0x7F	; 127
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_write_text_xy>
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x38>

00000266 <printf>:
 266:	a0 e0       	ldi	r26, 0x00	; 0
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e9 e3       	ldi	r30, 0x39	; 57
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__prologue_saves__+0x20>
 272:	ae 01       	movw	r20, r28
 274:	4b 5f       	subi	r20, 0xFB	; 251
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	fa 01       	movw	r30, r20
 27a:	61 91       	ld	r22, Z+
 27c:	71 91       	ld	r23, Z+
 27e:	af 01       	movw	r20, r30
 280:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end+0x2>
 284:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x3>
 288:	0e 94 49 01 	call	0x292	; 0x292 <vfprintf>
 28c:	e2 e0       	ldi	r30, 0x02	; 2
 28e:	0c 94 06 04 	jmp	0x80c	; 0x80c <__epilogue_restores__+0x20>

00000292 <vfprintf>:
 292:	ab e0       	ldi	r26, 0x0B	; 11
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	ef e4       	ldi	r30, 0x4F	; 79
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__prologue_saves__>
 29e:	6c 01       	movw	r12, r24
 2a0:	7b 01       	movw	r14, r22
 2a2:	8a 01       	movw	r16, r20
 2a4:	fc 01       	movw	r30, r24
 2a6:	17 82       	std	Z+7, r1	; 0x07
 2a8:	16 82       	std	Z+6, r1	; 0x06
 2aa:	83 81       	ldd	r24, Z+3	; 0x03
 2ac:	81 ff       	sbrs	r24, 1
 2ae:	cc c1       	rjmp	.+920    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	3c 01       	movw	r6, r24
 2b6:	f6 01       	movw	r30, r12
 2b8:	93 81       	ldd	r25, Z+3	; 0x03
 2ba:	f7 01       	movw	r30, r14
 2bc:	93 fd       	sbrc	r25, 3
 2be:	85 91       	lpm	r24, Z+
 2c0:	93 ff       	sbrs	r25, 3
 2c2:	81 91       	ld	r24, Z+
 2c4:	7f 01       	movw	r14, r30
 2c6:	88 23       	and	r24, r24
 2c8:	09 f4       	brne	.+2      	; 0x2cc <vfprintf+0x3a>
 2ca:	ba c1       	rjmp	.+884    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 2cc:	85 32       	cpi	r24, 0x25	; 37
 2ce:	39 f4       	brne	.+14     	; 0x2de <vfprintf+0x4c>
 2d0:	93 fd       	sbrc	r25, 3
 2d2:	85 91       	lpm	r24, Z+
 2d4:	93 ff       	sbrs	r25, 3
 2d6:	81 91       	ld	r24, Z+
 2d8:	7f 01       	movw	r14, r30
 2da:	85 32       	cpi	r24, 0x25	; 37
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <vfprintf+0x56>
 2de:	b6 01       	movw	r22, r12
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 2e6:	e7 cf       	rjmp	.-50     	; 0x2b6 <vfprintf+0x24>
 2e8:	91 2c       	mov	r9, r1
 2ea:	21 2c       	mov	r2, r1
 2ec:	31 2c       	mov	r3, r1
 2ee:	ff e1       	ldi	r31, 0x1F	; 31
 2f0:	f3 15       	cp	r31, r3
 2f2:	d8 f0       	brcs	.+54     	; 0x32a <vfprintf+0x98>
 2f4:	8b 32       	cpi	r24, 0x2B	; 43
 2f6:	79 f0       	breq	.+30     	; 0x316 <vfprintf+0x84>
 2f8:	38 f4       	brcc	.+14     	; 0x308 <vfprintf+0x76>
 2fa:	80 32       	cpi	r24, 0x20	; 32
 2fc:	79 f0       	breq	.+30     	; 0x31c <vfprintf+0x8a>
 2fe:	83 32       	cpi	r24, 0x23	; 35
 300:	a1 f4       	brne	.+40     	; 0x32a <vfprintf+0x98>
 302:	23 2d       	mov	r18, r3
 304:	20 61       	ori	r18, 0x10	; 16
 306:	1d c0       	rjmp	.+58     	; 0x342 <vfprintf+0xb0>
 308:	8d 32       	cpi	r24, 0x2D	; 45
 30a:	61 f0       	breq	.+24     	; 0x324 <vfprintf+0x92>
 30c:	80 33       	cpi	r24, 0x30	; 48
 30e:	69 f4       	brne	.+26     	; 0x32a <vfprintf+0x98>
 310:	23 2d       	mov	r18, r3
 312:	21 60       	ori	r18, 0x01	; 1
 314:	16 c0       	rjmp	.+44     	; 0x342 <vfprintf+0xb0>
 316:	83 2d       	mov	r24, r3
 318:	82 60       	ori	r24, 0x02	; 2
 31a:	38 2e       	mov	r3, r24
 31c:	e3 2d       	mov	r30, r3
 31e:	e4 60       	ori	r30, 0x04	; 4
 320:	3e 2e       	mov	r3, r30
 322:	2a c0       	rjmp	.+84     	; 0x378 <vfprintf+0xe6>
 324:	f3 2d       	mov	r31, r3
 326:	f8 60       	ori	r31, 0x08	; 8
 328:	1d c0       	rjmp	.+58     	; 0x364 <vfprintf+0xd2>
 32a:	37 fc       	sbrc	r3, 7
 32c:	2d c0       	rjmp	.+90     	; 0x388 <vfprintf+0xf6>
 32e:	20 ed       	ldi	r18, 0xD0	; 208
 330:	28 0f       	add	r18, r24
 332:	2a 30       	cpi	r18, 0x0A	; 10
 334:	40 f0       	brcs	.+16     	; 0x346 <vfprintf+0xb4>
 336:	8e 32       	cpi	r24, 0x2E	; 46
 338:	b9 f4       	brne	.+46     	; 0x368 <vfprintf+0xd6>
 33a:	36 fc       	sbrc	r3, 6
 33c:	81 c1       	rjmp	.+770    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 33e:	23 2d       	mov	r18, r3
 340:	20 64       	ori	r18, 0x40	; 64
 342:	32 2e       	mov	r3, r18
 344:	19 c0       	rjmp	.+50     	; 0x378 <vfprintf+0xe6>
 346:	36 fe       	sbrs	r3, 6
 348:	06 c0       	rjmp	.+12     	; 0x356 <vfprintf+0xc4>
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	98 9e       	mul	r9, r24
 34e:	20 0d       	add	r18, r0
 350:	11 24       	eor	r1, r1
 352:	92 2e       	mov	r9, r18
 354:	11 c0       	rjmp	.+34     	; 0x378 <vfprintf+0xe6>
 356:	ea e0       	ldi	r30, 0x0A	; 10
 358:	2e 9e       	mul	r2, r30
 35a:	20 0d       	add	r18, r0
 35c:	11 24       	eor	r1, r1
 35e:	22 2e       	mov	r2, r18
 360:	f3 2d       	mov	r31, r3
 362:	f0 62       	ori	r31, 0x20	; 32
 364:	3f 2e       	mov	r3, r31
 366:	08 c0       	rjmp	.+16     	; 0x378 <vfprintf+0xe6>
 368:	8c 36       	cpi	r24, 0x6C	; 108
 36a:	21 f4       	brne	.+8      	; 0x374 <vfprintf+0xe2>
 36c:	83 2d       	mov	r24, r3
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	38 2e       	mov	r3, r24
 372:	02 c0       	rjmp	.+4      	; 0x378 <vfprintf+0xe6>
 374:	88 36       	cpi	r24, 0x68	; 104
 376:	41 f4       	brne	.+16     	; 0x388 <vfprintf+0xf6>
 378:	f7 01       	movw	r30, r14
 37a:	93 fd       	sbrc	r25, 3
 37c:	85 91       	lpm	r24, Z+
 37e:	93 ff       	sbrs	r25, 3
 380:	81 91       	ld	r24, Z+
 382:	7f 01       	movw	r14, r30
 384:	81 11       	cpse	r24, r1
 386:	b3 cf       	rjmp	.-154    	; 0x2ee <vfprintf+0x5c>
 388:	98 2f       	mov	r25, r24
 38a:	9f 7d       	andi	r25, 0xDF	; 223
 38c:	95 54       	subi	r25, 0x45	; 69
 38e:	93 30       	cpi	r25, 0x03	; 3
 390:	28 f4       	brcc	.+10     	; 0x39c <vfprintf+0x10a>
 392:	0c 5f       	subi	r16, 0xFC	; 252
 394:	1f 4f       	sbci	r17, 0xFF	; 255
 396:	9f e3       	ldi	r25, 0x3F	; 63
 398:	99 83       	std	Y+1, r25	; 0x01
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <vfprintf+0x124>
 39c:	83 36       	cpi	r24, 0x63	; 99
 39e:	31 f0       	breq	.+12     	; 0x3ac <vfprintf+0x11a>
 3a0:	83 37       	cpi	r24, 0x73	; 115
 3a2:	71 f0       	breq	.+28     	; 0x3c0 <vfprintf+0x12e>
 3a4:	83 35       	cpi	r24, 0x53	; 83
 3a6:	09 f0       	breq	.+2      	; 0x3aa <vfprintf+0x118>
 3a8:	59 c0       	rjmp	.+178    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 3aa:	21 c0       	rjmp	.+66     	; 0x3ee <vfprintf+0x15c>
 3ac:	f8 01       	movw	r30, r16
 3ae:	80 81       	ld	r24, Z
 3b0:	89 83       	std	Y+1, r24	; 0x01
 3b2:	0e 5f       	subi	r16, 0xFE	; 254
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	88 24       	eor	r8, r8
 3b8:	83 94       	inc	r8
 3ba:	91 2c       	mov	r9, r1
 3bc:	53 01       	movw	r10, r6
 3be:	13 c0       	rjmp	.+38     	; 0x3e6 <vfprintf+0x154>
 3c0:	28 01       	movw	r4, r16
 3c2:	f2 e0       	ldi	r31, 0x02	; 2
 3c4:	4f 0e       	add	r4, r31
 3c6:	51 1c       	adc	r5, r1
 3c8:	f8 01       	movw	r30, r16
 3ca:	a0 80       	ld	r10, Z
 3cc:	b1 80       	ldd	r11, Z+1	; 0x01
 3ce:	36 fe       	sbrs	r3, 6
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <vfprintf+0x146>
 3d2:	69 2d       	mov	r22, r9
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <vfprintf+0x14a>
 3d8:	6f ef       	ldi	r22, 0xFF	; 255
 3da:	7f ef       	ldi	r23, 0xFF	; 255
 3dc:	c5 01       	movw	r24, r10
 3de:	0e 94 35 03 	call	0x66a	; 0x66a <strnlen>
 3e2:	4c 01       	movw	r8, r24
 3e4:	82 01       	movw	r16, r4
 3e6:	f3 2d       	mov	r31, r3
 3e8:	ff 77       	andi	r31, 0x7F	; 127
 3ea:	3f 2e       	mov	r3, r31
 3ec:	16 c0       	rjmp	.+44     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3ee:	28 01       	movw	r4, r16
 3f0:	22 e0       	ldi	r18, 0x02	; 2
 3f2:	42 0e       	add	r4, r18
 3f4:	51 1c       	adc	r5, r1
 3f6:	f8 01       	movw	r30, r16
 3f8:	a0 80       	ld	r10, Z
 3fa:	b1 80       	ldd	r11, Z+1	; 0x01
 3fc:	36 fe       	sbrs	r3, 6
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 400:	69 2d       	mov	r22, r9
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	6f ef       	ldi	r22, 0xFF	; 255
 408:	7f ef       	ldi	r23, 0xFF	; 255
 40a:	c5 01       	movw	r24, r10
 40c:	0e 94 2a 03 	call	0x654	; 0x654 <strnlen_P>
 410:	4c 01       	movw	r8, r24
 412:	f3 2d       	mov	r31, r3
 414:	f0 68       	ori	r31, 0x80	; 128
 416:	3f 2e       	mov	r3, r31
 418:	82 01       	movw	r16, r4
 41a:	33 fc       	sbrc	r3, 3
 41c:	1b c0       	rjmp	.+54     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 41e:	82 2d       	mov	r24, r2
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	88 16       	cp	r8, r24
 424:	99 06       	cpc	r9, r25
 426:	b0 f4       	brcc	.+44     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 428:	b6 01       	movw	r22, r12
 42a:	80 e2       	ldi	r24, 0x20	; 32
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 432:	2a 94       	dec	r2
 434:	f4 cf       	rjmp	.-24     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 436:	f5 01       	movw	r30, r10
 438:	37 fc       	sbrc	r3, 7
 43a:	85 91       	lpm	r24, Z+
 43c:	37 fe       	sbrs	r3, 7
 43e:	81 91       	ld	r24, Z+
 440:	5f 01       	movw	r10, r30
 442:	b6 01       	movw	r22, r12
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 44a:	21 10       	cpse	r2, r1
 44c:	2a 94       	dec	r2
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	82 1a       	sub	r8, r18
 452:	91 08       	sbc	r9, r1
 454:	81 14       	cp	r8, r1
 456:	91 04       	cpc	r9, r1
 458:	71 f7       	brne	.-36     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 45a:	e8 c0       	rjmp	.+464    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 45c:	84 36       	cpi	r24, 0x64	; 100
 45e:	11 f0       	breq	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	89 36       	cpi	r24, 0x69	; 105
 462:	41 f5       	brne	.+80     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 464:	f8 01       	movw	r30, r16
 466:	37 fe       	sbrs	r3, 7
 468:	07 c0       	rjmp	.+14     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 46a:	60 81       	ld	r22, Z
 46c:	71 81       	ldd	r23, Z+1	; 0x01
 46e:	82 81       	ldd	r24, Z+2	; 0x02
 470:	93 81       	ldd	r25, Z+3	; 0x03
 472:	0c 5f       	subi	r16, 0xFC	; 252
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	08 c0       	rjmp	.+16     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 478:	60 81       	ld	r22, Z
 47a:	71 81       	ldd	r23, Z+1	; 0x01
 47c:	07 2e       	mov	r0, r23
 47e:	00 0c       	add	r0, r0
 480:	88 0b       	sbc	r24, r24
 482:	99 0b       	sbc	r25, r25
 484:	0e 5f       	subi	r16, 0xFE	; 254
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	f3 2d       	mov	r31, r3
 48a:	ff 76       	andi	r31, 0x6F	; 111
 48c:	3f 2e       	mov	r3, r31
 48e:	97 ff       	sbrs	r25, 7
 490:	09 c0       	rjmp	.+18     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 492:	90 95       	com	r25
 494:	80 95       	com	r24
 496:	70 95       	com	r23
 498:	61 95       	neg	r22
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	f0 68       	ori	r31, 0x80	; 128
 4a2:	3f 2e       	mov	r3, r31
 4a4:	2a e0       	ldi	r18, 0x0A	; 10
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	a3 01       	movw	r20, r6
 4aa:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__ultoa_invert>
 4ae:	88 2e       	mov	r8, r24
 4b0:	86 18       	sub	r8, r6
 4b2:	45 c0       	rjmp	.+138    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 4b4:	85 37       	cpi	r24, 0x75	; 117
 4b6:	31 f4       	brne	.+12     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b8:	23 2d       	mov	r18, r3
 4ba:	2f 7e       	andi	r18, 0xEF	; 239
 4bc:	b2 2e       	mov	r11, r18
 4be:	2a e0       	ldi	r18, 0x0A	; 10
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	25 c0       	rjmp	.+74     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4c4:	93 2d       	mov	r25, r3
 4c6:	99 7f       	andi	r25, 0xF9	; 249
 4c8:	b9 2e       	mov	r11, r25
 4ca:	8f 36       	cpi	r24, 0x6F	; 111
 4cc:	c1 f0       	breq	.+48     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4ce:	18 f4       	brcc	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d0:	88 35       	cpi	r24, 0x58	; 88
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4d4:	b5 c0       	rjmp	.+362    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 4d6:	80 37       	cpi	r24, 0x70	; 112
 4d8:	19 f0       	breq	.+6      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4da:	88 37       	cpi	r24, 0x78	; 120
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4de:	b0 c0       	rjmp	.+352    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 4e0:	e9 2f       	mov	r30, r25
 4e2:	e0 61       	ori	r30, 0x10	; 16
 4e4:	be 2e       	mov	r11, r30
 4e6:	b4 fe       	sbrs	r11, 4
 4e8:	0d c0       	rjmp	.+26     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4ea:	fb 2d       	mov	r31, r11
 4ec:	f4 60       	ori	r31, 0x04	; 4
 4ee:	bf 2e       	mov	r11, r31
 4f0:	09 c0       	rjmp	.+18     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 4f2:	34 fe       	sbrs	r3, 4
 4f4:	0a c0       	rjmp	.+20     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4f6:	29 2f       	mov	r18, r25
 4f8:	26 60       	ori	r18, 0x06	; 6
 4fa:	b2 2e       	mov	r11, r18
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4fe:	28 e0       	ldi	r18, 0x08	; 8
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	05 c0       	rjmp	.+10     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 504:	20 e1       	ldi	r18, 0x10	; 16
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50a:	20 e1       	ldi	r18, 0x10	; 16
 50c:	32 e0       	ldi	r19, 0x02	; 2
 50e:	f8 01       	movw	r30, r16
 510:	b7 fe       	sbrs	r11, 7
 512:	07 c0       	rjmp	.+14     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 514:	60 81       	ld	r22, Z
 516:	71 81       	ldd	r23, Z+1	; 0x01
 518:	82 81       	ldd	r24, Z+2	; 0x02
 51a:	93 81       	ldd	r25, Z+3	; 0x03
 51c:	0c 5f       	subi	r16, 0xFC	; 252
 51e:	1f 4f       	sbci	r17, 0xFF	; 255
 520:	06 c0       	rjmp	.+12     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 522:	60 81       	ld	r22, Z
 524:	71 81       	ldd	r23, Z+1	; 0x01
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 5f       	subi	r16, 0xFE	; 254
 52c:	1f 4f       	sbci	r17, 0xFF	; 255
 52e:	a3 01       	movw	r20, r6
 530:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__ultoa_invert>
 534:	88 2e       	mov	r8, r24
 536:	86 18       	sub	r8, r6
 538:	fb 2d       	mov	r31, r11
 53a:	ff 77       	andi	r31, 0x7F	; 127
 53c:	3f 2e       	mov	r3, r31
 53e:	36 fe       	sbrs	r3, 6
 540:	0d c0       	rjmp	.+26     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 542:	23 2d       	mov	r18, r3
 544:	2e 7f       	andi	r18, 0xFE	; 254
 546:	a2 2e       	mov	r10, r18
 548:	89 14       	cp	r8, r9
 54a:	58 f4       	brcc	.+22     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 54c:	34 fe       	sbrs	r3, 4
 54e:	0b c0       	rjmp	.+22     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 550:	32 fc       	sbrc	r3, 2
 552:	09 c0       	rjmp	.+18     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 554:	83 2d       	mov	r24, r3
 556:	8e 7e       	andi	r24, 0xEE	; 238
 558:	a8 2e       	mov	r10, r24
 55a:	05 c0       	rjmp	.+10     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 55c:	b8 2c       	mov	r11, r8
 55e:	a3 2c       	mov	r10, r3
 560:	03 c0       	rjmp	.+6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 562:	b8 2c       	mov	r11, r8
 564:	01 c0       	rjmp	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 566:	b9 2c       	mov	r11, r9
 568:	a4 fe       	sbrs	r10, 4
 56a:	0f c0       	rjmp	.+30     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 56c:	fe 01       	movw	r30, r28
 56e:	e8 0d       	add	r30, r8
 570:	f1 1d       	adc	r31, r1
 572:	80 81       	ld	r24, Z
 574:	80 33       	cpi	r24, 0x30	; 48
 576:	21 f4       	brne	.+8      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 578:	9a 2d       	mov	r25, r10
 57a:	99 7e       	andi	r25, 0xE9	; 233
 57c:	a9 2e       	mov	r10, r25
 57e:	09 c0       	rjmp	.+18     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 580:	a2 fe       	sbrs	r10, 2
 582:	06 c0       	rjmp	.+12     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 584:	b3 94       	inc	r11
 586:	b3 94       	inc	r11
 588:	04 c0       	rjmp	.+8      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 58a:	8a 2d       	mov	r24, r10
 58c:	86 78       	andi	r24, 0x86	; 134
 58e:	09 f0       	breq	.+2      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 590:	b3 94       	inc	r11
 592:	a3 fc       	sbrc	r10, 3
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 596:	a0 fe       	sbrs	r10, 0
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 59a:	b2 14       	cp	r11, r2
 59c:	88 f4       	brcc	.+34     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 59e:	28 0c       	add	r2, r8
 5a0:	92 2c       	mov	r9, r2
 5a2:	9b 18       	sub	r9, r11
 5a4:	0e c0       	rjmp	.+28     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5a6:	b2 14       	cp	r11, r2
 5a8:	60 f4       	brcc	.+24     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5aa:	b6 01       	movw	r22, r12
 5ac:	80 e2       	ldi	r24, 0x20	; 32
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 5b4:	b3 94       	inc	r11
 5b6:	f7 cf       	rjmp	.-18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 5b8:	b2 14       	cp	r11, r2
 5ba:	18 f4       	brcc	.+6      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5bc:	2b 18       	sub	r2, r11
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5c0:	98 2c       	mov	r9, r8
 5c2:	21 2c       	mov	r2, r1
 5c4:	a4 fe       	sbrs	r10, 4
 5c6:	10 c0       	rjmp	.+32     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5c8:	b6 01       	movw	r22, r12
 5ca:	80 e3       	ldi	r24, 0x30	; 48
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 5d2:	a2 fe       	sbrs	r10, 2
 5d4:	17 c0       	rjmp	.+46     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5d6:	a1 fc       	sbrc	r10, 1
 5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
 5da:	88 e7       	ldi	r24, 0x78	; 120
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e0:	88 e5       	ldi	r24, 0x58	; 88
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	b6 01       	movw	r22, r12
 5e6:	0c c0       	rjmp	.+24     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
 5e8:	8a 2d       	mov	r24, r10
 5ea:	86 78       	andi	r24, 0x86	; 134
 5ec:	59 f0       	breq	.+22     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 5ee:	a1 fe       	sbrs	r10, 1
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f2:	8b e2       	ldi	r24, 0x2B	; 43
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5f6:	80 e2       	ldi	r24, 0x20	; 32
 5f8:	a7 fc       	sbrc	r10, 7
 5fa:	8d e2       	ldi	r24, 0x2D	; 45
 5fc:	b6 01       	movw	r22, r12
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 604:	89 14       	cp	r8, r9
 606:	38 f4       	brcc	.+14     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 608:	b6 01       	movw	r22, r12
 60a:	80 e3       	ldi	r24, 0x30	; 48
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 612:	9a 94       	dec	r9
 614:	f7 cf       	rjmp	.-18     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
 616:	8a 94       	dec	r8
 618:	f3 01       	movw	r30, r6
 61a:	e8 0d       	add	r30, r8
 61c:	f1 1d       	adc	r31, r1
 61e:	80 81       	ld	r24, Z
 620:	b6 01       	movw	r22, r12
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 628:	81 10       	cpse	r8, r1
 62a:	f5 cf       	rjmp	.-22     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 62c:	22 20       	and	r2, r2
 62e:	09 f4       	brne	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 630:	42 ce       	rjmp	.-892    	; 0x2b6 <vfprintf+0x24>
 632:	b6 01       	movw	r22, r12
 634:	80 e2       	ldi	r24, 0x20	; 32
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 40 03 	call	0x680	; 0x680 <fputc>
 63c:	2a 94       	dec	r2
 63e:	f6 cf       	rjmp	.-20     	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
 640:	f6 01       	movw	r30, r12
 642:	86 81       	ldd	r24, Z+6	; 0x06
 644:	97 81       	ldd	r25, Z+7	; 0x07
 646:	02 c0       	rjmp	.+4      	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	2b 96       	adiw	r28, 0x0b	; 11
 64e:	e2 e1       	ldi	r30, 0x12	; 18
 650:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__epilogue_restores__>

00000654 <strnlen_P>:
 654:	fc 01       	movw	r30, r24
 656:	05 90       	lpm	r0, Z+
 658:	61 50       	subi	r22, 0x01	; 1
 65a:	70 40       	sbci	r23, 0x00	; 0
 65c:	01 10       	cpse	r0, r1
 65e:	d8 f7       	brcc	.-10     	; 0x656 <strnlen_P+0x2>
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	8e 0f       	add	r24, r30
 666:	9f 1f       	adc	r25, r31
 668:	08 95       	ret

0000066a <strnlen>:
 66a:	fc 01       	movw	r30, r24
 66c:	61 50       	subi	r22, 0x01	; 1
 66e:	70 40       	sbci	r23, 0x00	; 0
 670:	01 90       	ld	r0, Z+
 672:	01 10       	cpse	r0, r1
 674:	d8 f7       	brcc	.-10     	; 0x66c <strnlen+0x2>
 676:	80 95       	com	r24
 678:	90 95       	com	r25
 67a:	8e 0f       	add	r24, r30
 67c:	9f 1f       	adc	r25, r31
 67e:	08 95       	ret

00000680 <fputc>:
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	df 93       	push	r29
 688:	fb 01       	movw	r30, r22
 68a:	23 81       	ldd	r18, Z+3	; 0x03
 68c:	21 fd       	sbrc	r18, 1
 68e:	03 c0       	rjmp	.+6      	; 0x696 <fputc+0x16>
 690:	8f ef       	ldi	r24, 0xFF	; 255
 692:	9f ef       	ldi	r25, 0xFF	; 255
 694:	2c c0       	rjmp	.+88     	; 0x6ee <fputc+0x6e>
 696:	22 ff       	sbrs	r18, 2
 698:	16 c0       	rjmp	.+44     	; 0x6c6 <fputc+0x46>
 69a:	46 81       	ldd	r20, Z+6	; 0x06
 69c:	57 81       	ldd	r21, Z+7	; 0x07
 69e:	24 81       	ldd	r18, Z+4	; 0x04
 6a0:	35 81       	ldd	r19, Z+5	; 0x05
 6a2:	42 17       	cp	r20, r18
 6a4:	53 07       	cpc	r21, r19
 6a6:	44 f4       	brge	.+16     	; 0x6b8 <fputc+0x38>
 6a8:	a0 81       	ld	r26, Z
 6aa:	b1 81       	ldd	r27, Z+1	; 0x01
 6ac:	9d 01       	movw	r18, r26
 6ae:	2f 5f       	subi	r18, 0xFF	; 255
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	31 83       	std	Z+1, r19	; 0x01
 6b4:	20 83       	st	Z, r18
 6b6:	8c 93       	st	X, r24
 6b8:	26 81       	ldd	r18, Z+6	; 0x06
 6ba:	37 81       	ldd	r19, Z+7	; 0x07
 6bc:	2f 5f       	subi	r18, 0xFF	; 255
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	37 83       	std	Z+7, r19	; 0x07
 6c2:	26 83       	std	Z+6, r18	; 0x06
 6c4:	14 c0       	rjmp	.+40     	; 0x6ee <fputc+0x6e>
 6c6:	8b 01       	movw	r16, r22
 6c8:	ec 01       	movw	r28, r24
 6ca:	fb 01       	movw	r30, r22
 6cc:	00 84       	ldd	r0, Z+8	; 0x08
 6ce:	f1 85       	ldd	r31, Z+9	; 0x09
 6d0:	e0 2d       	mov	r30, r0
 6d2:	09 95       	icall
 6d4:	89 2b       	or	r24, r25
 6d6:	e1 f6       	brne	.-72     	; 0x690 <fputc+0x10>
 6d8:	d8 01       	movw	r26, r16
 6da:	16 96       	adiw	r26, 0x06	; 6
 6dc:	8d 91       	ld	r24, X+
 6de:	9c 91       	ld	r25, X
 6e0:	17 97       	sbiw	r26, 0x07	; 7
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	17 96       	adiw	r26, 0x07	; 7
 6e6:	9c 93       	st	X, r25
 6e8:	8e 93       	st	-X, r24
 6ea:	16 97       	sbiw	r26, 0x06	; 6
 6ec:	ce 01       	movw	r24, r28
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	08 95       	ret

000006f8 <__ultoa_invert>:
 6f8:	fa 01       	movw	r30, r20
 6fa:	aa 27       	eor	r26, r26
 6fc:	28 30       	cpi	r18, 0x08	; 8
 6fe:	51 f1       	breq	.+84     	; 0x754 <__ultoa_invert+0x5c>
 700:	20 31       	cpi	r18, 0x10	; 16
 702:	81 f1       	breq	.+96     	; 0x764 <__ultoa_invert+0x6c>
 704:	e8 94       	clt
 706:	6f 93       	push	r22
 708:	6e 7f       	andi	r22, 0xFE	; 254
 70a:	6e 5f       	subi	r22, 0xFE	; 254
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	af 4f       	sbci	r26, 0xFF	; 255
 714:	b1 e0       	ldi	r27, 0x01	; 1
 716:	3e d0       	rcall	.+124    	; 0x794 <__ultoa_invert+0x9c>
 718:	b4 e0       	ldi	r27, 0x04	; 4
 71a:	3c d0       	rcall	.+120    	; 0x794 <__ultoa_invert+0x9c>
 71c:	67 0f       	add	r22, r23
 71e:	78 1f       	adc	r23, r24
 720:	89 1f       	adc	r24, r25
 722:	9a 1f       	adc	r25, r26
 724:	a1 1d       	adc	r26, r1
 726:	68 0f       	add	r22, r24
 728:	79 1f       	adc	r23, r25
 72a:	8a 1f       	adc	r24, r26
 72c:	91 1d       	adc	r25, r1
 72e:	a1 1d       	adc	r26, r1
 730:	6a 0f       	add	r22, r26
 732:	71 1d       	adc	r23, r1
 734:	81 1d       	adc	r24, r1
 736:	91 1d       	adc	r25, r1
 738:	a1 1d       	adc	r26, r1
 73a:	20 d0       	rcall	.+64     	; 0x77c <__ultoa_invert+0x84>
 73c:	09 f4       	brne	.+2      	; 0x740 <__ultoa_invert+0x48>
 73e:	68 94       	set
 740:	3f 91       	pop	r19
 742:	2a e0       	ldi	r18, 0x0A	; 10
 744:	26 9f       	mul	r18, r22
 746:	11 24       	eor	r1, r1
 748:	30 19       	sub	r19, r0
 74a:	30 5d       	subi	r19, 0xD0	; 208
 74c:	31 93       	st	Z+, r19
 74e:	de f6       	brtc	.-74     	; 0x706 <__ultoa_invert+0xe>
 750:	cf 01       	movw	r24, r30
 752:	08 95       	ret
 754:	46 2f       	mov	r20, r22
 756:	47 70       	andi	r20, 0x07	; 7
 758:	40 5d       	subi	r20, 0xD0	; 208
 75a:	41 93       	st	Z+, r20
 75c:	b3 e0       	ldi	r27, 0x03	; 3
 75e:	0f d0       	rcall	.+30     	; 0x77e <__ultoa_invert+0x86>
 760:	c9 f7       	brne	.-14     	; 0x754 <__ultoa_invert+0x5c>
 762:	f6 cf       	rjmp	.-20     	; 0x750 <__ultoa_invert+0x58>
 764:	46 2f       	mov	r20, r22
 766:	4f 70       	andi	r20, 0x0F	; 15
 768:	40 5d       	subi	r20, 0xD0	; 208
 76a:	4a 33       	cpi	r20, 0x3A	; 58
 76c:	18 f0       	brcs	.+6      	; 0x774 <__ultoa_invert+0x7c>
 76e:	49 5d       	subi	r20, 0xD9	; 217
 770:	31 fd       	sbrc	r19, 1
 772:	40 52       	subi	r20, 0x20	; 32
 774:	41 93       	st	Z+, r20
 776:	02 d0       	rcall	.+4      	; 0x77c <__ultoa_invert+0x84>
 778:	a9 f7       	brne	.-22     	; 0x764 <__ultoa_invert+0x6c>
 77a:	ea cf       	rjmp	.-44     	; 0x750 <__ultoa_invert+0x58>
 77c:	b4 e0       	ldi	r27, 0x04	; 4
 77e:	a6 95       	lsr	r26
 780:	97 95       	ror	r25
 782:	87 95       	ror	r24
 784:	77 95       	ror	r23
 786:	67 95       	ror	r22
 788:	ba 95       	dec	r27
 78a:	c9 f7       	brne	.-14     	; 0x77e <__ultoa_invert+0x86>
 78c:	00 97       	sbiw	r24, 0x00	; 0
 78e:	61 05       	cpc	r22, r1
 790:	71 05       	cpc	r23, r1
 792:	08 95       	ret
 794:	9b 01       	movw	r18, r22
 796:	ac 01       	movw	r20, r24
 798:	0a 2e       	mov	r0, r26
 79a:	06 94       	lsr	r0
 79c:	57 95       	ror	r21
 79e:	47 95       	ror	r20
 7a0:	37 95       	ror	r19
 7a2:	27 95       	ror	r18
 7a4:	ba 95       	dec	r27
 7a6:	c9 f7       	brne	.-14     	; 0x79a <__ultoa_invert+0xa2>
 7a8:	62 0f       	add	r22, r18
 7aa:	73 1f       	adc	r23, r19
 7ac:	84 1f       	adc	r24, r20
 7ae:	95 1f       	adc	r25, r21
 7b0:	a0 1d       	adc	r26, r0
 7b2:	08 95       	ret

000007b4 <__prologue_saves__>:
 7b4:	2f 92       	push	r2
 7b6:	3f 92       	push	r3
 7b8:	4f 92       	push	r4
 7ba:	5f 92       	push	r5
 7bc:	6f 92       	push	r6
 7be:	7f 92       	push	r7
 7c0:	8f 92       	push	r8
 7c2:	9f 92       	push	r9
 7c4:	af 92       	push	r10
 7c6:	bf 92       	push	r11
 7c8:	cf 92       	push	r12
 7ca:	df 92       	push	r13
 7cc:	ef 92       	push	r14
 7ce:	ff 92       	push	r15
 7d0:	0f 93       	push	r16
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
 7dc:	ca 1b       	sub	r28, r26
 7de:	db 0b       	sbc	r29, r27
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	de bf       	out	0x3e, r29	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	cd bf       	out	0x3d, r28	; 61
 7ea:	09 94       	ijmp

000007ec <__epilogue_restores__>:
 7ec:	2a 88       	ldd	r2, Y+18	; 0x12
 7ee:	39 88       	ldd	r3, Y+17	; 0x11
 7f0:	48 88       	ldd	r4, Y+16	; 0x10
 7f2:	5f 84       	ldd	r5, Y+15	; 0x0f
 7f4:	6e 84       	ldd	r6, Y+14	; 0x0e
 7f6:	7d 84       	ldd	r7, Y+13	; 0x0d
 7f8:	8c 84       	ldd	r8, Y+12	; 0x0c
 7fa:	9b 84       	ldd	r9, Y+11	; 0x0b
 7fc:	aa 84       	ldd	r10, Y+10	; 0x0a
 7fe:	b9 84       	ldd	r11, Y+9	; 0x09
 800:	c8 84       	ldd	r12, Y+8	; 0x08
 802:	df 80       	ldd	r13, Y+7	; 0x07
 804:	ee 80       	ldd	r14, Y+6	; 0x06
 806:	fd 80       	ldd	r15, Y+5	; 0x05
 808:	0c 81       	ldd	r16, Y+4	; 0x04
 80a:	1b 81       	ldd	r17, Y+3	; 0x03
 80c:	aa 81       	ldd	r26, Y+2	; 0x02
 80e:	b9 81       	ldd	r27, Y+1	; 0x01
 810:	ce 0f       	add	r28, r30
 812:	d1 1d       	adc	r29, r1
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	f8 94       	cli
 818:	de bf       	out	0x3e, r29	; 62
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	cd bf       	out	0x3d, r28	; 61
 81e:	ed 01       	movw	r28, r26
 820:	08 95       	ret

00000822 <_exit>:
 822:	f8 94       	cli

00000824 <__stop_program>:
 824:	ff cf       	rjmp	.-2      	; 0x824 <__stop_program>
